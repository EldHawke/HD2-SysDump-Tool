<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Vanara.PInvoke.DbgHelp</name>
    </assembly>
    <members>
        <member name="T:Vanara.PInvoke.DbgHelp">
            <summary>Items from the DbgHelp.dll</summary>
            <summary>Items from the DbgHelp.dll</summary>
            <summary>Items from the DbgHelp.dll</summary>
        </member>
        <member name="T:Vanara.PInvoke.DbgHelp.PENUMDIRTREE_CALLBACK">
            <summary>
            <para>An application-defined callback function used with the EnumDirTree function. It is called every time a match is found.</para>
            <para>
            The <c>PENUMDIRTREE_CALLBACK</c> and <c>PENUMDIRTREE_CALLBACKW</c> types define a pointer to this callback function.
            EnumDirTreeProc is a placeholder for the application-defined function name.
            </para>
            </summary>
            <param name="FilePath">A pointer to a buffer that receives the full path of the file that is found.</param>
            <param name="CallerData">
            A user-defined value specified in EnumDirTree, or <c>NULL</c>. Typically, this parameter is used by an application to pass a
            pointer to a data structure that enables the callback function to establish some context.
            </param>
            <returns>
            <para>To continue enumeration, the callback function must return <c>FALSE</c>.</para>
            <para>To stop enumeration, the callback function must return <c>TRUE</c>.</para>
            </returns>
        </member>
        <member name="T:Vanara.PInvoke.DbgHelp.PENUMLOADED_MODULES_CALLBACK">
            <summary>
            <para>An application-defined callback function used with the EnumerateLoadedModules64 function.</para>
            <para>
            The <c>PENUMLOADED_MODULES_CALLBACK64</c> and <c>PENUMLOADED_MODULES_CALLBACKW64</c> types define a pointer to this callback
            function. EnumerateLoadedModulesProc64 is a placeholder for the application-defined function name.
            </para>
            </summary>
            <param name="ModuleName">The name of the enumerated module.</param>
            <param name="ModuleBase">
            The base address of the module. Note that it is possible for this address to become invalid (for example, the module may be
            unloaded). Use exception handling when accessing the address or passing the address to another function to prevent an access
            violation from occurring.
            </param>
            <param name="ModuleSize">The size of the module, in bytes.</param>
            <param name="UserContext">Optional user-defined data. This value is passed from EnumerateLoadedModules64.</param>
            <returns>
            <para>To continue enumeration, the callback function must return <c>TRUE</c>.</para>
            <para>To stop enumeration, the callback function must return <c>FALSE</c>.</para>
            </returns>
            <remarks>
            <para>
            This callback function supersedes the PENUMLOADED_MODULES_CALLBACK callback function. PENUMLOADED_MODULES_CALLBACK is defined as
            follows in DbgHelp.h.
            </para>
            <para>
            <code>#if !defined(_IMAGEHLP_SOURCE_) &amp;&amp; defined(_IMAGEHLP64) #define PENUMLOADED_MODULES_CALLBACK PENUMLOADED_MODULES_CALLBACK64 #else typedef BOOL (CALLBACK *PENUMLOADED_MODULES_CALLBACK)( __in PCSTR ModuleName, __in ULONG ModuleBase, __in ULONG ModuleSize, __in_opt PVOID UserContext ); #endif</code>
            </para>
            </remarks>
        </member>
        <member name="T:Vanara.PInvoke.DbgHelp.PENUMLOADED_MODULES_CALLBACKW64">
            <summary>
            <para>An application-defined callback function used with the EnumerateLoadedModules64 function.</para>
            <para>
            The <c>PENUMLOADED_MODULES_CALLBACK64</c> and <c>PENUMLOADED_MODULES_CALLBACKW64</c> types define a pointer to this callback
            function. EnumerateLoadedModulesProc64 is a placeholder for the application-defined function name.
            </para>
            </summary>
            <param name="ModuleName">The name of the enumerated module.</param>
            <param name="ModuleBase">
            The base address of the module. Note that it is possible for this address to become invalid (for example, the module may be
            unloaded). Use exception handling when accessing the address or passing the address to another function to prevent an access
            violation from occurring.
            </param>
            <param name="ModuleSize">The size of the module, in bytes.</param>
            <param name="UserContext">Optional user-defined data. This value is passed from EnumerateLoadedModules64.</param>
            <returns>
            <para>To continue enumeration, the callback function must return <c>TRUE</c>.</para>
            <para>To stop enumeration, the callback function must return <c>FALSE</c>.</para>
            </returns>
            <remarks>
            <para>
            This callback function supersedes the PENUMLOADED_MODULES_CALLBACK callback function. PENUMLOADED_MODULES_CALLBACK is defined as
            follows in DbgHelp.h.
            </para>
            <para>
            <code>#if !defined(_IMAGEHLP_SOURCE_) &amp;&amp; defined(_IMAGEHLP64) #define PENUMLOADED_MODULES_CALLBACK PENUMLOADED_MODULES_CALLBACK64 #else typedef BOOL (CALLBACK *PENUMLOADED_MODULES_CALLBACK)( __in PCSTR ModuleName, __in ULONG ModuleBase, __in ULONG ModuleSize, __in_opt PVOID UserContext ); #endif</code>
            </para>
            </remarks>
        </member>
        <member name="T:Vanara.PInvoke.DbgHelp.PFIND_DEBUG_FILE_CALLBACK">
            <summary>
            <para>
            An application-defined callback function used with the FindDebugInfoFileEx function. It verifies whether the symbol file located
            by <c>FindDebugInfoFileEx</c> is the correct symbol file.
            </para>
            <para>
            The <c>PFIND_DEBUG_FILE_CALLBACK</c> and <c>PFIND_DEBUG_FILE_CALLBACKW</c> types define a pointer to this callback function.
            <c>FindDebugInfoFileProc</c> is a placeholder for the application-defined function name.
            </para>
            </summary>
            <param name="FileHandle">A handle to the symbol file.</param>
            <param name="FileName">The name of the symbol file.</param>
            <param name="CallerData">Optional user-defined data. This parameter can be <c>NULL</c>.</param>
            <returns>If the symbol file is valid, return <c>TRUE</c>. Otherwise, return <c>FALSE</c>.</returns>
            <remarks>
            One way to verify the symbol file is to compare its timestamp to the timestamp in the image. To retrieve the timestamp of the
            image, use the GetTimestampForLoadedLibrary function. To retrieve the timestamp of the symbol file, use the SymGetModuleInfo64 function.
            </remarks>
        </member>
        <member name="T:Vanara.PInvoke.DbgHelp.PFIND_EXE_FILE_CALLBACK">
            <summary>
            <para>
            An application-defined callback function used with the FindExecutableImageEx function. It verifies whether the executable file
            found by <c>FindExecutableImageEx</c> is the correct executable file.
            </para>
            <para>
            The <c>PFIND_EXE_FILE_CALLBACK</c> and <c>PFIND_EXE_FILE_CALLBACKW</c> types define a pointer to this callback function.
            <c>FindExecutableImageProc</c> is a placeholder for the application-defined function name.
            </para>
            </summary>
            <param name="FileHandle">A handle to the executable file.</param>
            <param name="FileName">The name of the executable file.</param>
            <param name="CallerData">Optional user-defined data. This parameter can be <c>NULL</c>.</param>
            <returns>If the executable file is valid, return <c>TRUE</c>. Otherwise, return <c>FALSE</c>.</returns>
        </member>
        <member name="T:Vanara.PInvoke.DbgHelp.PFUNCTION_TABLE_ACCESS_ROUTINE">
            <summary>
            <para>
            An application-defined callback function used with the StackWalk64 function. It provides access to the run-time function table
            for the process.
            </para>
            <para>
            The <c>PFUNCTION_TABLE_ACCESS_ROUTINE64</c> type defines a pointer to this callback function. <c>FunctionTableAccessProc64</c>
            is a placeholder for the application-defined function name.
            </para>
            </summary>
            <param name="hProcess">A handle to the process for which the stack trace is generated.</param>
            <param name="AddrBase">The address of the instruction to be located.</param>
            <returns>
            The function returns a pointer to the run-time function table. On an x86 computer, this is a pointer to an FPO_DATA structure.
            On an Alpha computer, this is a pointer to an IMAGE_FUNCTION_ENTRY structure.
            </returns>
            <remarks>
            <para>
            This callback function supersedes the PFUNCTION_TABLE_ACCESS_ROUTINE callback function. PFUNCTION_TABLE_ACCESS_ROUTINE is
            defined as follows in DbgHelp.h.
            </para>
            <para>
            <code>#if !defined(_IMAGEHLP_SOURCE_) &amp;&amp; defined(_IMAGEHLP64) #define PFUNCTION_TABLE_ACCESS_ROUTINE PFUNCTION_TABLE_ACCESS_ROUTINE64 #else typedef PVOID (__stdcall *PFUNCTION_TABLE_ACCESS_ROUTINE)( __in HANDLE hProcess, __in DWORD AddrBase ); #endif</code>
            </para>
            </remarks>
        </member>
        <member name="T:Vanara.PInvoke.DbgHelp.PFUNCTION_TABLE_ACCESS_ROUTINE64">
            <summary>
            <para>
            An application-defined callback function used with the StackWalk64 function. It provides access to the run-time function table
            for the process.
            </para>
            <para>
            The <c>PFUNCTION_TABLE_ACCESS_ROUTINE64</c> type defines a pointer to this callback function. <c>FunctionTableAccessProc64</c>
            is a placeholder for the application-defined function name.
            </para>
            </summary>
            <param name="ahProcess"/>
            <param name="AddrBase">The address of the instruction to be located.</param>
            <returns>
            The function returns a pointer to the run-time function table. On an x86 computer, this is a pointer to an FPO_DATA structure.
            On an Alpha computer, this is a pointer to an IMAGE_FUNCTION_ENTRY structure.
            </returns>
            <remarks>
            <para>
            This callback function supersedes the PFUNCTION_TABLE_ACCESS_ROUTINE callback function. PFUNCTION_TABLE_ACCESS_ROUTINE is
            defined as follows in DbgHelp.h.
            </para>
            <para>
            <code>#if !defined(_IMAGEHLP_SOURCE_) &amp;&amp; defined(_IMAGEHLP64) #define PFUNCTION_TABLE_ACCESS_ROUTINE PFUNCTION_TABLE_ACCESS_ROUTINE64 #else typedef PVOID (__stdcall *PFUNCTION_TABLE_ACCESS_ROUTINE)( __in HANDLE hProcess, __in DWORD AddrBase ); #endif</code>
            </para>
            </remarks>
        </member>
        <member name="T:Vanara.PInvoke.DbgHelp.PGET_MODULE_BASE_ROUTINE">
            <summary>
            <para>
            An application-defined callback function used with the StackWalk64 function. It is called when <c>StackWalk64</c> needs a module
            base address for a given virtual address.
            </para>
            <para>
            The <c>PGET_MODULE_BASE_ROUTINE64</c> type defines a pointer to this callback function. <c>GetModuleBaseProc64</c> is a
            placeholder for the application-defined function name.
            </para>
            </summary>
            <param name="hProcess">A handle to the process for which the stack trace is generated.</param>
            <param name="Address">An address within the module image to be located.</param>
            <returns>The function returns the base address of the module.</returns>
            <remarks>
            <para>
            This callback function supersedes the PGET_MODULE_BASE_ROUTINE callback function. PGET_MODULE_BASE_ROUTINE is defined as follows
            in DbgHelp.h.
            </para>
            <para>
            <code>#if !defined(_IMAGEHLP_SOURCE_) &amp;&amp; defined(_IMAGEHLP64) #define PGET_MODULE_BASE_ROUTINE PGET_MODULE_BASE_ROUTINE64 #else typedef DWORD (__stdcall *PGET_MODULE_BASE_ROUTINE)( __in HANDLE hProcess, __in DWORD Address ); #endif</code>
            </para>
            </remarks>
        </member>
        <member name="T:Vanara.PInvoke.DbgHelp.PGET_MODULE_BASE_ROUTINE64">
            <summary>
            <para>
            An application-defined callback function used with the StackWalk64 function. It is called when <c>StackWalk64</c> needs a module
            base address for a given virtual address.
            </para>
            <para>
            The <c>PGET_MODULE_BASE_ROUTINE64</c> type defines a pointer to this callback function. <c>GetModuleBaseProc64</c> is a
            placeholder for the application-defined function name.
            </para>
            </summary>
            <param name="hProcess">A handle to the process for which the stack trace is generated.</param>
            <param name="Address">An address within the module image to be located.</param>
            <returns>The function returns the base address of the module.</returns>
            <remarks>
            <para>
            This callback function supersedes the PGET_MODULE_BASE_ROUTINE callback function. PGET_MODULE_BASE_ROUTINE is defined as follows
            in DbgHelp.h.
            </para>
            <para>
            <code>#if !defined(_IMAGEHLP_SOURCE_) &amp;&amp; defined(_IMAGEHLP64) #define PGET_MODULE_BASE_ROUTINE PGET_MODULE_BASE_ROUTINE64 #else typedef DWORD (__stdcall *PGET_MODULE_BASE_ROUTINE)( __in HANDLE hProcess, __in DWORD Address ); #endif</code>
            </para>
            </remarks>
        </member>
        <member name="T:Vanara.PInvoke.DbgHelp.PREAD_PROCESS_MEMORY_ROUTINE">
            <summary>
            <para>
            An application-defined callback function used with the StackWalk64 function. It is called when <c>StackWalk64</c> needs to read
            memory from the address space of the process.
            </para>
            <para>
            The <c>PREAD_PROCESS_MEMORY_ROUTINE64</c> type defines a pointer to this callback function. <c>ReadProcessMemoryProc64</c> is a
            placeholder for the application-defined function name.
            </para>
            </summary>
            <param name="hProcess">A handle to the process for which the stack trace is generated.</param>
            <param name="lpBaseAddress">The base address of the memory to be read.</param>
            <param name="lpBuffer">A pointer to a buffer that receives the memory to be read.</param>
            <param name="nSize">The size of the memory to be read, in bytes.</param>
            <param name="lpNumberOfBytesRead">A pointer to a variable that receives the number of bytes actually read.</param>
            <returns>
            If the function succeeds, the return value should be <c>TRUE</c>. If the function fails, the return value should be <c>FALSE</c>.
            </returns>
            <remarks>
            <para>In many cases, this function can best service the callback with a corresponding call to ReadProcessMemory.</para>
            <para>
            This function should read as much of the requested memory as possible. The StackWalk64 function handles the case where only part
            of the requested memory is read.
            </para>
            <para>
            This callback function supersedes the PREAD_PROCESS_MEMORY_ROUTINE callback function. PREAD_PROCESS_MEMORY_ROUTINE is defined as
            follows in Dbghelp.h.
            </para>
            <para>
            <code>#if !defined(_IMAGEHLP_SOURCE_) &amp;&amp; defined(_IMAGEHLP64) #define PREAD_PROCESS_MEMORY_ROUTINE PREAD_PROCESS_MEMORY_ROUTINE64 #else typedef BOOL (__stdcall *PREAD_PROCESS_MEMORY_ROUTINE)( __in HANDLE hProcess, __in DWORD lpBaseAddress, __out_bcount(nSize) PVOID lpBuffer, __in DWORD nSize, __out PDWORD lpNumberOfBytesRead ); #endif</code>
            </para>
            </remarks>
        </member>
        <member name="T:Vanara.PInvoke.DbgHelp.PREAD_PROCESS_MEMORY_ROUTINE64">
            <summary>
            <para>
            An application-defined callback function used with the StackWalk64 function. It is called when <c>StackWalk64</c> needs to read
            memory from the address space of the process.
            </para>
            <para>
            The <c>PREAD_PROCESS_MEMORY_ROUTINE64</c> type defines a pointer to this callback function. <c>ReadProcessMemoryProc64</c> is a
            placeholder for the application-defined function name.
            </para>
            </summary>
            <param name="hProcess">A handle to the process for which the stack trace is generated.</param>
            <param name="lpBaseAddress">The base address of the memory to be read.</param>
            <param name="lpBuffer">A pointer to a buffer that receives the memory to be read.</param>
            <param name="nSize">The size of the memory to be read, in bytes.</param>
            <param name="lpNumberOfBytesRead">A pointer to a variable that receives the number of bytes actually read.</param>
            <returns>
            If the function succeeds, the return value should be <c>TRUE</c>. If the function fails, the return value should be <c>FALSE</c>.
            </returns>
            <remarks>
            <para>In many cases, this function can best service the callback with a corresponding call to ReadProcessMemory.</para>
            <para>
            This function should read as much of the requested memory as possible. The StackWalk64 function handles the case where only part
            of the requested memory is read.
            </para>
            <para>
            This callback function supersedes the PREAD_PROCESS_MEMORY_ROUTINE callback function. PREAD_PROCESS_MEMORY_ROUTINE is defined as
            follows in Dbghelp.h.
            </para>
            <para>
            <code>#if !defined(_IMAGEHLP_SOURCE_) &amp;&amp; defined(_IMAGEHLP64) #define PREAD_PROCESS_MEMORY_ROUTINE PREAD_PROCESS_MEMORY_ROUTINE64 #else typedef BOOL (__stdcall *PREAD_PROCESS_MEMORY_ROUTINE)( __in HANDLE hProcess, __in DWORD lpBaseAddress, __out_bcount(nSize) PVOID lpBuffer, __in DWORD nSize, __out PDWORD lpNumberOfBytesRead ); #endif</code>
            </para>
            </remarks>
        </member>
        <member name="T:Vanara.PInvoke.DbgHelp.PSYM_ENUMMODULES_CALLBACK">
            <summary>
            <para>
            An application-defined callback function used with the SymEnumerateModules64 function. It is called once for each enumerated
            module, and receives the module information.
            </para>
            <para>
            The <c>PSYM_ENUMMODULES_CALLBACK64</c> and <c>PSYM_ENUMMODULES_CALLBACKW64</c> types define a pointer to this callback function.
            <c>SymEnumerateModulesProc64</c> is a placeholder for the application-defined function name.
            </para>
            </summary>
            <param name="ModuleName">The name of the module.</param>
            <param name="BaseOfDll">The base address where the module is loaded into memory.</param>
            <param name="UserContext">
            The user-defined value specified in SymEnumerateModules64, or <c>NULL</c>. Typically, this parameter is used by an application
            to pass a pointer to a data structure that lets the callback function establish some type of context.
            </param>
            <returns>
            <para>If the return value is <c>TRUE</c>, the enumeration will continue.</para>
            <para>If the return value is <c>FALSE</c>, the enumeration will stop.</para>
            </returns>
            <remarks>
            <para>
            The calling application is called once per module until all modules are enumerated, or until the enumeration callback function
            returns <c>FALSE</c>.
            </para>
            <para>
            This callback function supersedes the PSYM_ENUMMODULES_CALLBACK callback function. PSYM_ENUMMODULES_CALLBACK is defined as
            follows in DbgHelp.h.
            </para>
            <para>
            <code>#if !defined(_IMAGEHLP_SOURCE_) &amp;&amp; defined(_IMAGEHLP64) #define PSYM_ENUMMODULES_CALLBACK PSYM_ENUMMODULES_CALLBACK64 #else typedef BOOL (CALLBACK *PSYM_ENUMMODULES_CALLBACK)( __in PCSTR ModuleName, __in ULONG BaseOfDll, __in_opt PVOID UserContext ); #endif</code>
            </para>
            </remarks>
        </member>
        <member name="T:Vanara.PInvoke.DbgHelp.PSYM_ENUMMODULES_CALLBACK64">
            <summary>
            <para>
            An application-defined callback function used with the SymEnumerateModules64 function. It is called once for each enumerated
            module, and receives the module information.
            </para>
            <para>
            The <c>PSYM_ENUMMODULES_CALLBACK64</c> and <c>PSYM_ENUMMODULES_CALLBACKW64</c> types define a pointer to this callback function.
            <c>SymEnumerateModulesProc64</c> is a placeholder for the application-defined function name.
            </para>
            </summary>
            <param name="ModuleName">The name of the module.</param>
            <param name="BaseOfDll">The base address where the module is loaded into memory.</param>
            <param name="UserContext">
            The user-defined value specified in SymEnumerateModules64, or <c>NULL</c>. Typically, this parameter is used by an application
            to pass a pointer to a data structure that lets the callback function establish some type of context.
            </param>
            <returns>
            <para>If the return value is <c>TRUE</c>, the enumeration will continue.</para>
            <para>If the return value is <c>FALSE</c>, the enumeration will stop.</para>
            </returns>
            <remarks>
            <para>
            The calling application is called once per module until all modules are enumerated, or until the enumeration callback function
            returns <c>FALSE</c>.
            </para>
            <para>
            This callback function supersedes the PSYM_ENUMMODULES_CALLBACK callback function. PSYM_ENUMMODULES_CALLBACK is defined as
            follows in DbgHelp.h.
            </para>
            <para>
            <code>#if !defined(_IMAGEHLP_SOURCE_) &amp;&amp; defined(_IMAGEHLP64) #define PSYM_ENUMMODULES_CALLBACK PSYM_ENUMMODULES_CALLBACK64 #else typedef BOOL (CALLBACK *PSYM_ENUMMODULES_CALLBACK)( __in PCSTR ModuleName, __in ULONG BaseOfDll, __in_opt PVOID UserContext ); #endif</code>
            </para>
            </remarks>
        </member>
        <member name="T:Vanara.PInvoke.DbgHelp.PTRANSLATE_ADDRESS_ROUTINE64">
            <summary>
            <para>
            An application-defined callback function used with the StackWalk64 function. It provides address translation for 16-bit addresses.
            </para>
            <para>
            The <c>PTRANSLATE_ADDRESS_ROUTINE64</c> type defines a pointer to this callback function. <c>TranslateAddressProc64</c> is a
            placeholder for the application-defined function name.
            </para>
            </summary>
            <param name="hProcess">A handle to the process for which the stack trace is generated.</param>
            <param name="hThread">A handle to the thread for which the stack trace is generated.</param>
            <param name="lpaddr">An address to be translated.</param>
            <returns>The function returns the translated address.</returns>
            <remarks>
            <para>
            This callback function supersedes the PTRANSLATE_ADDRESS_ROUTINE callback function. PTRANSLATE_ADDRESS_ROUTINE is defined as
            follows in Dbghelp.h.
            </para>
            <para>
            <code>#if !defined(_IMAGEHLP_SOURCE_) &amp;&amp; defined(_IMAGEHLP64) #define PTRANSLATE_ADDRESS_ROUTINE PTRANSLATE_ADDRESS_ROUTINE64 #else typedef DWORD (__stdcall *PTRANSLATE_ADDRESS_ROUTINE)( __in HANDLE hProcess, __in HANDLE hThread, __out LPADDRESS lpaddr ); #endif</code>
            </para>
            </remarks>
        </member>
        <member name="T:Vanara.PInvoke.DbgHelp.PTRANSLATE_ADDRESS_ROUTINE">
            <summary>
            <para>
            An application-defined callback function used with the StackWalk64 function. It provides address translation for 16-bit addresses.
            </para>
            <para>
            The <c>PTRANSLATE_ADDRESS_ROUTINE64</c> type defines a pointer to this callback function. <c>TranslateAddressProc64</c> is a
            placeholder for the application-defined function name.
            </para>
            </summary>
            <param name="hProcess">A handle to the process for which the stack trace is generated.</param>
            <param name="hThread">A handle to the thread for which the stack trace is generated.</param>
            <param name="lpaddr">An address to be translated.</param>
            <returns>The function returns the translated address.</returns>
            <remarks>
            <para>
            This callback function supersedes the PTRANSLATE_ADDRESS_ROUTINE callback function. PTRANSLATE_ADDRESS_ROUTINE is defined as
            follows in Dbghelp.h.
            </para>
            <para>
            <code>#if !defined(_IMAGEHLP_SOURCE_) &amp;&amp; defined(_IMAGEHLP64) #define PTRANSLATE_ADDRESS_ROUTINE PTRANSLATE_ADDRESS_ROUTINE64 #else typedef DWORD (__stdcall *PTRANSLATE_ADDRESS_ROUTINE)( __in HANDLE hProcess, __in HANDLE hThread, __out LPADDRESS lpaddr ); #endif</code>
            </para>
            </remarks>
        </member>
        <member name="T:Vanara.PInvoke.DbgHelp.ADDRESS_MODE">
            <summary>The addressing mode.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.ADDRESS_MODE.AddrMode1616">
            <summary>16:16 addressing. To support this addressing mode, you must supply a TranslateAddressProc64 callback function.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.ADDRESS_MODE.AddrMode1632">
            <summary>16:32 addressing. To support this addressing mode, you must supply a TranslateAddressProc64 callback function.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.ADDRESS_MODE.AddrModeReal">
            <summary>Real-mode addressing. To support this addressing mode, you must supply a TranslateAddressProc64 callback function.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.ADDRESS_MODE.AddrModeFlat">
            <summary>Flat addressing. This is the only addressing mode supported by the library.</summary>
        </member>
        <member name="T:Vanara.PInvoke.DbgHelp.EVENT_SEVERITY">
            <summary>The event severity.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.EVENT_SEVERITY.sevInfo">
            <summary>Informational event.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.EVENT_SEVERITY.sevProblem">
            <summary>Reserved for future use.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.EVENT_SEVERITY.sevAttn">
            <summary>Reserved for future use.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.EVENT_SEVERITY.sevFatal">
            <summary>Reserved for future use.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.EVENT_SEVERITY.sevMax">
            <summary>Unused</summary>
        </member>
        <member name="T:Vanara.PInvoke.DbgHelp.FRAME">
            <summary>A variable that indicates the frame type.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.FRAME.FRAME_FPO">
            <summary>FPO frame</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.FRAME.FRAME_TRAP">
            <summary>Trap frame</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.FRAME.FRAME_TSS">
            <summary>TSS frame</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.FRAME.FRAME_NONFPO">
            <summary>Non-FPO frame</summary>
        </member>
        <member name="T:Vanara.PInvoke.DbgHelp.IMAGEHLP_EXTENDED_OPTIONS">
            <summary>
            Lists the extended symbol options that you can get and set by using the SymGetExtendedOption and SymSetExtendedOption functions.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGEHLP_EXTENDED_OPTIONS.SYMOPT_EX_DISABLEACCESSTIMEUPDATE">
            <summary>
            Turns off explicit updates to the last access time of a symbol that is loaded. By default, DbgHelp updates the last access
            time of a symbol file that is consumed so that a symbol cache can be maintained by using a least recently used mechanism.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGEHLP_EXTENDED_OPTIONS.SYMOPT_EX_MAX">
            <summary>Unused.</summary>
        </member>
        <member name="T:Vanara.PInvoke.DbgHelp.IMAGEHLP_SYMBOL_TYPE_INFO">
            <summary>Identifies the type of symbol information to be retrieved.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGEHLP_SYMBOL_TYPE_INFO.TI_GET_SYMTAG">
            <summary>The symbol tag.The data type is DWORD*.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGEHLP_SYMBOL_TYPE_INFO.TI_GET_SYMNAME">
            <summary>The symbol name.The data type is WCHAR**. The caller must free the buffer.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGEHLP_SYMBOL_TYPE_INFO.TI_GET_LENGTH">
            <summary>The length of the type.The data type is ULONG64*.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGEHLP_SYMBOL_TYPE_INFO.TI_GET_TYPE">
            <summary>The type.The data type is DWORD*.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGEHLP_SYMBOL_TYPE_INFO.TI_GET_TYPEID">
            <summary>The type index.The data type is DWORD*.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGEHLP_SYMBOL_TYPE_INFO.TI_GET_BASETYPE">
            <summary>The base type for the type index.The data type is DWORD*.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGEHLP_SYMBOL_TYPE_INFO.TI_GET_ARRAYINDEXTYPEID">
            <summary>The type index for index of an array type.The data type is DWORD*.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGEHLP_SYMBOL_TYPE_INFO.TI_FINDCHILDREN">
            <summary>
            The type index of all children.The data type is a pointer to a TI_FINDCHILDREN_PARAMS structure. The Count member should be
            initialized with the number of children.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGEHLP_SYMBOL_TYPE_INFO.TI_GET_DATAKIND">
            <summary>The data kind.The data type is DWORD*.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGEHLP_SYMBOL_TYPE_INFO.TI_GET_ADDRESSOFFSET">
            <summary>The address offset.The data type is DWORD*.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGEHLP_SYMBOL_TYPE_INFO.TI_GET_OFFSET">
            <summary>
            The offset of the type in the parent. Members can use this to get their offset in a structure.The data type is DWORD*.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGEHLP_SYMBOL_TYPE_INFO.TI_GET_VALUE">
            <summary>The value of a constant or enumeration value.The data type is VARIANT*.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGEHLP_SYMBOL_TYPE_INFO.TI_GET_COUNT">
            <summary>The count of array elements.The data type is DWORD*.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGEHLP_SYMBOL_TYPE_INFO.TI_GET_CHILDRENCOUNT">
            <summary>The number of children.The data type is DWORD*.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGEHLP_SYMBOL_TYPE_INFO.TI_GET_BITPOSITION">
            <summary>The bit position of a bitfield.The data type is DWORD*.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGEHLP_SYMBOL_TYPE_INFO.TI_GET_VIRTUALBASECLASS">
            <summary>A value that indicates whether the base class is virtually inherited.The data type is BOOL.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGEHLP_SYMBOL_TYPE_INFO.TI_GET_VIRTUALTABLESHAPEID">
            <summary>The symbol interface of the type of virtual table, for a user-defined type.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGEHLP_SYMBOL_TYPE_INFO.TI_GET_VIRTUALBASEPOINTEROFFSET">
            <summary>The offset of the virtual base pointer.The data type is DWORD*.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGEHLP_SYMBOL_TYPE_INFO.TI_GET_CLASSPARENTID">
            <summary>The type index of the class parent.The data type is DWORD*.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGEHLP_SYMBOL_TYPE_INFO.TI_GET_NESTED">
            <summary>A value that indicates whether the type index is nested.The data type is DWORD*.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGEHLP_SYMBOL_TYPE_INFO.TI_GET_SYMINDEX">
            <summary>The symbol index for a type.The data type is DWORD*.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGEHLP_SYMBOL_TYPE_INFO.TI_GET_LEXICALPARENT">
            <summary>The lexical parent of the type.The data type is DWORD*.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGEHLP_SYMBOL_TYPE_INFO.TI_GET_ADDRESS">
            <summary>The index address.The data type is ULONG64*.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGEHLP_SYMBOL_TYPE_INFO.TI_GET_THISADJUST">
            <summary>The offset from the this pointer to its actual value.The data type is DWORD*.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGEHLP_SYMBOL_TYPE_INFO.TI_GET_UDTKIND">
            <summary>The UDT kind.The data type is DWORD*.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGEHLP_SYMBOL_TYPE_INFO.TI_IS_EQUIV_TO">
            <summary>
            The equivalency of two types.The data type is DWORD*. The value is S_OK is the two types are equivalent, and S_FALSE otherwise.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGEHLP_SYMBOL_TYPE_INFO.TI_GET_CALLING_CONVENTION">
            <summary>The calling convention.The data type is DWORD. The following are the valid values:</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGEHLP_SYMBOL_TYPE_INFO.TI_IS_CLOSE_EQUIV_TO">
            <summary>
            The equivalency of two symbols. This is not guaranteed to be accurate.The data type is DWORD*. The value is S_OK is the two
            types are equivalent, and S_FALSE otherwise.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGEHLP_SYMBOL_TYPE_INFO.TI_GTIEX_REQS_VALID">
            <summary>
            The element where the valid request bitfield should be stored.The data type is ULONG64*.This value is only used with the
            SymGetTypeInfoEx function.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGEHLP_SYMBOL_TYPE_INFO.TI_GET_VIRTUALBASEOFFSET">
            <summary>The offset in the virtual function table of a virtual function.The data type is DWORD.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGEHLP_SYMBOL_TYPE_INFO.TI_GET_VIRTUALBASEDISPINDEX">
            <summary>The index into the virtual base displacement table.The data type is DWORD.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGEHLP_SYMBOL_TYPE_INFO.TI_GET_IS_REFERENCE">
            <summary>Indicates whether a pointer type is a reference.The data type is Boolean.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGEHLP_SYMBOL_TYPE_INFO.TI_GET_INDIRECTVIRTUALBASECLASS">
            <summary>
            Indicates whether the user-defined data type is an indirect virtual base.The data type is BOOL.DbgHelp 6.6 and earlier: This
            value is not supported.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGEHLP_SYMBOL_TYPE_INFO.TI_GET_VIRTUALBASETABLETYPE">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGEHLP_SYMBOL_TYPE_INFO.IMAGEHLP_SYMBOL_TYPE_INFO_MAX">
            <summary/>
        </member>
        <member name="T:Vanara.PInvoke.DbgHelp.SYM_INLINE_COMP">
            <summary>Indicates the result of the comparison.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.SYM_INLINE_COMP.SYM_INLINE_COMP_ERROR">
            <summary>An error occurred.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.SYM_INLINE_COMP.SYM_INLINE_COMP_IDENTICAL">
            <summary>The inline contexts are identical.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.SYM_INLINE_COMP.SYM_INLINE_COMP_STEPIN">
            <summary>The inline trace is a step-in of an inline function.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.SYM_INLINE_COMP.SYM_INLINE_COMP_STEPOUT">
            <summary>The inline trace is a step-out of an inline function.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.SYM_INLINE_COMP.SYM_INLINE_COMP_STEPOVER">
            <summary>The inline trace is a step-over of an inline function.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.SYM_INLINE_COMP.SYM_INLINE_COMP_DIFFERENT">
            <summary>The inline contexts are different.</summary>
        </member>
        <member name="T:Vanara.PInvoke.DbgHelp.SYM_STKWALK">
            <summary>Flags for <see cref="M:Vanara.PInvoke.DbgHelp.StackWalkEx(Vanara.PInvoke.DbgHelp.IMAGE_FILE_MACHINE,Vanara.PInvoke.HPROCESS,Vanara.PInvoke.HTHREAD,Vanara.PInvoke.DbgHelp.STACKFRAME_EX@,System.IntPtr,Vanara.PInvoke.DbgHelp.PREAD_PROCESS_MEMORY_ROUTINE64,Vanara.PInvoke.DbgHelp.PFUNCTION_TABLE_ACCESS_ROUTINE64,Vanara.PInvoke.DbgHelp.PGET_MODULE_BASE_ROUTINE64,Vanara.PInvoke.DbgHelp.PTRANSLATE_ADDRESS_ROUTINE64,Vanara.PInvoke.DbgHelp.SYM_STKWALK)"/>.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.SYM_STKWALK.SYM_STKWALK_DEFAULT">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.SYM_STKWALK.SYM_STKWALK_FORCE_FRAMEPTR">
            <summary/>
        </member>
        <member name="T:Vanara.PInvoke.DbgHelp.UNDNAME">
            <summary>The options for how the decorated name is undecorated.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.UNDNAME.UNDNAME_32_BIT_DECODE">
            <summary>Undecorate 32-bit decorated names.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.UNDNAME.UNDNAME_COMPLETE">
            <summary>Enable full undecoration.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.UNDNAME.UNDNAME_NAME_ONLY">
            <summary>Undecorate only the name for primary declaration. Returns [scope::]name. Does expand template parameters.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.UNDNAME.UNDNAME_NO_ACCESS_SPECIFIERS">
            <summary>Disable expansion of access specifiers for members.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.UNDNAME.UNDNAME_NO_ALLOCATION_LANGUAGE">
            <summary>Disable expansion of the declaration language specifier.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.UNDNAME.UNDNAME_NO_ALLOCATION_MODEL">
            <summary>Disable expansion of the declaration model.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.UNDNAME.UNDNAME_NO_ARGUMENTS">
            <summary>Do not undecorate function arguments.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.UNDNAME.UNDNAME_NO_CV_THISTYPE">
            <summary>Disable expansion of CodeView modifiers on the this type for primary declaration.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.UNDNAME.UNDNAME_NO_FUNCTION_RETURNS">
            <summary>Disable expansion of return types for primary declarations.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.UNDNAME.UNDNAME_NO_LEADING_UNDERSCORES">
            <summary>Remove leading underscores from Microsoft keywords.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.UNDNAME.UNDNAME_NO_MEMBER_TYPE">
            <summary>Disable expansion of the static or virtual attribute of members.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.UNDNAME.UNDNAME_NO_MS_KEYWORDS">
            <summary>Disable expansion of Microsoft keywords.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.UNDNAME.UNDNAME_NO_MS_THISTYPE">
            <summary>Disable expansion of Microsoft keywords on the this type for primary declaration.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.UNDNAME.UNDNAME_NO_RETURN_UDT_MODEL">
            <summary>Disable expansion of the Microsoft model for user-defined type returns.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.UNDNAME.UNDNAME_NO_SPECIAL_SYMS">
            <summary>Do not undecorate special names, such as vtable, vcall, vector, metatype, and so on.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.UNDNAME.UNDNAME_NO_THISTYPE">
            <summary>Disable all modifiers on the this type.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.UNDNAME.UNDNAME_NO_THROW_SIGNATURES">
            <summary>Disable expansion of throw-signatures for functions and pointers to functions.</summary>
        </member>
        <member name="M:Vanara.PInvoke.DbgHelp.EnumDirTree(Vanara.PInvoke.HPROCESS,System.String,System.String,System.Text.StringBuilder,Vanara.PInvoke.DbgHelp.PENUMDIRTREE_CALLBACK,System.IntPtr)">
            <summary>Enumerates all occurrences of the specified file in the specified directory tree.</summary>
            <param name="hProcess">A handle to a process. This handle must have been previously passed to the SymInitialize function.</param>
            <param name="RootPath">The path where the function should begin searching for the file.</param>
            <param name="InputPathName">The name of the file to be found. You can specify a partial path.</param>
            <param name="OutputPathBuffer">
            <para>
            A pointer to a buffer that receives the full path of the file. If the function fails or does not find a matching file, this
            buffer will still contain the last full path that was found.
            </para>
            <para>This parameter is optional and can be <c>NULL</c>.</para>
            </param>
            <param name="cb">An application-defined callback function, or <c>NULL</c>. For more information, see EnumDirTreeProc.</param>
            <param name="data">The user-defined data or <c>NULL</c>. This value is passed to the callback function.</param>
            <returns>
            <para>If the function succeeds, the return value is <c>TRUE</c>.</para>
            <para>If the function fails, the return value is <c>FALSE</c>. To retrieve extended error information, call GetLastError.</para>
            </returns>
            <remarks>
            <para>
            The search can be canceled if you register a SymRegisterCallbackProc64 callback function. For every file operation, EnumDirTree
            calls this callback function with CBA_DEFERRED_SYMBOL_LOAD_CANCEL. If the callback function returns <c>TRUE</c>, EnumDirTree
            cancels the search.
            </para>
            <para>
            All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will
            likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more
            than one thread to this function.
            </para>
            <para>To call the Unicode version of this function, define DBGHELP_TRANSLATE_TCHAR.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.DbgHelp.EnumDirTree(Vanara.PInvoke.HPROCESS,System.String,System.String)">
            <summary>Enumerates all occurrences of the specified file in the specified directory tree.</summary>
            <param name="hProcess">A handle to a process. This handle must have been previously passed to the SymInitialize function.</param>
            <param name="RootPath">The path where the function should begin searching for the file.</param>
            <param name="InputPathName">The name of the file to be found. You can specify a partial path.</param>
            <returns>A list of files matching the <paramref name="InputPathName"/>.</returns>
        </member>
        <member name="M:Vanara.PInvoke.DbgHelp.EnumerateLoadedModules(Vanara.PInvoke.HPROCESS,Vanara.PInvoke.DbgHelp.PENUMLOADED_MODULES_CALLBACK,System.IntPtr)">
            <summary>Enumerates the loaded modules for the specified process.</summary>
            <param name="hProcess">A handle to the process whose modules will be enumerated.</param>
            <param name="EnumLoadedModulesCallback">An application-defined callback function. For more information, see EnumerateLoadedModulesProc64.</param>
            <param name="UserContext">Optional user-defined data. This value is passed to the callback function.</param>
            <returns>
            <para>If the function succeeds, the return value is <c>TRUE</c>.</para>
            <para>If the function fails, the return value is <c>FALSE</c>. To retrieve extended error information, call GetLastError.</para>
            </returns>
            <remarks>
            <para>
            All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will
            likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more
            than one thread to this function.
            </para>
            <para>
            To call the Unicode version of this function, EnumerateLoadedModulesW64, define <c>DBGHELP_TRANSLATE_TCHAR</c>.
            EnumerateLoadedModulesW64 is defined as follows in DbgHelp.h.
            </para>
            <para>
            <code>BOOL IMAGEAPI EnumerateLoadedModulesW64( __in HANDLE hProcess, __in PENUMLOADED_MODULES_CALLBACKW64 EnumLoadedModulesCallback, __in PVOID UserContext ); #ifdef DBGHELP_TRANSLATE_TCHAR #define EnumerateLoadedModules64 EnumerateLoadedModulesW64 #endif</code>
            </para>
            <para>
            This function supersedes the EnumerateLoadedModules function. For more information, see Updated Platform Support.
            EnumerateLoadedModules is defined as follows in DbgHelp.h.
            </para>
            <para>
            <code>#if !defined(_IMAGEHLP_SOURCE_) &amp;&amp; defined(_IMAGEHLP64) #define EnumerateLoadedModules EnumerateLoadedModules64 #else BOOL IMAGEAPI EnumerateLoadedModules( __in HANDLE hProcess, __in PENUMLOADED_MODULES_CALLBACK EnumLoadedModulesCallback, __in_opt PVOID UserContext ); #endif</code>
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.DbgHelp.EnumerateLoadedModules64(Vanara.PInvoke.HPROCESS,Vanara.PInvoke.DbgHelp.PENUMLOADED_MODULES_CALLBACKW64,System.IntPtr)">
            <summary>Enumerates the loaded modules for the specified process.</summary>
            <param name="hProcess">A handle to the process whose modules will be enumerated.</param>
            <param name="EnumLoadedModulesCallback">An application-defined callback function. For more information, see EnumerateLoadedModulesProc64.</param>
            <param name="UserContext">Optional user-defined data. This value is passed to the callback function.</param>
            <returns>
            <para>If the function succeeds, the return value is <c>TRUE</c>.</para>
            <para>If the function fails, the return value is <c>FALSE</c>. To retrieve extended error information, call GetLastError.</para>
            </returns>
            <remarks>
            <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more than one thread to this function.</para>
            <para>To call the Unicode version of this function, EnumerateLoadedModulesW64, define <c>DBGHELP_TRANSLATE_TCHAR</c>. EnumerateLoadedModulesW64 is defined as follows in DbgHelp.h.</para>
            <para><code>BOOL IMAGEAPI EnumerateLoadedModulesW64( __in HANDLE hProcess, __in PENUMLOADED_MODULES_CALLBACKW64 EnumLoadedModulesCallback, __in PVOID UserContext ); #ifdef DBGHELP_TRANSLATE_TCHAR #define EnumerateLoadedModules64 EnumerateLoadedModulesW64 #endif </code></para>
            <para>This function supersedes the EnumerateLoadedModules function. For more information, see Updated Platform Support. EnumerateLoadedModules is defined as follows in DbgHelp.h.</para>
            <para><code>#if !defined(_IMAGEHLP_SOURCE_) &amp;&amp; defined(_IMAGEHLP64) #define EnumerateLoadedModules EnumerateLoadedModules64 #else BOOL IMAGEAPI EnumerateLoadedModules( __in HANDLE hProcess, __in PENUMLOADED_MODULES_CALLBACK EnumLoadedModulesCallback, __in_opt PVOID UserContext ); #endif </code></para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.DbgHelp.EnumerateLoadedModules(Vanara.PInvoke.HPROCESS)">
            <summary>
            Enumerates the loaded modules for the specified process. This overload will call the 32 or 64-bit version of the function based
            on the calling process.
            </summary>
            <param name="hProcess">A handle to the process whose modules will be enumerated.</param>
            <returns>A list of all loaded module names, base addresses, and sizes.</returns>
        </member>
        <member name="M:Vanara.PInvoke.DbgHelp.EnumerateLoadedModulesEx(Vanara.PInvoke.HPROCESS,Vanara.PInvoke.DbgHelp.PENUMLOADED_MODULES_CALLBACKW64,System.IntPtr)">
            <summary>Enumerates the loaded modules for the specified process.</summary>
            <param name="hProcess">A handle to the process whose modules will be enumerated.</param>
            <param name="EnumLoadedModulesCallback">An application-defined callback function. For more information, see EnumerateLoadedModulesProc64.</param>
            <param name="UserContext">Optional user-defined data. This value is passed to the callback function.</param>
            <returns>
            <para>If the function succeeds, the return value is <c>TRUE</c>.</para>
            <para>If the function fails, the return value is <c>FALSE</c>. To retrieve extended error information, call GetLastError.</para>
            </returns>
            <remarks>
            <para>
            All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will
            likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more
            than one thread to this function.
            </para>
            <para>To call the Unicode version of this function, define DBGHELP_TRANSLATE_TCHAR.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.DbgHelp.EnumerateLoadedModulesEx(Vanara.PInvoke.HPROCESS)">
            <summary>Enumerates the loaded modules for the specified process.</summary>
            <param name="hProcess">A handle to the process whose modules will be enumerated.</param>
            <returns>A list of all loaded module names, base addresses, and sizes.</returns>
        </member>
        <member name="M:Vanara.PInvoke.DbgHelp.FindDebugInfoFile(System.String,System.String,System.Text.StringBuilder)">
            <summary>
            <para>Locates a debug (.dbg) file.</para>
            <para>To provide a callback function to verify the symbol file located, use the FindDebugInfoFileEx function.</para>
            </summary>
            <param name="FileName">The name of the .dbg file that is desired. You can use a partial path.</param>
            <param name="SymbolPath">
            The path where symbol files are located. This can be multiple paths separated by semicolons. To retrieve the symbol path, use
            the SymGetSearchPath function.
            </param>
            <param name="DebugFilePath">A pointer to a buffer that receives the full path of the .dbg file.</param>
            <returns>
            <para>If the function succeeds, the return value is an open handle to the .dbg file.</para>
            <para>If the function fails, the return value is <c>NULL</c>. To retrieve extended error information, call GetLastError.</para>
            </returns>
            <remarks>
            <para>
            The <c>FindDebugInfoFile</c> function is used to locate a .dbg file. This function is provided so the search can be conducted in
            several different directories through a single function call. The SymbolPath parameter can contain multiple paths, with each
            separated by a semicolon (;). When multiple paths are specified, the function searches each directory for the file.
            Subdirectories are not searched. When the file is located, the search stops. Thus, be sure to specify SymbolPath with the paths
            in the correct order.
            </para>
            <para>
            All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will
            likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more
            than one thread to this function.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.DbgHelp.FindDebugInfoFileEx(System.String,System.String,System.Text.StringBuilder,Vanara.PInvoke.DbgHelp.PFIND_DEBUG_FILE_CALLBACK,System.IntPtr)">
            <summary>Locates the specified debug (.dbg) file.</summary>
            <param name="FileName">The name of the .dbg file to locate. You can use a partial path.</param>
            <param name="SymbolPath">
            The path where symbol files are located. This can be multiple paths separated by semicolons. To retrieve the symbol path, use
            the SymGetSearchPath function.
            </param>
            <param name="DebugFilePath">A pointer to a buffer that receives the full path of the .dbg file.</param>
            <param name="Callback">
            <para>
            An application-defined callback function that verifies whether the correct file was found or the function should continue its
            search. For more information, see FindDebugInfoFileProc.
            </para>
            <para>This parameter may be <c>NULL</c>.</para>
            </param>
            <param name="CallerData">Optional user-defined data to pass to the callback function.</param>
            <returns>
            <para>If the function succeeds, the return value is an open handle to the .dbg file.</para>
            <para>If the function fails, the return value is <c>NULL</c>. To retrieve extended error information, call GetLastError.</para>
            </returns>
            <remarks>
            <para>
            The <c>FindDebugInfoFileEx</c> function is used to locate a .dbg file. This function is provided so the search can be conducted
            in several different directories through a single function call. The SymbolPath parameter can contain multiple paths, with each
            separated by a semicolon (;). When multiple paths are specified, the function searches each specified directory for the file.
            When the file is located, the search stops. Thus, be sure to specify SymbolPath with the paths in the correct order.
            </para>
            <para>
            If the file name specified does not include a .dbg extension, <c>FindDebugInfoFileEx</c> searches for the file in the following sequence:
            </para>
            <list type="number">
            <item>
            <term>SymbolPath\Symbols\ext\filename.dbg</term>
            </item>
            <item>
            <term>SymbolPath\ext\filename.dbg</term>
            </item>
            <item>
            <term>SymbolPath\filename.dbg</term>
            </item>
            <item>
            <term>FileNamePath\filename.dbg</term>
            </item>
            </list>
            <para>
            All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will
            likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more
            than one thread to this function.
            </para>
            <para>To call the Unicode version of this function, define DBGHELP_TRANSLATE_TCHAR.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.DbgHelp.FindExecutableImage(System.String,System.String,System.Text.StringBuilder)">
            <summary>
            <para>Locates an executable file.</para>
            <para>To specify a callback function, use the FindExecutableImageEx function.</para>
            </summary>
            <param name="FileName">The name of the symbol file to be located. This parameter can be a partial path.</param>
            <param name="SymbolPath">
            The path where symbol files are located. This can be multiple paths separated by semicolons. To retrieve the symbol path, use
            the SymGetSearchPath function.
            </param>
            <param name="ImageFilePath">A pointer to a buffer that receives the full path of the executable file.</param>
            <returns>
            <para>If the function succeeds, the return value is an open handle to the executable file.</para>
            <para>If the function fails, the return value is <c>NULL</c>. To retrieve extended error information, call GetLastError.</para>
            </returns>
            <remarks>
            <para>
            The <c>FindExecutableImage</c> function is provided so executable files can be located in several different directories through
            a single function call. The SymbolPath parameter can contain multiple paths, with each separated by a semicolon (;). When
            multiple paths are specified, the function searches each directory tree for the executable file. When the file is located, the
            search stops. Thus, be sure to specify SymbolPath with the paths in the correct order.
            </para>
            <para>
            All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will
            likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more
            than one thread to this function.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.DbgHelp.FindExecutableImageEx(System.String,System.String,System.Text.StringBuilder,Vanara.PInvoke.DbgHelp.PFIND_EXE_FILE_CALLBACK,System.IntPtr)">
            <summary>Locates the specified executable file.</summary>
            <param name="FileName">The name of the symbol file to be located. This parameter can be a partial path.</param>
            <param name="SymbolPath">
            The path where symbol files are located. This string can contain multiple paths separated by semicolons. To retrieve the symbol
            path, use the SymGetSearchPath function.
            </param>
            <param name="ImageFilePath">A pointer to a buffer that receives the full path of the executable file.</param>
            <param name="Callback">
            <para>
            An application-defined callback function that verifies whether the correct executable file was found, or whether the function
            should continue its search. For more information, see FindExecutableImageProc.
            </para>
            <para>This parameter can be <c>NULL</c>.</para>
            </param>
            <param name="CallerData">Optional user-defined data for the callback function. This parameter can be <c>NULL</c>.</param>
            <returns>
            <para>If the function succeeds, the return value is an open handle to the executable file.</para>
            <para>If the function fails, the return value is <c>NULL</c>. To retrieve extended error information, call GetLastError.</para>
            </returns>
            <remarks>
            <para>
            The <c>FindExecutableImageEx</c> function is provided so executable files can be found in several different directories by using
            a single function call. If the SymbolPath parameter contains multiple paths, the function searches each specified directory tree
            for the executable file. When the file is found, the search stops. Thus, be sure to specify SymbolPath with the paths in the
            correct order.
            </para>
            <para>
            All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will
            likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more
            than one thread to this function.
            </para>
            <para>To call the Unicode version of this function, define DBGHELP_TRANSLATE_TCHAR.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.DbgHelp.FindExecutableImageEx(System.String,System.String[],System.Func{System.String,System.Boolean})">
            <summary>Locates the specified executable file.</summary>
            <param name="FileName">The name of the symbol file to be located. This parameter can be a partial path.</param>
            <param name="SymbolPaths">
            The paths where symbol files are located. To retrieve the symbol path, use the <see cref="M:Vanara.PInvoke.DbgHelp.SymGetSearchPath(Vanara.PInvoke.HPROCESS,System.Text.StringBuilder,System.UInt32)"/> function.
            </param>
            <param name="verifyFoundFile">
            <para>
            An application-defined callback function that verifies whether the correct executable file was found, or whether the function
            should continue its search.
            </para>
            <para>This parameter can be <see langword="null"/>.</para>
            </param>
            <returns>The full path of the executable file.</returns>
            <remarks>
            <para>
            The <c>FindExecutableImageEx</c> function is provided so executable files can be found in several different directories by using
            a single function call. If the <paramref name="SymbolPaths"/> parameter contains multiple paths, the function searches each
            specified directory tree for the executable file. When the file is found, the search stops. Thus, be sure to specify 
            <paramref name="SymbolPaths"/> with the paths in the correct order.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.DbgHelp.GetSymLoadError">
            <summary>Gets the last symbol load error.</summary>
            <returns>The last symbol load error.</returns>
        </member>
        <member name="M:Vanara.PInvoke.DbgHelp.GetTimestampForLoadedLibrary(Vanara.PInvoke.HINSTANCE)">
            <summary>Retrieves the time stamp of a loaded image.</summary>
            <param name="Module">The base address of an image that is mapped into memory by a call to the MapViewOfFile function.</param>
            <returns>
            <para>If the function succeeds, the return value is the time stamp from the image.</para>
            <para>If the function fails, the return value is zero. To retrieve extended error information, call GetLastError.</para>
            </returns>
            <remarks>
            <para>
            The time stamp for an image is initially set by the linker, but it can be modified by operations such as rebasing. The value is
            represented in the number of seconds elapsed since midnight (00:00:00), January 1, 1970, Universal Coordinated Time, according
            to the system clock. The time stamp can be printed using the C run-time (CRT) function ctime.
            </para>
            <para>
            All DbgHelp Functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will
            likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more
            than one thread to this function.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.DbgHelp.ImageDirectoryEntryToData(System.IntPtr,System.Boolean,Vanara.PInvoke.DbgHelp.IMAGE_DIRECTORY_ENTRY,System.UInt32@)">
            <summary>
            <para>Obtains access to image-specific data.</para>
            <para>
            This function has been superseded by the ImageDirectoryEntryToDataEx function. Use <c>ImageDirectoryEntryToDataEx</c> to
            retrieve the section header.
            </para>
            </summary>
            <param name="Base">The base address of the image.</param>
            <param name="MappedAsImage">
            If this parameter is <c>TRUE</c>, the file is mapped by the system as an image. If the flag is <c>FALSE</c>, the file is mapped
            as a data file by the MapViewOfFile function.
            </param>
            <param name="DirectoryEntry">
            <para>The index number of the desired directory entry. This parameter can be one of the following values.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>IMAGE_DIRECTORY_ENTRY_ARCHITECTURE 7</term>
            <term>Architecture-specific data</term>
            </item>
            <item>
            <term>IMAGE_DIRECTORY_ENTRY_BASERELOC 5</term>
            <term>Base relocation table</term>
            </item>
            <item>
            <term>IMAGE_DIRECTORY_ENTRY_BOUND_IMPORT 11</term>
            <term>Bound import directory</term>
            </item>
            <item>
            <term>IMAGE_DIRECTORY_ENTRY_COM_DESCRIPTOR 14</term>
            <term>COM descriptor table</term>
            </item>
            <item>
            <term>IMAGE_DIRECTORY_ENTRY_DEBUG 6</term>
            <term>Debug directory</term>
            </item>
            <item>
            <term>IMAGE_DIRECTORY_ENTRY_DELAY_IMPORT 13</term>
            <term>Delay import table</term>
            </item>
            <item>
            <term>IMAGE_DIRECTORY_ENTRY_EXCEPTION 3</term>
            <term>Exception directory</term>
            </item>
            <item>
            <term>IMAGE_DIRECTORY_ENTRY_EXPORT 0</term>
            <term>Export directory</term>
            </item>
            <item>
            <term>IMAGE_DIRECTORY_ENTRY_GLOBALPTR 8</term>
            <term>The relative virtual address of global pointer</term>
            </item>
            <item>
            <term>IMAGE_DIRECTORY_ENTRY_IAT 12</term>
            <term>Import address table</term>
            </item>
            <item>
            <term>IMAGE_DIRECTORY_ENTRY_IMPORT 1</term>
            <term>Import directory</term>
            </item>
            <item>
            <term>IMAGE_DIRECTORY_ENTRY_LOAD_CONFIG 10</term>
            <term>Load configuration directory</term>
            </item>
            <item>
            <term>IMAGE_DIRECTORY_ENTRY_RESOURCE 2</term>
            <term>Resource directory</term>
            </item>
            <item>
            <term>IMAGE_DIRECTORY_ENTRY_SECURITY 4</term>
            <term>Security directory</term>
            </item>
            <item>
            <term>IMAGE_DIRECTORY_ENTRY_TLS 9</term>
            <term>Thread local storage directory</term>
            </item>
            </list>
            </param>
            <param name="Size">A pointer to a variable that receives the size of the data for the directory entry, in bytes.</param>
            <returns>
            <para>If the function succeeds, the return value is a pointer to the directory entry's data.</para>
            <para>If the function fails, the return value is <c>NULL</c>. To retrieve extended error information, call GetLastError.</para>
            </returns>
            <remarks>
            <para>The <c>ImageDirectoryEntryToData</c> function is used to obtain access to image-specific data.</para>
            <para>
            All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will
            likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more
            than one thread to this function.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.DbgHelp.ImageDirectoryEntryToDataEx(System.IntPtr,System.Boolean,Vanara.PInvoke.DbgHelp.IMAGE_DIRECTORY_ENTRY,System.UInt32@,System.IntPtr@)">
            <summary>
            Locates a directory entry within the image header and returns the address of the data for the directory entry. This function
            returns the section header for the data located, if one exists.
            </summary>
            <param name="Base">The base address of the image or data file.</param>
            <param name="MappedAsImage">
            If the flag is <c>TRUE</c>, the file is mapped by the system as an image. If this flag is <c>FALSE</c>, the file is mapped as a
            data file by the MapViewOfFile function.
            </param>
            <param name="DirectoryEntry">
            <para>The directory entry to be located. The value must be one of the following values.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>IMAGE_DIRECTORY_ENTRY_ARCHITECTURE 7</term>
            <term>Architecture-specific data</term>
            </item>
            <item>
            <term>IMAGE_DIRECTORY_ENTRY_BASERELOC 5</term>
            <term>Base relocation table</term>
            </item>
            <item>
            <term>IMAGE_DIRECTORY_ENTRY_BOUND_IMPORT 11</term>
            <term>Bound import directory</term>
            </item>
            <item>
            <term>IMAGE_DIRECTORY_ENTRY_COM_DESCRIPTOR 14</term>
            <term>COM descriptor table</term>
            </item>
            <item>
            <term>IMAGE_DIRECTORY_ENTRY_DEBUG 6</term>
            <term>Debug directory</term>
            </item>
            <item>
            <term>IMAGE_DIRECTORY_ENTRY_DELAY_IMPORT 13</term>
            <term>Delay import table</term>
            </item>
            <item>
            <term>IMAGE_DIRECTORY_ENTRY_EXCEPTION 3</term>
            <term>Exception directory</term>
            </item>
            <item>
            <term>IMAGE_DIRECTORY_ENTRY_EXPORT 0</term>
            <term>Export directory</term>
            </item>
            <item>
            <term>IMAGE_DIRECTORY_ENTRY_GLOBALPTR 8</term>
            <term>The relative virtual address of global pointer</term>
            </item>
            <item>
            <term>IMAGE_DIRECTORY_ENTRY_IAT 12</term>
            <term>Import address table</term>
            </item>
            <item>
            <term>IMAGE_DIRECTORY_ENTRY_IMPORT 1</term>
            <term>Import directory</term>
            </item>
            <item>
            <term>IMAGE_DIRECTORY_ENTRY_LOAD_CONFIG 10</term>
            <term>Load configuration directory</term>
            </item>
            <item>
            <term>IMAGE_DIRECTORY_ENTRY_RESOURCE 2</term>
            <term>Resource directory</term>
            </item>
            <item>
            <term>IMAGE_DIRECTORY_ENTRY_SECURITY 4</term>
            <term>Security directory</term>
            </item>
            <item>
            <term>IMAGE_DIRECTORY_ENTRY_TLS 9</term>
            <term>Thread local storage directory</term>
            </item>
            </list>
            </param>
            <param name="Size">A pointer to a variable that receives the size of the data for the directory entry that is located.</param>
            <param name="FoundHeader">
            A pointer to an IMAGE_SECTION_HEADER structure that receives the data. If the section header does not exist, this parameter is <c>NULL</c>.
            </param>
            <returns>
            <para>If the function succeeds, the return value is a pointer to the data for the directory entry.</para>
            <para>If the function fails, the return value is <c>NULL</c>. To retrieve extended error information, call GetLastError.</para>
            <para>
            All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will
            likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more
            than one thread to this function.
            </para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.DbgHelp.ImagehlpApiVersion">
            <summary>
            <para>Retrieves the version information of the DbgHelp library installed on the system.</para>
            <para>To indicate the version of the library with which the application was built, use the ImagehlpApiVersionEx function.</para>
            </summary>
            <returns>The return value is an API_VERSION structure.</returns>
            <remarks>
            <para>
            Use the information in the API_VERSION structure to determine whether the version of the library installed on the system is
            compatible with the version of the library used by the application. Although the library functions are backward compatible,
            functions introduced in one version are obviously not available in earlier versions.
            </para>
            <para>
            All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will
            likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more
            than one thread to this function.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.DbgHelp.ImagehlpApiVersionEx(Vanara.PInvoke.DbgHelp.API_VERSION@)">
            <summary>Modifies the version information of the library used by the application.</summary>
            <param name="AppVersion">A pointer to an API_VERSION structure that contains valid version information for your application.</param>
            <returns>The return value is an API_VERSION structure.</returns>
            <remarks>
            <para>
            Use the <c>ImagehlpApiVersionEx</c> function to indicate the version of the library with which the application was built. The
            library uses this information to ensure compatibility. For example, consider walking through kernel-mode callback stack frames
            (User and GDI exist in kernel mode). If you call <c>ImagehlpApiVersionEx</c> to set the <c>Revision</c> member to version 4 or
            later, the StackWalk64 function will continue through a callback stack frame. Otherwise, if you set <c>Revision</c> to a version
            earlier than 4, <c>StackWalk64</c> will stop at the kernel transition.
            </para>
            <para>
            All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will
            likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more
            than one thread to this function.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.DbgHelp.ImageNtHeader(System.IntPtr)">
            <summary>Locates the <see cref="T:Vanara.PInvoke.DbgHelp.IMAGE_NT_HEADERS"/> structure in a PE image and returns a pointer to the data.</summary>
            <param name="Base">The base address of an image that is mapped into memory by a call to the MapViewOfFile function.</param>
            <returns>
            <para>If the function succeeds, the return value is a pointer to an <see cref="T:Vanara.PInvoke.DbgHelp.IMAGE_NT_HEADERS"/> structure.</para>
            <para>If the function fails, the return value is <c>NULL</c>. To retrieve extended error information, call GetLastError.</para>
            </returns>
            <remarks>
            All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will
            likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more
            than one thread to this function.
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.DbgHelp.ImageRvaToSection(Vanara.PInvoke.DbgHelp.IMAGE_NT_HEADERS@,System.IntPtr,System.UInt32)">
            <summary>
            Locates a relative virtual address (RVA) within the image header of a file that is mapped as a file and returns a pointer to the
            section table entry for that RVA.
            </summary>
            <param name="NtHeaders">
            A pointer to an IMAGE_NT_HEADERS structure. This structure can be obtained by calling the ImageNtHeader function.
            </param>
            <param name="Base">This parameter is reserved.</param>
            <param name="Rva">The relative virtual address to be located.</param>
            <returns>
            <para>If the function succeeds, the return value is a pointer to an IMAGE_SECTION_HEADER structure.</para>
            <para>If the function fails, the return value is <c>NULL</c>. To retrieve extended error information, call GetLastError.</para>
            </returns>
            <remarks>
            All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will
            likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more
            than one thread to this function.
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.DbgHelp.ImageRvaToSection(System.IntPtr,System.IntPtr,System.UInt32)">
            <summary>
            Locates a relative virtual address (RVA) within the image header of a file that is mapped as a file and returns a pointer to the
            section table entry for that RVA.
            </summary>
            <param name="NtHeaders">
            A pointer to an IMAGE_NT_HEADERS structure. This structure can be obtained by calling the ImageNtHeader function.
            </param>
            <param name="Base">This parameter is reserved.</param>
            <param name="Rva">The relative virtual address to be located.</param>
            <returns>
            <para>If the function succeeds, the return value is a pointer to an IMAGE_SECTION_HEADER structure.</para>
            <para>If the function fails, the return value is <c>NULL</c>. To retrieve extended error information, call GetLastError.</para>
            </returns>
            <remarks>
            All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will
            likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more
            than one thread to this function.
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.DbgHelp.ImageRvaToVa(Vanara.PInvoke.DbgHelp.IMAGE_NT_HEADERS@,System.IntPtr,System.UInt32,System.IntPtr@)">
            <summary>
            Locates a relative virtual address (RVA) within the image header of a file that is mapped as a file and returns the virtual
            address of the corresponding byte in the file.
            </summary>
            <param name="NtHeaders">
            A pointer to an IMAGE_NT_HEADERS structure. This structure can be obtained by calling the ImageNtHeader function.
            </param>
            <param name="Base">The base address of an image that is mapped into memory through a call to the MapViewOfFile function.</param>
            <param name="Rva">The relative virtual address to be located.</param>
            <param name="LastRvaSection">
            A pointer to an IMAGE_SECTION_HEADER structure that specifies the last RVA section. This is an optional parameter. When
            specified, it points to a variable that contains the last section value used for the specified image to translate an RVA to a VA.
            </param>
            <returns>
            <para>If the function succeeds, the return value is the virtual address in the mapped file.</para>
            <para>If the function fails, the return value is <c>NULL</c>. To retrieve extended error information, call GetLastError.</para>
            </returns>
            <remarks>
            <para>
            The <c>ImageRvaToVa</c> function locates an RVA within the image header of a file that is mapped as a file and returns the
            virtual address of the corresponding byte in the file.
            </para>
            <para>
            All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will
            likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more
            than one thread to this function.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.DbgHelp.ImageRvaToVa(Vanara.PInvoke.DbgHelp.IMAGE_NT_HEADERS*,System.IntPtr,System.UInt32,Vanara.PInvoke.DbgHelp.IMAGE_SECTION_HEADER*@)">
            <summary>
            Locates a relative virtual address (RVA) within the image header of a file that is mapped as a file and returns the virtual
            address of the corresponding byte in the file.
            </summary>
            <param name="NtHeaders">
            A pointer to an IMAGE_NT_HEADERS structure. This structure can be obtained by calling the ImageNtHeader function.
            </param>
            <param name="Base">The base address of an image that is mapped into memory through a call to the MapViewOfFile function.</param>
            <param name="Rva">The relative virtual address to be located.</param>
            <param name="LastRvaSection">
            A pointer to an IMAGE_SECTION_HEADER structure that specifies the last RVA section. This is an optional parameter. When
            specified, it points to a variable that contains the last section value used for the specified image to translate an RVA to a VA.
            </param>
            <returns>
            <para>If the function succeeds, the return value is the virtual address in the mapped file.</para>
            <para>If the function fails, the return value is <c>NULL</c>. To retrieve extended error information, call GetLastError.</para>
            </returns>
            <remarks>
            <para>
            The <c>ImageRvaToVa</c> function locates an RVA within the image header of a file that is mapped as a file and returns the
            virtual address of the corresponding byte in the file.
            </para>
            <para>
            All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will
            likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more
            than one thread to this function.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.DbgHelp.ImageRvaToVa(System.IntPtr,System.IntPtr,System.UInt32,System.IntPtr@)">
            <summary>
            Locates a relative virtual address (RVA) within the image header of a file that is mapped as a file and returns the virtual
            address of the corresponding byte in the file.
            </summary>
            <param name="NtHeaders">
            A pointer to an IMAGE_NT_HEADERS structure. This structure can be obtained by calling the ImageNtHeader function.
            </param>
            <param name="Base">The base address of an image that is mapped into memory through a call to the MapViewOfFile function.</param>
            <param name="Rva">The relative virtual address to be located.</param>
            <param name="LastRvaSection">
            A pointer to an IMAGE_SECTION_HEADER structure that specifies the last RVA section. This is an optional parameter. When
            specified, it points to a variable that contains the last section value used for the specified image to translate an RVA to a VA.
            </param>
            <returns>
            <para>If the function succeeds, the return value is the virtual address in the mapped file.</para>
            <para>If the function fails, the return value is <c>NULL</c>. To retrieve extended error information, call GetLastError.</para>
            </returns>
            <remarks>
            <para>
            The <c>ImageRvaToVa</c> function locates an RVA within the image header of a file that is mapped as a file and returns the
            virtual address of the corresponding byte in the file.
            </para>
            <para>
            All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will
            likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more
            than one thread to this function.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.DbgHelp.MakeSureDirectoryPathExists(System.String)">
            <summary>Creates all the directories in the specified path, beginning with the root.</summary>
            <param name="DirPath">
            A valid path name. If the final component of the path is a directory, not a file name, the string must end with a backslash () character.
            </param>
            <returns>
            <para>If the function succeeds, the return value is <c>TRUE</c>.</para>
            <para>If the function fails, the return value is <c>FALSE</c>. To retrieve extended error information, call GetLastError.</para>
            </returns>
            <remarks>
            <para>
            Each directory specified is created, if it does not already exist. If only some of the directories are created, the function
            will return <c>FALSE</c>.
            </para>
            <para>This function does not support Unicode strings. To specify a Unicode path, use the SHCreateDirectoryEx function.</para>
            <para>
            All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will
            likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more
            than one thread to this function.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.DbgHelp.MapDebugInformation(Vanara.PInvoke.HFILE,System.String,System.String,System.UInt32)">
            <summary>
            <para>Obtains access to the debugging information for an image.</para>
            <para>
            <c>Note</c> This function is provided only for backward compatibility. It does not return reliable information. New applications
            should use the SymGetModuleInfo64 and SymLoadModule64 functions.
            </para>
            </summary>
            <param name="FileHandle">A handle to an open executable image or <c>NULL</c>.</param>
            <param name="FileName">The name of an executable image file or <c>NULL</c>.</param>
            <param name="SymbolPath">
            The path where symbol files are located. The path can be multiple paths separated by semicolons. To retrieve the symbol path,
            use the SymGetSearchPath function.
            </param>
            <param name="ImageBase">The base address for the image or zero.</param>
            <returns>
            <para>If the function succeeds, the return value is a pointer to an IMAGE_DEBUG_INFORMATION structure.</para>
            <para>If the function fails, the return value is <c>NULL</c>. To retrieve extended error information, call GetLastError.</para>
            </returns>
            <remarks>
            <para>
            The <c>MapDebugInformation</c> function is used to obtain access to an image's debugging information. The debugging information
            is extracted from the image or the symbol file and placed into the IMAGE_DEBUG_INFORMATION structure. This structure is
            allocated by the library and must be deallocated by using the UnmapDebugInformation function. The memory for the structure is
            not in the process's default heap, so attempts to free it with a memory deallocation routine will fail.
            </para>
            <para>
            All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will
            likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more
            than one thread to this function.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.DbgHelp.SearchTreeForFile(System.String,System.String,System.Text.StringBuilder)">
            <summary>Searches a directory tree for a specified file.</summary>
            <param name="RootPath">The path where the function should begin searching for the file.</param>
            <param name="InputPathName">The file for which the function will search. You can use a partial path.</param>
            <param name="OutputPathBuffer">
            A pointer to a buffer that receives the full path to the file that is found. This string is not modified if the return value is <c>FALSE</c>.
            </param>
            <returns>
            <para>If the function succeeds, the return value is <c>TRUE</c>.</para>
            <para>If the function fails, the return value is <c>FALSE</c>. To retrieve extended error information, call GetLastError.</para>
            </returns>
            <remarks>
            <para>
            The function searches for the file specified by the InputPathName parameter beginning at the path specified in the RootPath
            parameter. The maximum path depth that is allowed in the RootPath is 32 directories. When the function finds the file in the
            directory tree, it places the full path to the file in the buffer specified by the OutputPathBuffer parameter. The underlying
            file system specifies the order of the subdirectory search.
            </para>
            <para>
            The search can be canceled if you register a SymRegisterCallbackProc64 callback function. For every directory searched,
            <c>SearchTreeForFile</c> calls this callback function with CBA_DEFERRED_SYMBOL_LOAD_CANCEL. If the callback function returns
            <c>TRUE</c>, <c>SearchTreeForFile</c> cancels the search.
            </para>
            <para>
            This function triggers one CBA_DEFERRED_SYMBOL_LOAD_CANCEL event per directory searched. This allows the caller to cancel the search.
            </para>
            <para>
            All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will
            likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more
            than one thread to this function.
            </para>
            <para>To call the Unicode version of this function, define DBGHELP_TRANSLATE_TCHAR.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.DbgHelp.SetSymLoadError(System.UInt32)">
            <summary>Sets a symbol load error.</summary>
            <param name="error">A symbol load error.</param>
            <returns>This function does not return a value.</returns>
        </member>
        <member name="M:Vanara.PInvoke.DbgHelp.StackWalk(Vanara.PInvoke.DbgHelp.IMAGE_FILE_MACHINE,Vanara.PInvoke.HPROCESS,Vanara.PInvoke.HTHREAD,Vanara.PInvoke.DbgHelp.STACKFRAME@,System.IntPtr,Vanara.PInvoke.DbgHelp.PREAD_PROCESS_MEMORY_ROUTINE,Vanara.PInvoke.DbgHelp.PFUNCTION_TABLE_ACCESS_ROUTINE,Vanara.PInvoke.DbgHelp.PGET_MODULE_BASE_ROUTINE,Vanara.PInvoke.DbgHelp.PTRANSLATE_ADDRESS_ROUTINE)">
            <summary>Obtains a stack trace.</summary>
            <param name="MachineType">
            <para>The architecture type of the computer for which the stack trace is generated. This parameter can be one of the following values.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>IMAGE_FILE_MACHINE_I386 0x014c</term>
            <term>Intel x86</term>
            </item>
            <item>
            <term>IMAGE_FILE_MACHINE_IA64 0x0200</term>
            <term>Intel Itanium</term>
            </item>
            <item>
            <term>IMAGE_FILE_MACHINE_AMD64 0x8664</term>
            <term>x64 (AMD64 or EM64T)</term>
            </item>
            </list>
            </param>
            <param name="hProcess">A handle to the process for which the stack trace is generated. If the caller supplies a valid callback pointer for the ReadMemoryRoutine parameter, then this value does not have to be a valid process handle. It can be a token that is unique and consistently the same for all calls to the <c>StackWalk64</c> function. If the symbol handler is used with <c>StackWalk64</c>, use the same process handles for the calls to each function.</param>
            <param name="hThread">A handle to the thread for which the stack trace is generated. If the caller supplies a valid callback pointer for the ReadMemoryRoutine parameter, then this value does not have to be a valid thread handle. It can be a token that is unique and consistently the same for all calls to the <c>StackWalk64</c> function.</param>
            <param name="StackFrame">A pointer to a STACKFRAME64 structure. This structure receives information for the next frame, if the function call succeeds.</param>
            <param name="ContextRecord">
            <para>A pointer to a CONTEXT structure. This parameter is required only when the MachineType parameter is not <c>IMAGE_FILE_MACHINE_I386</c>. However, it is recommended that this parameter contain a valid context record. This allows <c>StackWalk64</c> to handle a greater variety of situations.</para>
            <para>This context may be modified, so do not pass a context record that should not be modified.</para>
            </param>
            <param name="ReadMemoryRoutine">
            <para>A callback routine that provides memory read services. When the <c>StackWalk64</c> function needs to read memory from the process's address space, the ReadProcessMemoryProc64 callback is used.</para>
            <para>If this parameter is <c>NULL</c>, then the function uses a default routine. In this case, the hProcess parameter must be a valid process handle.</para>
            <para>If this parameter is not <c>NULL</c>, the application should implement and register a symbol handler callback function that handles <c>CBA_READ_MEMORY</c>.</para>
            </param>
            <param name="FunctionTableAccessRoutine">
            <para>A callback routine that provides access to the run-time function table for the process. This parameter is required because the <c>StackWalk64</c> function does not have access to the process's run-time function table. For more information, see FunctionTableAccessProc64.</para>
            <para>The symbol handler provides functions that load and access the run-time table. If these functions are used, then SymFunctionTableAccess64 can be passed as a valid parameter.</para>
            </param>
            <param name="GetModuleBaseRoutine">
            <para>A callback routine that provides a module base for any given virtual address. This parameter is required. For more information, see GetModuleBaseProc64.</para>
            <para>The symbol handler provides functions that load and maintain module information. If these functions are used, then SymGetModuleBase64 can be passed as a valid parameter.</para>
            </param>
            <param name="TranslateAddress">
            <para>A callback routine that provides address translation for 16-bit addresses. For more information, see TranslateAddressProc64.</para>
            <para>Most callers of <c>StackWalk64</c> can safely pass <c>NULL</c> for this parameter.</para>
            </param>
            <returns>
            <para>If the function succeeds, the return value is <c>TRUE</c>.</para>
            <para>If the function fails, the return value is <c>FALSE</c>. Note that <c>StackWalk64</c> generally does not set the last error code.</para>
            </returns>
            <remarks>
            <para>The <c>StackWalk64</c> function provides a portable method for obtaining a stack trace. Using the <c>StackWalk64</c> function is recommended over writing your own function because of all the complexities associated with stack walking on platforms. In addition, there are compiler options that cause the stack to appear differently, depending on how the module is compiled. By using this function, your application has a portable stack trace that continues to work as the compiler and operating system change.</para>
            <para>The first call to this function will fail if the <c>AddrPC</c>, <c>AddrFrame</c>, and <c>AddrStack</c> members of the STACKFRAME64 structure passed in the StackFrame parameter are not initialized.</para>
            <para>All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more than one thread to this function.</para>
            <para>This function supersedes the <c>StackWalk</c> function. For more information, see Updated Platform Support. <c>StackWalk</c> is defined as follows in DbgHelp.h.</para>
            <para><code>#if !defined(_IMAGEHLP_SOURCE_) &amp;&amp; defined(_IMAGEHLP64) #define StackWalk StackWalk64 #else BOOL IMAGEAPI StackWalk( DWORD MachineType, __in HANDLE hProcess, __in HANDLE hThread, __inout LPSTACKFRAME StackFrame, __inout PVOID ContextRecord, __in_opt PREAD_PROCESS_MEMORY_ROUTINE ReadMemoryRoutine, __in_opt PFUNCTION_TABLE_ACCESS_ROUTINE FunctionTableAccessRoutine, __in_opt PGET_MODULE_BASE_ROUTINE GetModuleBaseRoutine, __in_opt PTRANSLATE_ADDRESS_ROUTINE TranslateAddress ); #endif </code></para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.DbgHelp.StackWalk64(Vanara.PInvoke.DbgHelp.IMAGE_FILE_MACHINE,Vanara.PInvoke.HPROCESS,Vanara.PInvoke.HTHREAD,Vanara.PInvoke.DbgHelp.STACKFRAME64@,System.IntPtr,Vanara.PInvoke.DbgHelp.PREAD_PROCESS_MEMORY_ROUTINE64,Vanara.PInvoke.DbgHelp.PFUNCTION_TABLE_ACCESS_ROUTINE64,Vanara.PInvoke.DbgHelp.PGET_MODULE_BASE_ROUTINE64,Vanara.PInvoke.DbgHelp.PTRANSLATE_ADDRESS_ROUTINE64)">
            <summary>Obtains a stack trace.</summary>
            <param name="MachineType">
            <para>
            The architecture type of the computer for which the stack trace is generated. This parameter can be one of the following values.
            </para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>IMAGE_FILE_MACHINE_I386 0x014c</term>
            <term>Intel x86</term>
            </item>
            <item>
            <term>IMAGE_FILE_MACHINE_IA64 0x0200</term>
            <term>Intel Itanium</term>
            </item>
            <item>
            <term>IMAGE_FILE_MACHINE_AMD64 0x8664</term>
            <term>x64 (AMD64 or EM64T)</term>
            </item>
            </list>
            </param>
            <param name="hProcess">
            A handle to the process for which the stack trace is generated. If the caller supplies a valid callback pointer for the
            ReadMemoryRoutine parameter, then this value does not have to be a valid process handle. It can be a token that is unique and
            consistently the same for all calls to the <c>StackWalk64</c> function. If the symbol handler is used with <c>StackWalk64</c>,
            use the same process handles for the calls to each function.
            </param>
            <param name="hThread">
            A handle to the thread for which the stack trace is generated. If the caller supplies a valid callback pointer for the
            ReadMemoryRoutine parameter, then this value does not have to be a valid thread handle. It can be a token that is unique and
            consistently the same for all calls to the <c>StackWalk64</c> function.
            </param>
            <param name="StackFrame">
            A pointer to a STACKFRAME64 structure. This structure receives information for the next frame, if the function call succeeds.
            </param>
            <param name="ContextRecord">
            <para>
            A pointer to a CONTEXT structure. This parameter is required only when the MachineType parameter is not
            <c>IMAGE_FILE_MACHINE_I386</c>. However, it is recommended that this parameter contain a valid context record. This allows
            <c>StackWalk64</c> to handle a greater variety of situations.
            </para>
            <para>This context may be modified, so do not pass a context record that should not be modified.</para>
            </param>
            <param name="ReadMemoryRoutine">
            <para>
            A callback routine that provides memory read services. When the <c>StackWalk64</c> function needs to read memory from the
            process's address space, the ReadProcessMemoryProc64 callback is used.
            </para>
            <para>
            If this parameter is <c>NULL</c>, then the function uses a default routine. In this case, the hProcess parameter must be a valid
            process handle.
            </para>
            <para>
            If this parameter is not <c>NULL</c>, the application should implement and register a symbol handler callback function that
            handles <c>CBA_READ_MEMORY</c>.
            </para>
            </param>
            <param name="FunctionTableAccessRoutine">
            <para>
            A callback routine that provides access to the run-time function table for the process. This parameter is required because the
            <c>StackWalk64</c> function does not have access to the process's run-time function table. For more information, see FunctionTableAccessProc64.
            </para>
            <para>
            The symbol handler provides functions that load and access the run-time table. If these functions are used, then
            SymFunctionTableAccess64 can be passed as a valid parameter.
            </para>
            </param>
            <param name="GetModuleBaseRoutine">
            <para>
            A callback routine that provides a module base for any given virtual address. This parameter is required. For more information,
            see GetModuleBaseProc64.
            </para>
            <para>
            The symbol handler provides functions that load and maintain module information. If these functions are used, then
            SymGetModuleBase64 can be passed as a valid parameter.
            </para>
            </param>
            <param name="TranslateAddress">
            <para>A callback routine that provides address translation for 16-bit addresses. For more information, see TranslateAddressProc64.</para>
            <para>Most callers of <c>StackWalk64</c> can safely pass <c>NULL</c> for this parameter.</para>
            </param>
            <returns>
            <para>If the function succeeds, the return value is <c>TRUE</c>.</para>
            <para>
            If the function fails, the return value is <c>FALSE</c>. Note that <c>StackWalk64</c> generally does not set the last error code.
            </para>
            </returns>
            <remarks>
            <para>
            The <c>StackWalk64</c> function provides a portable method for obtaining a stack trace. Using the <c>StackWalk64</c> function is
            recommended over writing your own function because of all the complexities associated with stack walking on platforms. In
            addition, there are compiler options that cause the stack to appear differently, depending on how the module is compiled. By
            using this function, your application has a portable stack trace that continues to work as the compiler and operating system change.
            </para>
            <para>
            The first call to this function will fail if the <c>AddrPC</c>, <c>AddrFrame</c>, and <c>AddrStack</c> members of the
            STACKFRAME64 structure passed in the StackFrame parameter are not initialized.
            </para>
            <para>
            All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will
            likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more
            than one thread to this function.
            </para>
            <para>
            This function supersedes the <c>StackWalk</c> function. For more information, see Updated Platform Support. <c>StackWalk</c> is
            defined as follows in DbgHelp.h.
            </para>
            <para>
            <code>#if !defined(_IMAGEHLP_SOURCE_) &amp;&amp; defined(_IMAGEHLP64) #define StackWalk StackWalk64 #else BOOL IMAGEAPI StackWalk( DWORD MachineType, __in HANDLE hProcess, __in HANDLE hThread, __inout LPSTACKFRAME StackFrame, __inout PVOID ContextRecord, __in_opt PREAD_PROCESS_MEMORY_ROUTINE ReadMemoryRoutine, __in_opt PFUNCTION_TABLE_ACCESS_ROUTINE FunctionTableAccessRoutine, __in_opt PGET_MODULE_BASE_ROUTINE GetModuleBaseRoutine, __in_opt PTRANSLATE_ADDRESS_ROUTINE TranslateAddress ); #endif</code>
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.DbgHelp.StackWalkEx(Vanara.PInvoke.DbgHelp.IMAGE_FILE_MACHINE,Vanara.PInvoke.HPROCESS,Vanara.PInvoke.HTHREAD,Vanara.PInvoke.DbgHelp.STACKFRAME_EX@,System.IntPtr,Vanara.PInvoke.DbgHelp.PREAD_PROCESS_MEMORY_ROUTINE64,Vanara.PInvoke.DbgHelp.PFUNCTION_TABLE_ACCESS_ROUTINE64,Vanara.PInvoke.DbgHelp.PGET_MODULE_BASE_ROUTINE64,Vanara.PInvoke.DbgHelp.PTRANSLATE_ADDRESS_ROUTINE64,Vanara.PInvoke.DbgHelp.SYM_STKWALK)">
            <summary>Obtains a stack trace.</summary>
            <param name="MachineType">
            <para>
            The architecture type of the computer for which the stack trace is generated. This parameter can be one of the following values.
            </para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>IMAGE_FILE_MACHINE_I386 0x014c</term>
            <term>Intel x86</term>
            </item>
            <item>
            <term>IMAGE_FILE_MACHINE_IA64 0x0200</term>
            <term>Intel Itanium</term>
            </item>
            <item>
            <term>IMAGE_FILE_MACHINE_AMD64 0x8664</term>
            <term>x64 (AMD64 or EM64T)</term>
            </item>
            </list>
            </param>
            <param name="hProcess">
            A handle to the process for which the stack trace is generated. If the caller supplies a valid callback pointer for the
            ReadMemoryRoutine parameter, then this value does not have to be a valid process handle. It can be a token that is unique and
            consistently the same for all calls to the <c>StackWalkEx</c> function. If the symbol handler is used with <c>StackWalkEx</c>,
            use the same process handles for the calls to each function.
            </param>
            <param name="hThread">
            A handle to the thread for which the stack trace is generated. If the caller supplies a valid callback pointer for the
            ReadMemoryRoutine parameter, then this value does not have to be a valid thread handle. It can be a token that is unique and
            consistently the same for all calls to the <c>StackWalkEx</c> function.
            </param>
            <param name="StackFrame">
            A pointer to a STACKFRAME_EX structure. This structure receives information for the next frame, if the function call succeeds.
            </param>
            <param name="ContextRecord">
            <para>
            A pointer to a CONTEXT structure. This parameter is required only when the MachineType parameter is not
            <c>IMAGE_FILE_MACHINE_I386</c>. However, it is recommended that this parameter contain a valid context record. This allows
            <c>StackWalkEx</c> to handle a greater variety of situations.
            </para>
            <para>This context may be modified, so do not pass a context record that should not be modified.</para>
            </param>
            <param name="ReadMemoryRoutine">
            <para>
            A callback routine that provides memory read services. When the <c>StackWalkEx</c> function needs to read memory from the
            process's address space, the ReadProcessMemoryProc64 callback is used.
            </para>
            <para>
            If this parameter is <c>NULL</c>, then the function uses a default routine. In this case, the hProcess parameter must be a valid
            process handle.
            </para>
            <para>
            If this parameter is not <c>NULL</c>, the application should implement and register a symbol handler callback function that
            handles <c>CBA_READ_MEMORY</c>.
            </para>
            </param>
            <param name="FunctionTableAccessRoutine">
            <para>
            A callback routine that provides access to the run-time function table for the process. This parameter is required because the
            <c>StackWalkEx</c> function does not have access to the process's run-time function table. For more information, see FunctionTableAccessProc64.
            </para>
            <para>
            The symbol handler provides functions that load and access the run-time table. If these functions are used, then
            SymFunctionTableAccess64 can be passed as a valid parameter.
            </para>
            </param>
            <param name="GetModuleBaseRoutine">
            <para>
            A callback routine that provides a module base for any given virtual address. This parameter is required. For more information,
            see GetModuleBaseProc64.
            </para>
            <para>
            The symbol handler provides functions that load and maintain module information. If these functions are used, then
            SymGetModuleBase64 can be passed as a valid parameter.
            </para>
            </param>
            <param name="TranslateAddress">
            <para>A callback routine that provides address translation for 16-bit addresses. For more information, see TranslateAddressProc64.</para>
            <para>Most callers of <c>StackWalkEx</c> can safely pass <c>NULL</c> for this parameter.</para>
            </param>
            <param name="Flags">
            <para>A combination of zero or more flags.</para>
            <para>SYM_STKWALK_DEFAULT (0)</para>
            <para>SYM_STKWALK_FORCE_FRAMEPTR (1)</para>
            </param>
            <returns>
            <para>If the function succeeds, the return value is <c>TRUE</c>.</para>
            <para>
            If the function fails, the return value is <c>FALSE</c>. Note that <c>StackWalkEx</c> generally does not set the last error code.
            </para>
            </returns>
            <remarks>
            <para>
            The <c>StackWalkEx</c> function provides a portable method for obtaining a stack trace. Using the <c>StackWalkEx</c> function is
            recommended over writing your own function because of all the complexities associated with stack walking on platforms. In
            addition, there are compiler options that cause the stack to appear differently, depending on how the module is compiled. By
            using this function, your application has a portable stack trace that continues to work as the compiler and operating system change.
            </para>
            <para>
            The first call to this function will fail if the <c>AddrPC</c>, <c>AddrFrame</c>, and <c>AddrStack</c> members of the
            STACKFRAME64 structure passed in the StackFrame parameter are not initialized.
            </para>
            <para>
            All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will
            likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more
            than one thread to this function.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.DbgHelp.UnDecorateSymbolName(System.String,System.Text.StringBuilder,System.UInt32,Vanara.PInvoke.DbgHelp.UNDNAME)">
            <summary>Undecorates the specified decorated C++ symbol name.</summary>
            <param name="name">
            The decorated C++ symbol name. This name can be identified by the first character of the name, which is always a question mark (?).
            </param>
            <param name="outputString">A pointer to a string buffer that receives the undecorated name.</param>
            <param name="maxStringLength">The size of the UnDecoratedName buffer, in characters.</param>
            <param name="flags">
            <para>The options for how the decorated name is undecorated. This parameter can be zero or more of the following values.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>UNDNAME_32_BIT_DECODE 0x0800</term>
            <term>Undecorate 32-bit decorated names.</term>
            </item>
            <item>
            <term>UNDNAME_COMPLETE 0x0000</term>
            <term>Enable full undecoration.</term>
            </item>
            <item>
            <term>UNDNAME_NAME_ONLY 0x1000</term>
            <term>Undecorate only the name for primary declaration. Returns [scope::]name. Does expand template parameters.</term>
            </item>
            <item>
            <term>UNDNAME_NO_ACCESS_SPECIFIERS 0x0080</term>
            <term>Disable expansion of access specifiers for members.</term>
            </item>
            <item>
            <term>UNDNAME_NO_ALLOCATION_LANGUAGE 0x0010</term>
            <term>Disable expansion of the declaration language specifier.</term>
            </item>
            <item>
            <term>UNDNAME_NO_ALLOCATION_MODEL 0x0008</term>
            <term>Disable expansion of the declaration model.</term>
            </item>
            <item>
            <term>UNDNAME_NO_ARGUMENTS 0x2000</term>
            <term>Do not undecorate function arguments.</term>
            </item>
            <item>
            <term>UNDNAME_NO_CV_THISTYPE 0x0040</term>
            <term>Disable expansion of CodeView modifiers on the this type for primary declaration.</term>
            </item>
            <item>
            <term>UNDNAME_NO_FUNCTION_RETURNS 0x0004</term>
            <term>Disable expansion of return types for primary declarations.</term>
            </item>
            <item>
            <term>UNDNAME_NO_LEADING_UNDERSCORES 0x0001</term>
            <term>Remove leading underscores from Microsoft keywords.</term>
            </item>
            <item>
            <term>UNDNAME_NO_MEMBER_TYPE 0x0200</term>
            <term>Disable expansion of the static or virtual attribute of members.</term>
            </item>
            <item>
            <term>UNDNAME_NO_MS_KEYWORDS 0x0002</term>
            <term>Disable expansion of Microsoft keywords.</term>
            </item>
            <item>
            <term>UNDNAME_NO_MS_THISTYPE 0x0020</term>
            <term>Disable expansion of Microsoft keywords on the this type for primary declaration.</term>
            </item>
            <item>
            <term>UNDNAME_NO_RETURN_UDT_MODEL 0x0400</term>
            <term>Disable expansion of the Microsoft model for user-defined type returns.</term>
            </item>
            <item>
            <term>UNDNAME_NO_SPECIAL_SYMS 0x4000</term>
            <term>Do not undecorate special names, such as vtable, vcall, vector, metatype, and so on.</term>
            </item>
            <item>
            <term>UNDNAME_NO_THISTYPE 0x0060</term>
            <term>Disable all modifiers on the this type.</term>
            </item>
            <item>
            <term>UNDNAME_NO_THROW_SIGNATURES 0x0100</term>
            <term>Disable expansion of throw-signatures for functions and pointers to functions.</term>
            </item>
            </list>
            </param>
            <returns>
            <para>
            If the function succeeds, the return value is the number of characters in the UnDecoratedName buffer, not including the NULL terminator.
            </para>
            <para>If the function fails, the return value is zero. To retrieve extended error information, call GetLastError.</para>
            <para>If the function fails and returns zero, the content of the UnDecoratedName buffer is undetermined.</para>
            </returns>
            <remarks>
            <para>To use undecorated symbols, call the SymSetOptions function with the <c>SYMOPT_UNDNAME</c> option.</para>
            <para>
            All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will
            likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more
            than one thread to this function.
            </para>
            <para>To call the Unicode version of this function, define <c>DBGHELP_TRANSLATE_TCHAR</c>.</para>
            <para>Examples</para>
            <para>For an example, see Retrieving Undecorated Symbol Names.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.DbgHelp.UnmapDebugInformation(System.IntPtr)">
            <summary>
            <para>Deallocates the memory and resources allocated by a call to the MapDebugInformation function.</para>
            <para>
            <c>Note</c> This function is provided only for backward compatibility. New applications should use the SymUnloadModule64 function.
            </para>
            </summary>
            <param name="DebugInfo">A pointer to an IMAGE_DEBUG_INFORMATION structure that is returned from a call to MapDebugInformation.</param>
            <returns>
            <para>If the function succeeds, the return value is <c>TRUE</c>.</para>
            <para>If the function fails, the return value is <c>FALSE</c>. To retrieve extended error information, call GetLastError.</para>
            </returns>
            <remarks>
            <para>
            The <c>UnmapDebugInformation</c> function is the counterpart to the MapDebugInformation function and must be used to deallocate
            the memory and resources allocated by a call to the MapDebugInformation function.
            </para>
            <para>
            All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will
            likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more
            than one thread to this function.
            </para>
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.MAX_SYM_NAME">
            <summary>The maximum length of a symbol name.</summary>
        </member>
        <member name="T:Vanara.PInvoke.DbgHelp.DSLFLAG">
            <summary>Flags for <see cref="T:Vanara.PInvoke.DbgHelp.IMAGEHLP_DEFERRED_SYMBOL_LOAD64"/>.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.DSLFLAG.DSLFLAG_MISMATCHED_PDB">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.DSLFLAG.DSLFLAG_MISMATCHED_DBG">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.DSLFLAG.FLAG_ENGINE_PRESENT">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.DSLFLAG.FLAG_ENGOPT_DISALLOW_NETWORK_PATHS">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.DSLFLAG.FLAG_OVERRIDE_ARM_MACHINE_TYPE">
            <summary/>
        </member>
        <member name="T:Vanara.PInvoke.DbgHelp.IMAGEHLP_GTI_FLAGS">
            <summary>Flags for <see cref="T:Vanara.PInvoke.DbgHelp.IMAGEHLP_GET_TYPE_INFO_PARAMS"/>.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGEHLP_GTI_FLAGS.IMAGEHLP_GET_TYPE_INFO_UNCACHED">
            <summary>
            Do not cache the data for later retrievals. It is good to use this flag if you will not be requesting the information again.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGEHLP_GTI_FLAGS.IMAGEHLP_GET_TYPE_INFO_CHILDREN">
            <summary>Retrieve information about the children of the specified types, not the types themselves.</summary>
        </member>
        <member name="T:Vanara.PInvoke.DbgHelp.INLINE_FRAME_CONTEXT">
            <summary>Specifies the type of the inline frame context.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.INLINE_FRAME_CONTEXT.INLINE_FRAME_CONTEXT_INIT">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.INLINE_FRAME_CONTEXT.INLINE_FRAME_CONTEXT_IGNORE">
            <summary/>
        </member>
        <member name="T:Vanara.PInvoke.DbgHelp.SYM_TYPE">
            <summary>The type of symbols that are loaded.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.SYM_TYPE.SymNone">
            <summary>No symbols are loaded.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.SYM_TYPE.SymCoff">
            <summary>COFF symbols.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.SYM_TYPE.SymCv">
            <summary>CodeView symbols.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.SYM_TYPE.SymPdb">
            <summary>PDB symbols.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.SYM_TYPE.SymExport">
            <summary>Symbols generated from a DLL export table.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.SYM_TYPE.SymDeferred">
            <summary>Symbol loading deferred.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.SYM_TYPE.SymSym">
            <summary>.sym file.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.SYM_TYPE.SymDia">
            <summary>DIA symbols.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.SYM_TYPE.SymVirtual">
            <summary>The virtual module created by SymLoadModuleEx with SLMFLAG_VIRTUAL.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.SYM_TYPE.NumSymTypes">
            <summary>Unused.</summary>
        </member>
        <member name="T:Vanara.PInvoke.DbgHelp.SYMFLAG">
            <summary>flags found in SYMBOL_INFO.Flags</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.SYMFLAG.SYMFLAG_VALUEPRESENT">
            <summary>The Value member is used.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.SYMFLAG.SYMFLAG_REGISTER">
            <summary>The symbol is a register. The Register member is used.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.SYMFLAG.SYMFLAG_REGREL">
            <summary>Offsets are register relative.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.SYMFLAG.SYMFLAG_FRAMEREL">
            <summary>Offsets are frame relative.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.SYMFLAG.SYMFLAG_PARAMETER">
            <summary>The symbol is a parameter.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.SYMFLAG.SYMFLAG_LOCAL">
            <summary>The symbol is a local variable.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.SYMFLAG.SYMFLAG_CONSTANT">
            <summary>The symbol is a constant.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.SYMFLAG.SYMFLAG_EXPORT">
            <summary>The symbol is from the export table.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.SYMFLAG.SYMFLAG_FORWARDER">
            <summary>The symbol is a forwarder.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.SYMFLAG.SYMFLAG_FUNCTION">
            <summary>The symbol is a known function.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.SYMFLAG.SYMFLAG_VIRTUAL">
            <summary>The symbol is a virtual symbol created by the SymAddSymbol function.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.SYMFLAG.SYMFLAG_THUNK">
            <summary>The symbol is a thunk.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.SYMFLAG.SYMFLAG_TLSREL">
            <summary>The symbol is an offset into the TLS data area.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.SYMFLAG.SYMFLAG_SLOT">
            <summary>The symbol is a managed code slot.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.SYMFLAG.SYMFLAG_ILREL">
            <summary>
            The symbol address is an offset relative to the beginning of the intermediate language block. This applies to managed code only.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.SYMFLAG.SYMFLAG_METADATA">
            <summary>The symbol is managed metadata.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.SYMFLAG.SYMFLAG_CLR_TOKEN">
            <summary>The symbol is a CLR token.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.SYMFLAG.SYMFLAG_NULL">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.SYMFLAG.SYMFLAG_FUNC_NO_RETURN">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.SYMFLAG.SYMFLAG_SYNTHETIC_ZEROBASE">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.SYMFLAG.SYMFLAG_PUBLIC_CODE">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.SYMFLAG.SYMFLAG_REGREL_ALIASINDIR">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.SYMFLAG.SYMFLAG_RESET">
            <summary>this resets SymNext/Prev to the beginning of the module passed in the address field</summary>
        </member>
        <member name="M:Vanara.PInvoke.DbgHelp.TimeStampToDateTime(System.UInt32)">
            <summary>Converts a time stamp to a <see cref="T:System.DateTime"/>.</summary>
            <param name="timeStamp">
            The time stamp which is a value represented in the number of seconds elapsed since midnight (00:00:00), January 1, 1970,
            Universal Coordinated Time, according to the system clock.
            </param>
            <returns></returns>
        </member>
        <member name="T:Vanara.PInvoke.DbgHelp.ADDRESS">
            <summary>Represents an address. It is used in the STACKFRAME64 structure.</summary>
            <remarks>
            <para>
            This structure supersedes the <c>ADDRESS</c> structure. For more information, see Updated Platform Support. <c>ADDRESS</c> is
            defined as follows in DbgHelp.h.
            </para>
            <para>
            <code>#if !defined(_IMAGEHLP_SOURCE_) &amp;&amp; defined(_IMAGEHLP64) #define ADDRESS ADDRESS64 #define LPADDRESS LPADDRESS64 #else typedef struct _tagADDRESS { DWORD Offset; WORD Segment; ADDRESS_MODE Mode; } ADDRESS, *LPADDRESS; #endif</code>
            </para>
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.ADDRESS.Offset">
            <summary>
            The offset into the segment, or a 32-bit virtual address. The interpretation of this value depends on the value contained in
            the <c>Mode</c> member.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.ADDRESS.Segment">
            <summary>The segment number. This value is used only for 16-bit addressing.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.ADDRESS.Mode">
            <summary>
            <para>The addressing mode. This member can be one of the following values.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>AddrMode1616 0</term>
            <term>16:16 addressing. To support this addressing mode, you must supply a TranslateAddressProc64 callback function.</term>
            </item>
            <item>
            <term>AddrMode1632 1</term>
            <term>16:32 addressing. To support this addressing mode, you must supply a TranslateAddressProc64 callback function.</term>
            </item>
            <item>
            <term>AddrModeReal 2</term>
            <term>Real-mode addressing. To support this addressing mode, you must supply a TranslateAddressProc64 callback function.</term>
            </item>
            <item>
            <term>AddrModeFlat 3</term>
            <term>Flat addressing. This is the only addressing mode supported by the library.</term>
            </item>
            </list>
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.DbgHelp.ADDRESS64">
            <summary>Represents an address. It is used in the STACKFRAME64 structure.</summary>
            <remarks>
            <para>
            This structure supersedes the <c>ADDRESS</c> structure. For more information, see Updated Platform Support. <c>ADDRESS</c> is
            defined as follows in DbgHelp.h.
            </para>
            <para>
            <code>#if !defined(_IMAGEHLP_SOURCE_) &amp;&amp; defined(_IMAGEHLP64) #define ADDRESS ADDRESS64 #define LPADDRESS LPADDRESS64 #else typedef struct _tagADDRESS { DWORD Offset; WORD Segment; ADDRESS_MODE Mode; } ADDRESS, *LPADDRESS; #endif</code>
            </para>
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.ADDRESS64.Offset">
            <summary>
            The offset into the segment, or a 32-bit virtual address. The interpretation of this value depends on the value contained in
            the <c>Mode</c> member.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.ADDRESS64.Segment">
            <summary>The segment number. This value is used only for 16-bit addressing.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.ADDRESS64.Mode">
            <summary>
            <para>The addressing mode. This member can be one of the following values.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>AddrMode1616 0</term>
            <term>16:16 addressing. To support this addressing mode, you must supply a TranslateAddressProc64 callback function.</term>
            </item>
            <item>
            <term>AddrMode1632 1</term>
            <term>16:32 addressing. To support this addressing mode, you must supply a TranslateAddressProc64 callback function.</term>
            </item>
            <item>
            <term>AddrModeReal 2</term>
            <term>Real-mode addressing. To support this addressing mode, you must supply a TranslateAddressProc64 callback function.</term>
            </item>
            <item>
            <term>AddrModeFlat 3</term>
            <term>Flat addressing. This is the only addressing mode supported by the library.</term>
            </item>
            </list>
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.DbgHelp.API_VERSION">
            <summary>Contains the library version.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.API_VERSION.MajorVersion">
            <summary>The major version number.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.API_VERSION.MinorVersion">
            <summary>The minor version number.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.API_VERSION.Revision">
            <summary>The revision number.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.API_VERSION.Reserved">
            <summary>This member is reserved for use by the operating system.</summary>
        </member>
        <member name="M:Vanara.PInvoke.DbgHelp.API_VERSION.op_Implicit(System.Version)~Vanara.PInvoke.DbgHelp.API_VERSION">
            <summary>Performs an explicit conversion from <see cref="T:System.Version"/> to <see cref="T:Vanara.PInvoke.DbgHelp.API_VERSION"/>.</summary>
            <param name="version">The version.</param>
            <returns>The resulting <see cref="T:Vanara.PInvoke.DbgHelp.API_VERSION"/> instance from the conversion.</returns>
            <exception cref="T:System.ArgumentException">version.Build must be 0</exception>
        </member>
        <member name="M:Vanara.PInvoke.DbgHelp.API_VERSION.op_Explicit(Vanara.PInvoke.DbgHelp.API_VERSION)~System.Version">
            <summary>Performs an explicit conversion from <see cref="T:Vanara.PInvoke.DbgHelp.API_VERSION"/> to <see cref="T:System.Version"/>.</summary>
            <param name="version">The version.</param>
            <returns>The resulting <see cref="T:System.Version"/> instance from the conversion.</returns>
        </member>
        <member name="T:Vanara.PInvoke.DbgHelp.IMAGE_DEBUG_INFORMATION">
            <summary>
            <para>Contains debugging information.</para>
            <para>
            <c>Note</c> This structure is used by the MapDebugInformation and UnmapDebugInformation functions, which are provided only for
            backward compatibility.
            </para>
            </summary>
            <remarks>
            <para>The <c>LIST_ENTRY</c> structure is defined as follows:</para>
            <para>
            <code>typedef struct _LIST_ENTRY { struct _LIST_ENTRY *Flink; struct _LIST_ENTRY *Blink; } LIST_ENTRY, *PLIST_ENTRY, *RESTRICTED_POINTER PRLIST_ENTRY;</code>
            </para>
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGE_DEBUG_INFORMATION.List">
            <summary>A linked list of <c>LIST_ENTRY</c> structures.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGE_DEBUG_INFORMATION.ReservedSize">
            <summary>
            The size of the memory allocated for the <c>IMAGE_DEBUG_INFORMATION</c> structure and all debugging information, in bytes.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGE_DEBUG_INFORMATION.ReservedMappedBase">
            <summary>The base address of the image.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGE_DEBUG_INFORMATION.ReservedMachine">
            <summary>
            <para>The computer type. This member can be one of the following values.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>IMAGE_FILE_MACHINE_I386 0x014c</term>
            <term>Intel (32-bit)</term>
            </item>
            <item>
            <term>IMAGE_FILE_MACHINE_IA64 0x0200</term>
            <term>Intel Itanium</term>
            </item>
            <item>
            <term>IMAGE_FILE_MACHINE_AMD64 0x8664</term>
            <term>x64 (AMD64 or EM64T)</term>
            </item>
            </list>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGE_DEBUG_INFORMATION.ReservedCharacteristics">
            <summary>
            <para>The characteristics of the image. This member can be one of the following values.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>IMAGE_FILE_RELOCS_STRIPPED 0x0001</term>
            <term>Relocation information is stripped from the file.</term>
            </item>
            <item>
            <term>IMAGE_FILE_EXECUTABLE_IMAGE 0x0002</term>
            <term>The file is executable (there are no unresolved external references).</term>
            </item>
            <item>
            <term>IMAGE_FILE_LINE_NUMS_STRIPPED 0x0004</term>
            <term>Line numbers are stripped from the file.</term>
            </item>
            <item>
            <term>IMAGE_FILE_LOCAL_SYMS_STRIPPED 0x0008</term>
            <term>Local symbols are stripped from file.</term>
            </item>
            <item>
            <term>IMAGE_FILE_AGGRESIVE_WS_TRIM 0x0010</term>
            <term>Aggressively trim the working set.</term>
            </item>
            <item>
            <term>IMAGE_FILE_LARGE_ADDRESS_AWARE 0x0020</term>
            <term>The application can handle addresses larger than 2 GB.</term>
            </item>
            <item>
            <term>IMAGE_FILE_BYTES_REVERSED_LO 0x0080</term>
            <term>Bytes of the word are reversed.</term>
            </item>
            <item>
            <term>IMAGE_FILE_32BIT_MACHINE 0x0100</term>
            <term>Computer supports 32-bit words.</term>
            </item>
            <item>
            <term>IMAGE_FILE_DEBUG_STRIPPED 0x0200</term>
            <term>Debugging information is stored separately in a .dbg file.</term>
            </item>
            <item>
            <term>IMAGE_FILE_REMOVABLE_RUN_FROM_SWAP 0x0400</term>
            <term>If the image is on removable media, copy and run from the swap file.</term>
            </item>
            <item>
            <term>IMAGE_FILE_NET_RUN_FROM_SWAP 0x0800</term>
            <term>If the image is on the network, copy and run from the swap file.</term>
            </item>
            <item>
            <term>IMAGE_FILE_SYSTEM 0x1000</term>
            <term>System file.</term>
            </item>
            <item>
            <term>IMAGE_FILE_DLL 0x2000</term>
            <term>DLL file.</term>
            </item>
            <item>
            <term>IMAGE_FILE_UP_SYSTEM_ONLY 0x4000</term>
            <term>File should be run only on a uniprocessor computer.</term>
            </item>
            <item>
            <term>IMAGE_FILE_BYTES_REVERSED_HI 0x8000</term>
            <term>Bytes of the word are reversed.</term>
            </item>
            </list>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGE_DEBUG_INFORMATION.ReservedCheckSum">
            <summary>The checksum of the image.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGE_DEBUG_INFORMATION.ImageBase">
            <summary>The requested base address of the image.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGE_DEBUG_INFORMATION.SizeOfImage">
            <summary>The size of the image, in bytes.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGE_DEBUG_INFORMATION.ReservedNumberOfSections">
            <summary>The number of COFF section headers.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGE_DEBUG_INFORMATION.ReservedSections">
            <summary>A pointer to the first COFF section header. For more information, see IMAGE_SECTION_HEADER.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGE_DEBUG_INFORMATION.ReservedExportedNamesSize">
            <summary>The size of the <c>ExportedNames</c> member, in bytes.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGE_DEBUG_INFORMATION.ReservedExportedNames">
            <summary>A pointer to a series of null-terminated strings that name all the functions exported from the image.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGE_DEBUG_INFORMATION.ReservedNumberOfFunctionTableEntries">
            <summary>The number of entries contained in the <c>FunctionTableEntries</c> member.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGE_DEBUG_INFORMATION.ReservedFunctionTableEntries">
            <summary>A pointer to the first function table entry. For more information, see IMAGE_FUNCTION_ENTRY.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGE_DEBUG_INFORMATION.ReservedLowestFunctionStartingAddress">
            <summary>The lowest function table starting address.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGE_DEBUG_INFORMATION.ReservedHighestFunctionEndingAddress">
            <summary>The highest function table ending address.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGE_DEBUG_INFORMATION.ReservedNumberOfFpoTableEntries">
            <summary>The number of entries contained in the <c>FpoTableEntries</c> member.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGE_DEBUG_INFORMATION.ReservedFpoTableEntries">
            <summary>A pointer to the first FPO entry. For more information, see FPO_DATA.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGE_DEBUG_INFORMATION.SizeOfCoffSymbols">
            <summary>The size of the COFF symbol table, in bytes.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGE_DEBUG_INFORMATION.CoffSymbols">
            <summary>A pointer to the COFF symbol table.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGE_DEBUG_INFORMATION.ReservedSizeOfCodeViewSymbols">
            <summary>The size of the CodeView symbol table, in bytes.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGE_DEBUG_INFORMATION.ReservedCodeViewSymbols">
            <summary>A pointer to the beginning of the CodeView symbol table.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGE_DEBUG_INFORMATION.ImageFilePath">
            <summary>The relative path to the image file name.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGE_DEBUG_INFORMATION.ImageFileName">
            <summary>The image file name.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGE_DEBUG_INFORMATION.ReservedDebugFilePath">
            <summary>The full path to the symbol file.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGE_DEBUG_INFORMATION.ReservedTimeDateStamp">
            <summary>The timestamp of the image. This represents the date and time the image was created by the linker.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGE_DEBUG_INFORMATION.ReservedRomImage">
            <summary>This value is <c>TRUE</c> if the image is a ROM image.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGE_DEBUG_INFORMATION.ReservedDebugDirectory">
            <summary>A pointer to the first debug directory. For more information, see IMAGE_DEBUG_DIRECTORY.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGE_DEBUG_INFORMATION.ReservedNumberOfDebugDirectories">
            <summary>The number of entries contained in the <c>DebugDirectory</c> member.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGE_DEBUG_INFORMATION.ReservedOriginalFunctionTableBaseAddress">
            <summary>The original function table base address.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGE_DEBUG_INFORMATION.Reserved">
            <summary>This member is reserved for use by the operating system.</summary>
        </member>
        <member name="T:Vanara.PInvoke.DbgHelp.IMAGEHLP_CBA_EVENT">
            <summary>Contains information about a debugging event.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGEHLP_CBA_EVENT.severity">
            <summary>
            <para>The event severity. This parameter can be one of the following values.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>sevInfo 0</term>
            <term>Informational event.</term>
            </item>
            <item>
            <term>sevProblem 1</term>
            <term>Reserved for future use.</term>
            </item>
            <item>
            <term>sevAttn 2</term>
            <term>Reserved for future use.</term>
            </item>
            <item>
            <term>sevFatal 3</term>
            <term>Reserved for future use.</term>
            </item>
            </list>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGEHLP_CBA_EVENT.code">
            <summary>This member is reserved for future use.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGEHLP_CBA_EVENT.desc">
            <summary>A text description of the error.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGEHLP_CBA_EVENT.object">
            <summary>This member is reserved for future use.</summary>
        </member>
        <member name="T:Vanara.PInvoke.DbgHelp.IMAGEHLP_CBA_READ_MEMORY">
            <summary>Contains information about a memory read operation.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGEHLP_CBA_READ_MEMORY.addr">
            <summary>The address to be read.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGEHLP_CBA_READ_MEMORY.buf">
            <summary>A pointer to a buffer that receives the memory read.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGEHLP_CBA_READ_MEMORY.bytes">
            <summary>The number of bytes to read.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGEHLP_CBA_READ_MEMORY.bytesread">
            <summary>A pointer to a variable that receives the number of bytes read.</summary>
        </member>
        <member name="T:Vanara.PInvoke.DbgHelp.IMAGEHLP_DEFERRED_SYMBOL_LOAD">
            <summary>Contains information about a deferred symbol load.</summary>
            <remarks>
            <para>
            This structure supersedes the <c>IMAGEHLP_DEFERRED_SYMBOL_LOAD</c> structure. For more information, see Updated Platform
            Support. <c>IMAGEHLP_DEFERRED_SYMBOL_LOAD</c> is defined as follows in DbgHelp.h.
            </para>
            <para>
            <code>#if !defined(_IMAGEHLP_SOURCE_) &amp;&amp; defined(_IMAGEHLP64) #define IMAGEHLP_DEFERRED_SYMBOL_LOAD IMAGEHLP_DEFERRED_SYMBOL_LOAD64 #define PIMAGEHLP_DEFERRED_SYMBOL_LOAD PIMAGEHLP_DEFERRED_SYMBOL_LOAD64 #else typedef struct _IMAGEHLP_DEFERRED_SYMBOL_LOAD { DWORD SizeOfStruct; DWORD BaseOfImage; DWORD CheckSum; DWORD TimeDateStamp; CHAR FileName[MAX_PATH]; BOOLEAN Reparse; HANDLE hFile; } IMAGEHLP_DEFERRED_SYMBOL_LOAD, *PIMAGEHLP_DEFERRED_SYMBOL_LOAD; #endif</code>
            </para>
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGEHLP_DEFERRED_SYMBOL_LOAD.SizeOfStruct">
            <summary>
            The size of the structure, in bytes. The caller must set this member to
            <c>sizeof(IMAGEHLP_DEFERRED_SYMBOL_LOAD64)</c>
            .
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGEHLP_DEFERRED_SYMBOL_LOAD.BaseOfImage">
            <summary>The base virtual address where the image is loaded.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGEHLP_DEFERRED_SYMBOL_LOAD.CheckSum">
            <summary>The computed checksum of the image. This value can be zero.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGEHLP_DEFERRED_SYMBOL_LOAD.TimeDateStamp">
            <summary>
            The date and timestamp value. The value is represented in the number of seconds elapsed since midnight (00:00:00), January
            1, 1970, Universal Coordinated Time, according to the system clock. The timestamp can be printed using the C run-time (CRT)
            function <c>ctime</c>.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGEHLP_DEFERRED_SYMBOL_LOAD.FileName">
            <summary>The image name. The name may or may not contain a full path.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGEHLP_DEFERRED_SYMBOL_LOAD.Reparse">
            <summary>If this member is <c>TRUE</c>, the operation should be performed again. Otherwise, it should not.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGEHLP_DEFERRED_SYMBOL_LOAD.hFile">
            <summary>
            A handle to a file. This member is used with <c>CBA_DEFERRED_SYMBOL_LOAD_PARTIAL</c> and
            <c>IMAGEHLP_DEFERRED_SYMBOL_LOAD_FAILURE</c> callbacks.
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.DbgHelp.IMAGEHLP_DEFERRED_SYMBOL_LOAD64">
            <summary>Contains information about a deferred symbol load.</summary>
            <remarks>
            <para>
            This structure supersedes the <c>IMAGEHLP_DEFERRED_SYMBOL_LOAD</c> structure. For more information, see Updated Platform
            Support. <c>IMAGEHLP_DEFERRED_SYMBOL_LOAD</c> is defined as follows in DbgHelp.h.
            </para>
            <para>
            <code>#if !defined(_IMAGEHLP_SOURCE_) &amp;&amp; defined(_IMAGEHLP64) #define IMAGEHLP_DEFERRED_SYMBOL_LOAD IMAGEHLP_DEFERRED_SYMBOL_LOAD64 #define PIMAGEHLP_DEFERRED_SYMBOL_LOAD PIMAGEHLP_DEFERRED_SYMBOL_LOAD64 #else typedef struct _IMAGEHLP_DEFERRED_SYMBOL_LOAD { DWORD SizeOfStruct; DWORD BaseOfImage; DWORD CheckSum; DWORD TimeDateStamp; CHAR FileName[MAX_PATH]; BOOLEAN Reparse; HANDLE hFile; } IMAGEHLP_DEFERRED_SYMBOL_LOAD, *PIMAGEHLP_DEFERRED_SYMBOL_LOAD; #endif</code>
            </para>
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGEHLP_DEFERRED_SYMBOL_LOAD64.SizeOfStruct">
            <summary>
            The size of the structure, in bytes. The caller must set this member to
            <c>sizeof(IMAGEHLP_DEFERRED_SYMBOL_LOAD64)</c>
            .
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGEHLP_DEFERRED_SYMBOL_LOAD64.BaseOfImage">
            <summary>The base virtual address where the image is loaded.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGEHLP_DEFERRED_SYMBOL_LOAD64.CheckSum">
            <summary>The computed checksum of the image. This value can be zero.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGEHLP_DEFERRED_SYMBOL_LOAD64.TimeDateStamp">
            <summary>
            The date and timestamp value. The value is represented in the number of seconds elapsed since midnight (00:00:00), January
            1, 1970, Universal Coordinated Time, according to the system clock. The timestamp can be printed using the C run-time (CRT)
            function <c>ctime</c>.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGEHLP_DEFERRED_SYMBOL_LOAD64.FileName">
            <summary>The image name. The name may or may not contain a full path.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGEHLP_DEFERRED_SYMBOL_LOAD64.Reparse">
            <summary>If this member is <c>TRUE</c>, the operation should be performed again. Otherwise, it should not.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGEHLP_DEFERRED_SYMBOL_LOAD64.hFile">
            <summary>
            A handle to a file. This member is used with <c>CBA_DEFERRED_SYMBOL_LOAD_PARTIAL</c> and
            <c>IMAGEHLP_DEFERRED_SYMBOL_LOAD_FAILURE</c> callbacks.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGEHLP_DEFERRED_SYMBOL_LOAD64.Flags">
            <summary>
            <para>This member can be one of the following values.</para>
            <para>DSLFLAG_MISMATCHED_DBG (0x2)</para>
            <para>DSLFLAG_MISMATCHED_PDB (0x1)</para>
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.DbgHelp.IMAGEHLP_DEFERRED_SYMBOL_LOADW64">
            <summary>Contains information about a deferred symbol load.</summary>
            <remarks>
            <para>
            This structure supersedes the <c>IMAGEHLP_DEFERRED_SYMBOL_LOAD</c> structure. For more information, see Updated Platform
            Support. <c>IMAGEHLP_DEFERRED_SYMBOL_LOAD</c> is defined as follows in DbgHelp.h.
            </para>
            <para>
            <code>#if !defined(_IMAGEHLP_SOURCE_) &amp;&amp; defined(_IMAGEHLP64) #define IMAGEHLP_DEFERRED_SYMBOL_LOAD IMAGEHLP_DEFERRED_SYMBOL_LOAD64 #define PIMAGEHLP_DEFERRED_SYMBOL_LOAD PIMAGEHLP_DEFERRED_SYMBOL_LOAD64 #else typedef struct _IMAGEHLP_DEFERRED_SYMBOL_LOAD { DWORD SizeOfStruct; DWORD BaseOfImage; DWORD CheckSum; DWORD TimeDateStamp; CHAR FileName[MAX_PATH]; BOOLEAN Reparse; HANDLE hFile; } IMAGEHLP_DEFERRED_SYMBOL_LOAD, *PIMAGEHLP_DEFERRED_SYMBOL_LOAD; #endif</code>
            </para>
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGEHLP_DEFERRED_SYMBOL_LOADW64.SizeOfStruct">
            <summary>
            The size of the structure, in bytes. The caller must set this member to
            <c>sizeof(IMAGEHLP_DEFERRED_SYMBOL_LOAD64)</c>
            .
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGEHLP_DEFERRED_SYMBOL_LOADW64.BaseOfImage">
            <summary>The base virtual address where the image is loaded.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGEHLP_DEFERRED_SYMBOL_LOADW64.CheckSum">
            <summary>The computed checksum of the image. This value can be zero.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGEHLP_DEFERRED_SYMBOL_LOADW64.TimeDateStamp">
            <summary>
            The date and timestamp value. The value is represented in the number of seconds elapsed since midnight (00:00:00), January
            1, 1970, Universal Coordinated Time, according to the system clock. The timestamp can be printed using the C run-time (CRT)
            function <c>ctime</c>.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGEHLP_DEFERRED_SYMBOL_LOADW64.FileName">
            <summary>The image name. The name may or may not contain a full path.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGEHLP_DEFERRED_SYMBOL_LOADW64.Reparse">
            <summary>If this member is <c>TRUE</c>, the operation should be performed again. Otherwise, it should not.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGEHLP_DEFERRED_SYMBOL_LOADW64.hFile">
            <summary>
            A handle to a file. This member is used with <c>CBA_DEFERRED_SYMBOL_LOAD_PARTIAL</c> and
            <c>IMAGEHLP_DEFERRED_SYMBOL_LOAD_FAILURE</c> callbacks.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGEHLP_DEFERRED_SYMBOL_LOADW64.Flags">
            <summary>
            <para>This member can be one of the following values.</para>
            <para>DSLFLAG_MISMATCHED_DBG (0x2)</para>
            <para>DSLFLAG_MISMATCHED_PDB (0x1)</para>
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.DbgHelp.IMAGEHLP_DUPLICATE_SYMBOL64">
            <summary>Contains duplicate symbol information.</summary>
            <remarks>
            <para>
            This structure supersedes the <c>IMAGEHLP_DUPLICATE_SYMBOL</c> structure. For more information, see Updated Platform Support.
            <c>IMAGEHLP_DUPLICATE_SYMBOL</c> is defined as follows in DbgHelp.h.
            </para>
            <para>
            <code>#if !defined(_IMAGEHLP_SOURCE_) &amp;&amp; defined(_IMAGEHLP64) #define IMAGEHLP_DUPLICATE_SYMBOL IMAGEHLP_DUPLICATE_SYMBOL64 #define PIMAGEHLP_DUPLICATE_SYMBOL PIMAGEHLP_DUPLICATE_SYMBOL64 #else typedef struct _IMAGEHLP_DUPLICATE_SYMBOL { DWORD SizeOfStruct; DWORD NumberOfDups; PIMAGEHLP_SYMBOL Symbol; DWORD SelectedSymbol; } IMAGEHLP_DUPLICATE_SYMBOL, *PIMAGEHLP_DUPLICATE_SYMBOL; #endif</code>
            </para>
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGEHLP_DUPLICATE_SYMBOL64.SizeOfStruct">
            <summary>
            The size of the structure, in bytes. The caller must set this member to
            <c>sizeof(IMAGEHLP_DUPLICATE_SYMBOL64)</c>
            .
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGEHLP_DUPLICATE_SYMBOL64.NumberOfDups">
            <summary>The number of duplicate symbols.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGEHLP_DUPLICATE_SYMBOL64.Symbol">
            <summary>
            A pointer to an array of symbols ( IMAGEHLP_SYMBOL64 structures). The number of entries in the array is specified by the
            <c>NumberOfDups</c> member.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGEHLP_DUPLICATE_SYMBOL64.SelectedSymbol">
            <summary>The index into the symbol array for the selected symbol.</summary>
        </member>
        <member name="T:Vanara.PInvoke.DbgHelp.IMAGEHLP_GET_TYPE_INFO_PARAMS">
            <summary>Contains type information for a module.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGEHLP_GET_TYPE_INFO_PARAMS.SizeOfStruct">
            <summary>The size of this structure, in bytes.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGEHLP_GET_TYPE_INFO_PARAMS.Flags">
            <summary>
            <para>This member can be one of the following values.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>IMAGEHLP_GET_TYPE_INFO_CHILDREN 0x00000002</term>
            <term>Retrieve information about the children of the specified types, not the types themselves.</term>
            </item>
            <item>
            <term>IMAGEHLP_GET_TYPE_INFO_UNCACHED 0x00000001</term>
            <term>
            Do not cache the data for later retrievals. It is good to use this flag if you will not be requesting the information again.
            </term>
            </item>
            </list>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGEHLP_GET_TYPE_INFO_PARAMS.NumIds">
            <summary>The number of elements specified in the <c>TypeIds</c> array.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGEHLP_GET_TYPE_INFO_PARAMS.TypeIds">
            <summary>An array of type indexes.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGEHLP_GET_TYPE_INFO_PARAMS.TagFilter">
            <summary>
            The filter for return values. For example, set this member to 1 &lt;&lt; <c>SymTagData</c> to return only results with a
            symbol tag of <c>SymTagData</c>. For a list of tags, see the <c>SymTagEnum</c> type defined in Dbghelp.h
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGEHLP_GET_TYPE_INFO_PARAMS.NumReqs">
            <summary>
            The number of elements specified in the arrays specified in the <c>ReqKinds</c>, <c>ReqOffsets</c>, and <c>ReqSizes</c>
            members. These arrays must be the same size.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGEHLP_GET_TYPE_INFO_PARAMS.ReqKinds">
            <summary>
            An array of information types to be requested. Each element is one of the enumeration values in the
            IMAGEHLP_SYMBOL_TYPE_INFO enumeration type.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGEHLP_GET_TYPE_INFO_PARAMS.ReqOffsets">
            <summary>
            An array of offsets that specify where to store the data for each request within each element of <c>Buffer</c> array.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGEHLP_GET_TYPE_INFO_PARAMS.ReqSizes">
            <summary>The size of each data request, in bytes. The required sizes are described in IMAGEHLP_SYMBOL_TYPE_INFO.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGEHLP_GET_TYPE_INFO_PARAMS.ReqStride">
            <summary>The number of bytes for each element in the <c>Buffer</c> array.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGEHLP_GET_TYPE_INFO_PARAMS.BufferSize">
            <summary>The size of the <c>Buffer</c> array, in bytes.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGEHLP_GET_TYPE_INFO_PARAMS.Buffer">
            <summary>
            An array of records used for storing query results. Each record is separated by <c>ReqStride</c> bytes. Each type for which
            data is to be retrieved requires one record in the array. Within each record, there are <c>NumReqs</c> pieces of data stored
            as the result of individual queries. The data is stored within the record according to the offsets specified in
            <c>ReqOffsets</c>. The format of the data depends on the value of the <c>ReqKinds</c> member in use.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGEHLP_GET_TYPE_INFO_PARAMS.EntriesMatched">
            <summary>The number of type entries that match the filter.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGEHLP_GET_TYPE_INFO_PARAMS.EntriesFilled">
            <summary>The number of elements in the <c>Buffer</c> array that received results.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGEHLP_GET_TYPE_INFO_PARAMS.TagsFound">
            <summary>A bitmask indicating all tag bits encountered during the search operation.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGEHLP_GET_TYPE_INFO_PARAMS.AllReqsValid">
            <summary>A bitmask indicate the bit-wise AND of all <c>ReqsValid</c> fields.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGEHLP_GET_TYPE_INFO_PARAMS.NumReqsValid">
            <summary>The size of <c>ReqsValid</c>, in elements.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGEHLP_GET_TYPE_INFO_PARAMS.ReqsValid">
            <summary>
            A bitmask indexed by <c>Buffer</c> element index that indicates which request data is valid. This member can be <c>NULL</c>.
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.DbgHelp.IMAGEHLP_LINE">
            <summary>Represents a source file line.</summary>
            <remarks>
            <para>
            This structure supersedes the <c>IMAGEHLP_LINE</c> structure. For more information, see Updated Platform Support.
            <c>IMAGEHLP_LINE</c> is defined as follows in DbgHelp.h.
            </para>
            <para>
            <code>#if !defined(_IMAGEHLP_SOURCE_) &amp;&amp; defined(_IMAGEHLP64) #define IMAGEHLP_LINE IMAGEHLP_LINE64 #define PIMAGEHLP_LINE PIMAGEHLP_LINE64 #else typedef struct _IMAGEHLP_LINE { DWORD SizeOfStruct; PVOID Key; DWORD LineNumber; PCHAR FileName; DWORD Address; } IMAGEHLP_LINE, *PIMAGEHLP_LINE; typedef struct _IMAGEHLP_LINEW { DWORD SizeOfStruct; PVOID Key; DWORD LineNumber; PCHAR FileName; DWORD64 Address; } IMAGEHLP_LINEW, *PIMAGEHLP_LINEW; #endif</code>
            </para>
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGEHLP_LINE.SizeOfStruct">
            <summary>
            The size of the structure, in bytes. The caller must set this member to
            <c>sizeof(IMAGEHLP_LINE64)</c>
            .
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGEHLP_LINE.Key">
            <summary>This member is reserved for use by the operating system.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGEHLP_LINE.LineNumber">
            <summary>The line number in the file.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGEHLP_LINE.FileName">
            <summary>The name of the file, including the full path.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGEHLP_LINE.Address">
            <summary>The address of the first instruction in the line.</summary>
        </member>
        <member name="T:Vanara.PInvoke.DbgHelp.IMAGEHLP_LINE64">
            <summary>Represents a source file line.</summary>
            <remarks>
            <para>
            This structure supersedes the <c>IMAGEHLP_LINE</c> structure. For more information, see Updated Platform Support.
            <c>IMAGEHLP_LINE</c> is defined as follows in DbgHelp.h.
            </para>
            <para>
            <code>#if !defined(_IMAGEHLP_SOURCE_) &amp;&amp; defined(_IMAGEHLP64) #define IMAGEHLP_LINE IMAGEHLP_LINE64 #define PIMAGEHLP_LINE PIMAGEHLP_LINE64 #else typedef struct _IMAGEHLP_LINE { DWORD SizeOfStruct; PVOID Key; DWORD LineNumber; PCHAR FileName; DWORD Address; } IMAGEHLP_LINE, *PIMAGEHLP_LINE; typedef struct _IMAGEHLP_LINEW { DWORD SizeOfStruct; PVOID Key; DWORD LineNumber; PCHAR FileName; DWORD64 Address; } IMAGEHLP_LINEW, *PIMAGEHLP_LINEW; #endif</code>
            </para>
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGEHLP_LINE64.SizeOfStruct">
            <summary>
            The size of the structure, in bytes. The caller must set this member to
            <c>sizeof(IMAGEHLP_LINE64)</c>
            .
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGEHLP_LINE64.Key">
            <summary>This member is reserved for use by the operating system.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGEHLP_LINE64.LineNumber">
            <summary>The line number in the file.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGEHLP_LINE64.FileName">
            <summary>The name of the file, including the full path.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGEHLP_LINE64.Address">
            <summary>The address of the first instruction in the line.</summary>
        </member>
        <member name="T:Vanara.PInvoke.DbgHelp.IMAGEHLP_MODULE">
            <summary>Contains module information.</summary>
            <remarks>
            <para>
            This structure supersedes the <c>IMAGEHLP_MODULE</c> structure. For more information, see Updated Platform Support.
            <c>IMAGEHLP_MODULE</c> is defined as follows in DbgHelp.h.
            </para>
            <para>
            <code>#if !defined(_IMAGEHLP_SOURCE_) &amp;&amp; defined(_IMAGEHLP64) #define IMAGEHLP_MODULE IMAGEHLP_MODULE64 #define PIMAGEHLP_MODULE PIMAGEHLP_MODULE64 #define IMAGEHLP_MODULEW IMAGEHLP_MODULEW64 #define PIMAGEHLP_MODULEW PIMAGEHLP_MODULEW64 #else typedef struct _IMAGEHLP_MODULE { DWORD SizeOfStruct; DWORD BaseOfImage; DWORD ImageSize; DWORD TimeDateStamp; DWORD CheckSum; DWORD NumSyms; SYM_TYPE SymType; CHAR ModuleName[32]; CHAR ImageName[256]; CHAR LoadedImageName[256]; } IMAGEHLP_MODULE, *PIMAGEHLP_MODULE; typedef struct _IMAGEHLP_MODULEW { DWORD SizeOfStruct; DWORD BaseOfImage; DWORD ImageSize; DWORD TimeDateStamp; DWORD CheckSum; DWORD NumSyms; SYM_TYPE SymType; WCHAR ModuleName[32]; WCHAR ImageName[256]; WCHAR LoadedImageName[256]; } IMAGEHLP_MODULEW, *PIMAGEHLP_MODULEW; #endif</code>
            </para>
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGEHLP_MODULE.SizeOfStruct">
            <summary>
            The size of the structure, in bytes. The caller must set this member to
            <c>sizeof(IMAGEHLP_MODULE64)</c>
            .
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGEHLP_MODULE.BaseOfImage">
            <summary>The base virtual address where the image is loaded.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGEHLP_MODULE.ImageSize">
            <summary>The size of the image, in bytes.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGEHLP_MODULE.TimeDateStamp">
            <summary>
            The date and timestamp value. The value is represented in the number of seconds elapsed since midnight (00:00:00), January
            1, 1970, Universal Coordinated Time, according to the system clock. The timestamp can be printed using the C run-time (CRT)
            function <c>ctime</c>.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGEHLP_MODULE.CheckSum">
            <summary>The checksum of the image. This value can be zero.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGEHLP_MODULE.NumSyms">
            <summary>
            The number of symbols in the symbol table. The value of this parameter is not meaningful when <c>SymPdb</c> is specified as
            the value of the SymType parameter.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGEHLP_MODULE.SymType">
            <summary>
            <para>The type of symbols that are loaded. This member can be one of the following values.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>SymCoff</term>
            <term>COFF symbols.</term>
            </item>
            <item>
            <term>SymCv</term>
            <term>CodeView symbols.</term>
            </item>
            <item>
            <term>SymDeferred</term>
            <term>Symbol loading deferred.</term>
            </item>
            <item>
            <term>SymDia</term>
            <term>DIA symbols.</term>
            </item>
            <item>
            <term>SymExport</term>
            <term>Symbols generated from a DLL export table.</term>
            </item>
            <item>
            <term>SymNone</term>
            <term>No symbols are loaded.</term>
            </item>
            <item>
            <term>SymPdb</term>
            <term>PDB symbols.</term>
            </item>
            <item>
            <term>SymSym</term>
            <term>.sym file.</term>
            </item>
            <item>
            <term>SymVirtual</term>
            <term>The virtual module created by SymLoadModuleEx with SLMFLAG_VIRTUAL.</term>
            </item>
            </list>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGEHLP_MODULE.ModuleName">
            <summary>The module name.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGEHLP_MODULE.ImageName">
            <summary>The image name. The name may or may not contain a full path.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGEHLP_MODULE.LoadedImageName">
            <summary>The full path and file name of the file from which symbols were loaded.</summary>
        </member>
        <member name="T:Vanara.PInvoke.DbgHelp.IMAGEHLP_MODULE64">
            <summary>Contains module information.</summary>
            <remarks>
            <para>
            This structure supersedes the <c>IMAGEHLP_MODULE</c> structure. For more information, see Updated Platform Support.
            <c>IMAGEHLP_MODULE</c> is defined as follows in DbgHelp.h.
            </para>
            <para>
            <code>#if !defined(_IMAGEHLP_SOURCE_) &amp;&amp; defined(_IMAGEHLP64) #define IMAGEHLP_MODULE IMAGEHLP_MODULE64 #define PIMAGEHLP_MODULE PIMAGEHLP_MODULE64 #define IMAGEHLP_MODULEW IMAGEHLP_MODULEW64 #define PIMAGEHLP_MODULEW PIMAGEHLP_MODULEW64 #else typedef struct _IMAGEHLP_MODULE { DWORD SizeOfStruct; DWORD BaseOfImage; DWORD ImageSize; DWORD TimeDateStamp; DWORD CheckSum; DWORD NumSyms; SYM_TYPE SymType; CHAR ModuleName[32]; CHAR ImageName[256]; CHAR LoadedImageName[256]; } IMAGEHLP_MODULE, *PIMAGEHLP_MODULE; typedef struct _IMAGEHLP_MODULEW { DWORD SizeOfStruct; DWORD BaseOfImage; DWORD ImageSize; DWORD TimeDateStamp; DWORD CheckSum; DWORD NumSyms; SYM_TYPE SymType; WCHAR ModuleName[32]; WCHAR ImageName[256]; WCHAR LoadedImageName[256]; } IMAGEHLP_MODULEW, *PIMAGEHLP_MODULEW; #endif</code>
            </para>
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGEHLP_MODULE64.SizeOfStruct">
            <summary>
            The size of the structure, in bytes. The caller must set this member to
            <c>sizeof(IMAGEHLP_MODULE64)</c>
            .
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGEHLP_MODULE64.BaseOfImage">
            <summary>The base virtual address where the image is loaded.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGEHLP_MODULE64.ImageSize">
            <summary>The size of the image, in bytes.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGEHLP_MODULE64.TimeDateStamp">
            <summary>
            The date and timestamp value. The value is represented in the number of seconds elapsed since midnight (00:00:00), January
            1, 1970, Universal Coordinated Time, according to the system clock. The timestamp can be printed using the C run-time (CRT)
            function <c>ctime</c>.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGEHLP_MODULE64.CheckSum">
            <summary>The checksum of the image. This value can be zero.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGEHLP_MODULE64.NumSyms">
            <summary>
            The number of symbols in the symbol table. The value of this parameter is not meaningful when <c>SymPdb</c> is specified as
            the value of the SymType parameter.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGEHLP_MODULE64.SymType">
            <summary>
            <para>The type of symbols that are loaded. This member can be one of the following values.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>SymCoff</term>
            <term>COFF symbols.</term>
            </item>
            <item>
            <term>SymCv</term>
            <term>CodeView symbols.</term>
            </item>
            <item>
            <term>SymDeferred</term>
            <term>Symbol loading deferred.</term>
            </item>
            <item>
            <term>SymDia</term>
            <term>DIA symbols.</term>
            </item>
            <item>
            <term>SymExport</term>
            <term>Symbols generated from a DLL export table.</term>
            </item>
            <item>
            <term>SymNone</term>
            <term>No symbols are loaded.</term>
            </item>
            <item>
            <term>SymPdb</term>
            <term>PDB symbols.</term>
            </item>
            <item>
            <term>SymSym</term>
            <term>.sym file.</term>
            </item>
            <item>
            <term>SymVirtual</term>
            <term>The virtual module created by SymLoadModuleEx with SLMFLAG_VIRTUAL.</term>
            </item>
            </list>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGEHLP_MODULE64.ModuleName">
            <summary>The module name.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGEHLP_MODULE64.ImageName">
            <summary>The image name. The name may or may not contain a full path.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGEHLP_MODULE64.LoadedImageName">
            <summary>The full path and file name of the file from which symbols were loaded.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGEHLP_MODULE64.LoadedPdbName">
            <summary>The full path and file name of the .pdb file.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGEHLP_MODULE64.CVSig">
            <summary>The signature of the CV record in the debug directories.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGEHLP_MODULE64.CVData">
            <summary>The contents of the CV record.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGEHLP_MODULE64.PdbSig">
            <summary>The PDB signature.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGEHLP_MODULE64.PdbSig70">
            <summary>The PDB signature (Visual C/C++ 7.0 and later)</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGEHLP_MODULE64.PdbAge">
            <summary>The DBI age of PDB.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGEHLP_MODULE64.PdbUnmatched">
            <summary>A value that indicates whether the loaded PDB is unmatched.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGEHLP_MODULE64.DbgUnmatched">
            <summary>A value that indicates whether the loaded DBG is unmatched.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGEHLP_MODULE64.LineNumbers">
            <summary>A value that indicates whether line number information is available.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGEHLP_MODULE64.GlobalSymbols">
            <summary>A value that indicates whether symbol information is available.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGEHLP_MODULE64.TypeInfo">
            <summary>A value that indicates whether type information is available.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGEHLP_MODULE64.SourceIndexed">
            <summary>
            <para>A value that indicates whether the .pdb supports the source server.</para>
            <para><c>DbgHelp 6.1 and earlier:</c> This member is not supported.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGEHLP_MODULE64.Publics">
            <summary>
            <para>A value that indicates whether the module contains public symbols.</para>
            <para><c>DbgHelp 6.1 and earlier:</c> This member is not supported.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGEHLP_MODULE64.MachineType">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGEHLP_MODULE64.Reserved">
            <summary/>
        </member>
        <member name="T:Vanara.PInvoke.DbgHelp.IMAGEHLP_STACK_FRAME">
            <summary>Contains the stack frame information. This structure is used with the SymSetContext function.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGEHLP_STACK_FRAME.InstructionOffset">
            <summary>
            <para>The program counter.</para>
            <para><c>x86:</c> The program counter is EIP.</para>
            <para>
            <c>Intel Itanium:</c> The program counter is a combination of the bundle address and a slot indicator of 0, 4, or 8 for the
            slot within the bundle.
            </para>
            <para><c>x64:</c> The program counter is RIP.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGEHLP_STACK_FRAME.ReturnOffset">
            <summary>The return address.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGEHLP_STACK_FRAME.FrameOffset">
            <summary>
            <para>The frame pointer.</para>
            <para><c>x86:</c> The frame pointer is EBP.</para>
            <para><c>Intel Itanium:</c> There is no frame pointer, but <c>AddrBStore</c> is used.</para>
            <para><c>x64:</c> The frame pointer is RBP. AMD-64 does not always use this value.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGEHLP_STACK_FRAME.StackOffset">
            <summary>
            <para>The stack pointer.</para>
            <para><c>x86:</c> The stack pointer is ESP.</para>
            <para><c>Intel Itanium:</c> The stack pointer is SP.</para>
            <para><c>x64:</c> The stack pointer is RSP.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGEHLP_STACK_FRAME.BackingStoreOffset">
            <summary><c>Intel Itanium:</c> The backing store address.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGEHLP_STACK_FRAME.FuncTableEntry">
            <summary><c>x86:</c> An FPO_DATA structure. If there is no function table entry, this member is <c>NULL</c>.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGEHLP_STACK_FRAME.Params">
            <summary>The possible arguments to the function.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGEHLP_STACK_FRAME.Reserved">
            <summary>This member is reserved for system use.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGEHLP_STACK_FRAME.Virtual">
            <summary>If this is a virtual frame, this member is <c>TRUE</c>. Otherwise, this member is <c>FALSE</c>.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGEHLP_STACK_FRAME.Reserved2">
            <summary>This member is reserved for system use.</summary>
        </member>
        <member name="T:Vanara.PInvoke.DbgHelp.IMAGEHLP_SYMBOL">
            <summary>Contains symbol information.</summary>
            <remarks>
            <para>
            This structure supersedes the <c>IMAGEHLP_SYMBOL</c> structure. For more information, see Updated Platform Support.
            <c>IMAGEHLP_SYMBOL</c> is defined as follows in DbgHelp.h.
            </para>
            <para>
            <code>#if !defined(_IMAGEHLP_SOURCE_) &amp;&amp; defined(_IMAGEHLP64) #define IMAGEHLP_SYMBOL IMAGEHLP_SYMBOL64 #define PIMAGEHLP_SYMBOL PIMAGEHLP_SYMBOL64 #else typedef struct _IMAGEHLP_SYMBOL { DWORD SizeOfStruct; DWORD Address; DWORD Size; DWORD Flags; DWORD MaxNameLength; CHAR Name[1]; } IMAGEHLP_SYMBOL, *PIMAGEHLP_SYMBOL; #endif</code>
            </para>
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGEHLP_SYMBOL.SizeOfStruct">
            <summary>The size of the structure, in bytes. The caller must set this member to <c>sizeof(IMAGEHLP_SYMBOL)</c>.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGEHLP_SYMBOL.Address">
            <summary>The virtual address for the symbol.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGEHLP_SYMBOL.Size">
            <summary>The size of the symbol, in bytes. This value is a best guess and can be zero.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGEHLP_SYMBOL.Flags">
            <summary>This member is reserved for use by the operating system.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGEHLP_SYMBOL.MaxNameLength">
            <summary>
            The maximum length of the string that the <c>Name</c> member can contain, in characters, not including the null-terminating
            character. Because symbol names can vary in length, this data structure is allocated by the caller. This member is used so
            the library knows how much memory is available for use by the symbol name.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGEHLP_SYMBOL.Name">
            <summary>
            The decorated or undecorated symbol name. If the buffer is not large enough for the complete name, it is truncated to
            <c>MaxNameLength</c> characters, including the null-terminating character.
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.DbgHelp.SafeAnysizeStringMarshaler`1">
            <summary>
            A marshaler implementation of <see cref="T:Vanara.InteropServices.IVanaraMarshaler"/> that pulls a full string from a structure with a last field having
            one character.
            </summary>
            <typeparam name="T">The structure type to be marshaled.</typeparam>
            <seealso cref="T:Vanara.InteropServices.IVanaraMarshaler"/>
        </member>
        <member name="M:Vanara.PInvoke.DbgHelp.SafeAnysizeStringMarshaler`1.#ctor(System.String)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.PInvoke.DbgHelp.SafeAnysizeStringMarshaler`1"/> class.</summary>
            <param name="cookie">
            The name of the field in <typeparamref name="T"/> that specifies the string length of the last field of <typeparamref name="T"/>.
            </param>
        </member>
        <member name="M:Vanara.PInvoke.DbgHelp.SafeAnysizeStringMarshaler`1.GetNativeSize">
            <summary>Gets the size of the native data.</summary>
            <returns>
            The size, in bytes, of the base object in memory. This should return the equivalent of the sizeof(X) function in C/C++.
            </returns>
        </member>
        <member name="T:Vanara.PInvoke.DbgHelp.IMAGEHLP_SYMBOL64">
            <summary>Contains symbol information.</summary>
            <remarks>
            <para>
            This structure supersedes the <c>IMAGEHLP_SYMBOL</c> structure. For more information, see Updated Platform Support.
            <c>IMAGEHLP_SYMBOL</c> is defined as follows in DbgHelp.h.
            </para>
            <para>
            <code>#if !defined(_IMAGEHLP_SOURCE_) &amp;&amp; defined(_IMAGEHLP64) #define IMAGEHLP_SYMBOL IMAGEHLP_SYMBOL64 #define PIMAGEHLP_SYMBOL PIMAGEHLP_SYMBOL64 #else typedef struct _IMAGEHLP_SYMBOL { DWORD SizeOfStruct; DWORD Address; DWORD Size; DWORD Flags; DWORD MaxNameLength; CHAR Name[1]; } IMAGEHLP_SYMBOL, *PIMAGEHLP_SYMBOL; #endif</code>
            </para>
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGEHLP_SYMBOL64.SizeOfStruct">
            <summary>The size of the structure, in bytes. The caller must set this member to <c>sizeof(IMAGEHLP_SYMBOL64)</c>.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGEHLP_SYMBOL64.Address">
            <summary>The virtual address for the symbol.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGEHLP_SYMBOL64.Size">
            <summary>The size of the symbol, in bytes. This value is a best guess and can be zero.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGEHLP_SYMBOL64.Flags">
            <summary>This member is reserved for use by the operating system.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGEHLP_SYMBOL64.MaxNameLength">
            <summary>
            The maximum length of the string that the <c>Name</c> member can contain, in characters, not including the null-terminating
            character. Because symbol names can vary in length, this data structure is allocated by the caller. This member is used so
            the library knows how much memory is available for use by the symbol name.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGEHLP_SYMBOL64.Name">
            <summary>
            The decorated or undecorated symbol name. If the buffer is not large enough for the complete name, it is truncated to
            <c>MaxNameLength</c> characters, including the null-terminating character.
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.DbgHelp.IMAGEHLP_SYMBOLW">
            <summary>Contains symbol information.</summary>
            <remarks>
            <para>
            This structure supersedes the <c>IMAGEHLP_SYMBOL</c> structure. For more information, see Updated Platform Support.
            <c>IMAGEHLP_SYMBOL</c> is defined as follows in DbgHelp.h.
            </para>
            <para>
            <code>#if !defined(_IMAGEHLP_SOURCE_) &amp;&amp; defined(_IMAGEHLP64) #define IMAGEHLP_SYMBOL IMAGEHLP_SYMBOL64 #define PIMAGEHLP_SYMBOL PIMAGEHLP_SYMBOL64 #else typedef struct _IMAGEHLP_SYMBOL { DWORD SizeOfStruct; DWORD Address; DWORD Size; DWORD Flags; DWORD MaxNameLength; CHAR Name[1]; } IMAGEHLP_SYMBOL, *PIMAGEHLP_SYMBOL; #endif</code>
            </para>
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGEHLP_SYMBOLW.SizeOfStruct">
            <summary>The size of the structure, in bytes. The caller must set this member to <c>sizeof(IMAGEHLP_SYMBOLW)</c>.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGEHLP_SYMBOLW.Address">
            <summary>The virtual address for the symbol.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGEHLP_SYMBOLW.Size">
            <summary>The size of the symbol, in bytes. This value is a best guess and can be zero.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGEHLP_SYMBOLW.Flags">
            <summary>This member is reserved for use by the operating system.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGEHLP_SYMBOLW.MaxNameLength">
            <summary>
            The maximum length of the string that the <c>Name</c> member can contain, in characters, not including the null-terminating
            character. Because symbol names can vary in length, this data structure is allocated by the caller. This member is used so
            the library knows how much memory is available for use by the symbol name.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGEHLP_SYMBOLW.Name">
            <summary>
            The decorated or undecorated symbol name. If the buffer is not large enough for the complete name, it is truncated to
            <c>MaxNameLength</c> characters, including the null-terminating character.
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.DbgHelp.IMAGEHLP_SYMBOLW64">
            <summary>Contains symbol information.</summary>
            <remarks>
            <para>
            This structure supersedes the <c>IMAGEHLP_SYMBOL</c> structure. For more information, see Updated Platform Support.
            <c>IMAGEHLP_SYMBOL</c> is defined as follows in DbgHelp.h.
            </para>
            <para>
            <code>#if !defined(_IMAGEHLP_SOURCE_) &amp;&amp; defined(_IMAGEHLP64) #define IMAGEHLP_SYMBOL IMAGEHLP_SYMBOL64 #define PIMAGEHLP_SYMBOL PIMAGEHLP_SYMBOL64 #else typedef struct _IMAGEHLP_SYMBOL { DWORD SizeOfStruct; DWORD Address; DWORD Size; DWORD Flags; DWORD MaxNameLength; CHAR Name[1]; } IMAGEHLP_SYMBOL, *PIMAGEHLP_SYMBOL; #endif</code>
            </para>
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGEHLP_SYMBOLW64.SizeOfStruct">
            <summary>The size of the structure, in bytes. The caller must set this member to <c>sizeof(IMAGEHLP_SYMBOLW64)</c>.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGEHLP_SYMBOLW64.Address">
            <summary>The virtual address for the symbol.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGEHLP_SYMBOLW64.Size">
            <summary>The size of the symbol, in bytes. This value is a best guess and can be zero.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGEHLP_SYMBOLW64.Flags">
            <summary>This member is reserved for use by the operating system.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGEHLP_SYMBOLW64.MaxNameLength">
            <summary>
            The maximum length of the string that the <c>Name</c> member can contain, in characters, not including the null-terminating
            character. Because symbol names can vary in length, this data structure is allocated by the caller. This member is used so
            the library knows how much memory is available for use by the symbol name.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGEHLP_SYMBOLW64.Name">
            <summary>
            The decorated or undecorated symbol name. If the buffer is not large enough for the complete name, it is truncated to
            <c>MaxNameLength</c> characters, including the null-terminating character.
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.DbgHelp.KDHELP">
            <summary>Information that is used by kernel debuggers to trace through user-mode callbacks in a thread's kernel stack.</summary>
            <remarks>
            <para>
            This structure supersedes the <c>KDHELP</c> structure. For more information, see Updated Platform Support. <c>KDHELP</c> is
            defined as follows in Dbghelp.h.
            </para>
            <para>
            <code>#if !defined(_IMAGEHLP_SOURCE_) &amp;&amp; defined(_IMAGEHLP64) #define KDHELP KDHELP64 #define PKDHELP PKDHELP64 #else typedef struct _KDHELP { DWORD Thread; DWORD ThCallbackStack; DWORD NextCallback; DWORD FramePointer; DWORD KiCallUserMode; DWORD KeUserCallbackDispatcher; DWORD SystemRangeStart; DWORD ThCallbackBStore; DWORD KiUserExceptionDispatcher; DWORD StackBase; DWORD StackLimit; DWORD Reserved[5]; } KDHELP, *PKDHELP; #endif</code>
            </para>
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.KDHELP.Thread">
            <summary>The address of the kernel thread object, as provided in the WAIT_STATE_CHANGE packet.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.KDHELP.ThCallbackStack">
            <summary>The offset in the thread object to the pointer to the current callback frame in the kernel stack.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.KDHELP.NextCallback">
            <summary>The address of the next callback frame.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.KDHELP.FramePointer">
            <summary>The address of the saved frame pointer, if applicable.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.KDHELP.KiCallUserMode">
            <summary>The address of the kernel function that calls out to user mode.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.KDHELP.KeUserCallbackDispatcher">
            <summary>The address of the user-mode dispatcher function.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.KDHELP.SystemRangeStart">
            <summary>The lowest kernel-mode address.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.KDHELP.ThCallbackBStore">
            <summary>
            <c>Intel Itanium:</c> The offset in the thread object to a pointer to the current callback backing store frame in the kernel stack.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.KDHELP.KiUserExceptionDispatcher">
            <summary>
            <para>The address of the user-mode exception dispatcher function.</para>
            <para><c>DbgHelp 6.1 and earlier:</c> This member is not supported.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.KDHELP.StackBase">
            <summary>The address of the stack base.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.KDHELP.StackLimit">
            <summary>The stack limit.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.KDHELP.Reserved0">
            <summary>This member is reserved for use by the operating system.</summary>
        </member>
        <member name="T:Vanara.PInvoke.DbgHelp.KDHELP64">
            <summary>Information that is used by kernel debuggers to trace through user-mode callbacks in a thread's kernel stack.</summary>
            <remarks>
            <para>
            This structure supersedes the <c>KDHELP</c> structure. For more information, see Updated Platform Support. <c>KDHELP</c> is
            defined as follows in Dbghelp.h.
            </para>
            <para>
            <code>#if !defined(_IMAGEHLP_SOURCE_) &amp;&amp; defined(_IMAGEHLP64) #define KDHELP KDHELP64 #define PKDHELP PKDHELP64 #else typedef struct _KDHELP { DWORD Thread; DWORD ThCallbackStack; DWORD NextCallback; DWORD FramePointer; DWORD KiCallUserMode; DWORD KeUserCallbackDispatcher; DWORD SystemRangeStart; DWORD ThCallbackBStore; DWORD KiUserExceptionDispatcher; DWORD StackBase; DWORD StackLimit; DWORD Reserved[5]; } KDHELP, *PKDHELP; #endif</code>
            </para>
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.KDHELP64.Thread">
            <summary>The address of the kernel thread object, as provided in the WAIT_STATE_CHANGE packet.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.KDHELP64.ThCallbackStack">
            <summary>The offset in the thread object to the pointer to the current callback frame in the kernel stack.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.KDHELP64.ThCallbackBStore">
            <summary>
            <c>Intel Itanium:</c> The offset in the thread object to a pointer to the current callback backing store frame in the kernel stack.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.KDHELP64.NextCallback">
            <summary>The address of the next callback frame.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.KDHELP64.FramePointer">
            <summary>The address of the saved frame pointer, if applicable.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.KDHELP64.KiCallUserMode">
            <summary>The address of the kernel function that calls out to user mode.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.KDHELP64.KeUserCallbackDispatcher">
            <summary>The address of the user-mode dispatcher function.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.KDHELP64.SystemRangeStart">
            <summary>The lowest kernel-mode address.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.KDHELP64.KiUserExceptionDispatcher">
            <summary>
            <para>The address of the user-mode exception dispatcher function.</para>
            <para><c>DbgHelp 6.1 and earlier:</c> This member is not supported.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.KDHELP64.StackBase">
            <summary>The address of the stack base.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.KDHELP64.StackLimit">
            <summary>The stack limit.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.KDHELP64.BuildVersion">
            <summary>Target OS build number.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.KDHELP64.RetpolineStubFunctionTableSize">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.KDHELP64.RetpolineStubFunctionTable">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.KDHELP64.RetpolineStubOffset">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.KDHELP64.RetpolineStubSize">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.KDHELP64.Reserved0">
            <summary>This member is reserved for use by the operating system.</summary>
        </member>
        <member name="T:Vanara.PInvoke.DbgHelp.LOADED_IMAGE">
            <summary>Contains information about the loaded image.</summary>
            <remarks>
            <para>The <c>LIST_ENTRY</c> structure is defined as follows:</para>
            <para>
            <code>typedef struct _LIST_ENTRY { struct _LIST_ENTRY *Flink; struct _LIST_ENTRY *Blink; } LIST_ENTRY, *PLIST_ENTRY, *RESTRICTED_POINTER PRLIST_ENTRY;</code>
            </para>
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.LOADED_IMAGE.ModuleName">
            <summary>The file name of the mapped file.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.LOADED_IMAGE.hFile">
            <summary>A handle to the mapped file.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.LOADED_IMAGE.MappedAddress">
            <summary>The base address of the mapped file.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.LOADED_IMAGE.FileHeader">
            <summary>A pointer to an <see cref="T:Vanara.PInvoke.DbgHelp.IMAGE_NT_HEADERS"/> structure.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.LOADED_IMAGE.LastRvaSection">
            <summary>A pointer to an <see cref="T:Vanara.PInvoke.DbgHelp.IMAGE_SECTION_HEADER"/> structure.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.LOADED_IMAGE.NumberOfSections">
            <summary>The number of COFF section headers.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.LOADED_IMAGE.Sections">
            <summary>A pointer to an IMAGE_SECTION_HEADER structure.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.LOADED_IMAGE.Characteristics">
            <summary>
            <para>The image characteristics value. This member can be one of the following values.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>IMAGE_FILE_RELOCS_STRIPPED 0x0001</term>
            <term>Relocation information is stripped from the file.</term>
            </item>
            <item>
            <term>IMAGE_FILE_EXECUTABLE_IMAGE 0x0002</term>
            <term>The file is executable (there are no unresolved external references).</term>
            </item>
            <item>
            <term>IMAGE_FILE_LINE_NUMS_STRIPPED 0x0004</term>
            <term>Line numbers are stripped from the file.</term>
            </item>
            <item>
            <term>IMAGE_FILE_LOCAL_SYMS_STRIPPED 0x0008</term>
            <term>Local symbols are stripped from file.</term>
            </item>
            <item>
            <term>IMAGE_FILE_AGGRESIVE_WS_TRIM 0x0010</term>
            <term>Aggressively trim the working set.</term>
            </item>
            <item>
            <term>IMAGE_FILE_LARGE_ADDRESS_AWARE 0x0020</term>
            <term>The application can handle addresses larger than 2 GB.</term>
            </item>
            <item>
            <term>IMAGE_FILE_BYTES_REVERSED_LO 0x0080</term>
            <term>Bytes of word are reversed.</term>
            </item>
            <item>
            <term>IMAGE_FILE_32BIT_MACHINE 0x0100</term>
            <term>Computer supports 32-bit words.</term>
            </item>
            <item>
            <term>IMAGE_FILE_DEBUG_STRIPPED 0x0200</term>
            <term>Debugging information is stored separately in a .dbg file.</term>
            </item>
            <item>
            <term>IMAGE_FILE_REMOVABLE_RUN_FROM_SWAP 0x0400</term>
            <term>If the image is on removable media, copy and run from the swap file.</term>
            </item>
            <item>
            <term>IMAGE_FILE_NET_RUN_FROM_SWAP 0x0800</term>
            <term>If the image is on the network, copy and run from the swap file.</term>
            </item>
            <item>
            <term>IMAGE_FILE_SYSTEM 0x1000</term>
            <term>System file.</term>
            </item>
            <item>
            <term>IMAGE_FILE_DLL 0x2000</term>
            <term>DLL file.</term>
            </item>
            <item>
            <term>IMAGE_FILE_UP_SYSTEM_ONLY 0x4000</term>
            <term>File should be run only on a uniprocessor computer.</term>
            </item>
            <item>
            <term>IMAGE_FILE_BYTES_REVERSED_HI 0x8000</term>
            <term>Bytes of the word are reversed.</term>
            </item>
            </list>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.LOADED_IMAGE.fSystemImage">
            <summary>If the image is a kernel mode executable image, this value is <c>TRUE</c>.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.LOADED_IMAGE.fDOSImage">
            <summary>If the image is a 16-bit executable image, this value is <c>TRUE</c>.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.LOADED_IMAGE.fReadOnly">
            <summary>
            <para>If the image is read-only, this value is <c>TRUE</c>.</para>
            <para><c>Prior to Windows Vista:</c> This member is not included in the structure.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.LOADED_IMAGE.Version">
            <summary>
            <para>The version string.</para>
            <para><c>Prior to Windows Vista:</c> This member is not included in the structure.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.LOADED_IMAGE.Links">
            <summary>The list of loaded images.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.LOADED_IMAGE.SizeOfImage">
            <summary>The size of the image, in bytes.</summary>
        </member>
        <member name="T:Vanara.PInvoke.DbgHelp.LOADED_IMAGE_UNSAFE">
            <summary>Contains information about the loaded image.</summary>
            <remarks>
            <para>The <c>LIST_ENTRY</c> structure is defined as follows:</para>
            <para>
            <code>typedef struct _LIST_ENTRY { struct _LIST_ENTRY *Flink; struct _LIST_ENTRY *Blink; } LIST_ENTRY, *PLIST_ENTRY, *RESTRICTED_POINTER PRLIST_ENTRY;</code>
            </para>
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.LOADED_IMAGE_UNSAFE.ModuleName">
            <summary>The file name of the mapped file.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.LOADED_IMAGE_UNSAFE.hFile">
            <summary>A handle to the mapped file.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.LOADED_IMAGE_UNSAFE.MappedAddress">
            <summary>The base address of the mapped file.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.LOADED_IMAGE_UNSAFE.FileHeader">
            <summary>A pointer to an <see cref="T:Vanara.PInvoke.DbgHelp.IMAGE_NT_HEADERS"/> structure.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.LOADED_IMAGE_UNSAFE.LastRvaSection">
            <summary>A pointer to an <see cref="T:Vanara.PInvoke.DbgHelp.IMAGE_SECTION_HEADER"/> structure.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.LOADED_IMAGE_UNSAFE.NumberOfSections">
            <summary>The number of COFF section headers.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.LOADED_IMAGE_UNSAFE.Sections">
            <summary>A pointer to an IMAGE_SECTION_HEADER structure.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.LOADED_IMAGE_UNSAFE.Characteristics">
            <summary>
            <para>The image characteristics value. This member can be one of the following values.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>IMAGE_FILE_RELOCS_STRIPPED 0x0001</term>
            <term>Relocation information is stripped from the file.</term>
            </item>
            <item>
            <term>IMAGE_FILE_EXECUTABLE_IMAGE 0x0002</term>
            <term>The file is executable (there are no unresolved external references).</term>
            </item>
            <item>
            <term>IMAGE_FILE_LINE_NUMS_STRIPPED 0x0004</term>
            <term>Line numbers are stripped from the file.</term>
            </item>
            <item>
            <term>IMAGE_FILE_LOCAL_SYMS_STRIPPED 0x0008</term>
            <term>Local symbols are stripped from file.</term>
            </item>
            <item>
            <term>IMAGE_FILE_AGGRESIVE_WS_TRIM 0x0010</term>
            <term>Aggressively trim the working set.</term>
            </item>
            <item>
            <term>IMAGE_FILE_LARGE_ADDRESS_AWARE 0x0020</term>
            <term>The application can handle addresses larger than 2 GB.</term>
            </item>
            <item>
            <term>IMAGE_FILE_BYTES_REVERSED_LO 0x0080</term>
            <term>Bytes of word are reversed.</term>
            </item>
            <item>
            <term>IMAGE_FILE_32BIT_MACHINE 0x0100</term>
            <term>Computer supports 32-bit words.</term>
            </item>
            <item>
            <term>IMAGE_FILE_DEBUG_STRIPPED 0x0200</term>
            <term>Debugging information is stored separately in a .dbg file.</term>
            </item>
            <item>
            <term>IMAGE_FILE_REMOVABLE_RUN_FROM_SWAP 0x0400</term>
            <term>If the image is on removable media, copy and run from the swap file.</term>
            </item>
            <item>
            <term>IMAGE_FILE_NET_RUN_FROM_SWAP 0x0800</term>
            <term>If the image is on the network, copy and run from the swap file.</term>
            </item>
            <item>
            <term>IMAGE_FILE_SYSTEM 0x1000</term>
            <term>System file.</term>
            </item>
            <item>
            <term>IMAGE_FILE_DLL 0x2000</term>
            <term>DLL file.</term>
            </item>
            <item>
            <term>IMAGE_FILE_UP_SYSTEM_ONLY 0x4000</term>
            <term>File should be run only on a uniprocessor computer.</term>
            </item>
            <item>
            <term>IMAGE_FILE_BYTES_REVERSED_HI 0x8000</term>
            <term>Bytes of the word are reversed.</term>
            </item>
            </list>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.LOADED_IMAGE_UNSAFE.fSystemImage">
            <summary>If the image is a kernel mode executable image, this value is <c>TRUE</c>.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.LOADED_IMAGE_UNSAFE.fDOSImage">
            <summary>If the image is a 16-bit executable image, this value is <c>TRUE</c>.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.LOADED_IMAGE_UNSAFE.fReadOnly">
            <summary>
            <para>If the image is read-only, this value is <c>TRUE</c>.</para>
            <para><c>Prior to Windows Vista:</c> This member is not included in the structure.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.LOADED_IMAGE_UNSAFE.Version">
            <summary>
            <para>The version string.</para>
            <para><c>Prior to Windows Vista:</c> This member is not included in the structure.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.LOADED_IMAGE_UNSAFE.Links">
            <summary>The list of loaded images.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.LOADED_IMAGE_UNSAFE.SizeOfImage">
            <summary>The size of the image, in bytes.</summary>
        </member>
        <member name="T:Vanara.PInvoke.DbgHelp.MODLOAD_CVMISC">
            <summary>Contains CodeView and Misc records.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.MODLOAD_CVMISC.oCV">
            <summary>The offset of the CodeView record.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.MODLOAD_CVMISC.cCV">
            <summary>The size of the CodeView record.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.MODLOAD_CVMISC.oMisc">
            <summary>The offset of the Misc record.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.MODLOAD_CVMISC.cMisc">
            <summary>The size of the Misc record.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.MODLOAD_CVMISC.dtImage">
            <summary>The date/time stamp of the image.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.MODLOAD_CVMISC.cImage">
            <summary>The size of the image.</summary>
        </member>
        <member name="T:Vanara.PInvoke.DbgHelp.MODLOAD_DATA">
            <summary>Contains module data.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.MODLOAD_DATA.ssize">
            <summary>The size of this structure, in bytes.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.MODLOAD_DATA.ssig">
            <summary>
            <para>The type of data. This member can be one of the following values.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>DBHHEADER_DEBUGDIRS 0x1</term>
            <term>The data member is a buffer that contains an array of IMAGE_DEBUG_DIRECTORY structures.</term>
            </item>
            <item>
            <term>DBHHEADER_CVMISC 0x2</term>
            <term>The data member is a buffer that contains an array of MODLOAD_CVMISC structures.</term>
            </item>
            </list>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.MODLOAD_DATA.data">
            <summary>The data. The format of this data depends on the value of the <c>ssig</c> member.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.MODLOAD_DATA.size">
            <summary>The size of the <c>data</c> buffer, in bytes.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.MODLOAD_DATA.flags">
            <summary>This member is unused.</summary>
        </member>
        <member name="T:Vanara.PInvoke.DbgHelp.OMAP">
            <summary>Describes an entry in an address map.</summary>
            <remarks>
            <para>
            An address map provides a translation from one image layout (A) to another (B). An array of OMAP structures, sorted by
            <c>rva</c>, defines an address map.
            </para>
            <para>To translate an address, addrA, in image A to an address, addrB, in image B, perform the following steps:</para>
            <list type="number">
            <item>
            <term>Search the map for the entry, e, with the largest rva less than or equal to addrA.</term>
            </item>
            <item>
            <term>Set delta = addrA – e.rva.</term>
            </item>
            <item>
            <term>Set addrB = e.rvaTo + delta.</term>
            </item>
            </list>
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.OMAP.rva">
            <summary>A relative virtual address (RVA) in image A.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.OMAP.rvaTo">
            <summary>The relative virtual address that <c>rva</c> is mapped to in image B.</summary>
        </member>
        <member name="T:Vanara.PInvoke.DbgHelp.SOURCEFILE">
            <summary>Contains source file information.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.SOURCEFILE.ModBase">
            <summary>The base address of the module.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.SOURCEFILE.FileName">
            <summary>The fully qualified source file name.</summary>
        </member>
        <member name="T:Vanara.PInvoke.DbgHelp.SRCCODEINFO">
            <summary>Contains line information.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.SRCCODEINFO.SizeOfStruct">
            <summary>The size of the structure, in bytes.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.SRCCODEINFO.Key">
            <summary>This member is not used.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.SRCCODEINFO.ModBase">
            <summary>The base address of the module that contains the line.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.SRCCODEINFO.Obj">
            <summary>The name of the object file within the module that contains the line.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.SRCCODEINFO.FileName">
            <summary>The fully qualified source file name.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.SRCCODEINFO.LineNumber">
            <summary>The line number within the source file.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.SRCCODEINFO.Address">
            <summary>The virtual address of the first instruction of the line.</summary>
        </member>
        <member name="T:Vanara.PInvoke.DbgHelp.STACKFRAME">
            <summary>Represents a stack frame.</summary>
            <remarks>
            <para>
            This structure supersedes the <c>STACKFRAME</c> structure. For more information, see Updated Platform Support. <c>STACKFRAME</c>
            is defined as follows in Dbghelp.h.
            </para>
            <para>
            <code>#if !defined(_IMAGEHLP_SOURCE_) &amp;&amp; defined(_IMAGEHLP64) #define STACKFRAME STACKFRAME64 #define LPSTACKFRAME LPSTACKFRAME64 #else typedef struct _tagSTACKFRAME { ADDRESS AddrPC; ADDRESS AddrReturn; ADDRESS AddrFrame; ADDRESS AddrStack; PVOID FuncTableEntry; DWORD Params[4]; BOOL Far; BOOL Virtual; DWORD Reserved[3]; KDHELP KdHelp; ADDRESS AddrBStore; } STACKFRAME, *LPSTACKFRAME; #endif</code>
            </para>
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.STACKFRAME.AddrPC">
            <summary>
            <para>An ADDRESS64 structure that specifies the program counter.</para>
            <para><c>x86:</c> The program counter is EIP.</para>
            <para><c>Intel Itanium:</c> The program counter is StIIP.</para>
            <para><c>x64:</c> The program counter is RIP.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.STACKFRAME.AddrReturn">
            <summary>An ADDRESS64 structure that specifies the return address.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.STACKFRAME.AddrFrame">
            <summary>
            <para>An ADDRESS64 structure that specifies the frame pointer.</para>
            <para><c>x86:</c> The frame pointer is EBP.</para>
            <para><c>Intel Itanium:</c> There is no frame pointer, but <c>AddrBStore</c> is used.</para>
            <para><c>x64:</c> The frame pointer is RBP or RDI. This value is not always used.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.STACKFRAME.AddrStack">
            <summary>
            <para>An ADDRESS64 structure that specifies the stack pointer.</para>
            <para><c>x86:</c> The stack pointer is ESP.</para>
            <para><c>Intel Itanium:</c> The stack pointer is SP.</para>
            <para><c>x64:</c> The stack pointer is RSP.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.STACKFRAME.FuncTableEntry">
            <summary>
            On x86 computers, this member is an FPO_DATA structure. If there is no function table entry, this member is <c>NULL</c>.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.STACKFRAME.Params">
            <summary>The possible arguments to the function.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.STACKFRAME.Far">
            <summary>This member is <c>TRUE</c> if this is a WOW far call.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.STACKFRAME.Virtual">
            <summary>This member is <c>TRUE</c> if this is a virtual frame.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.STACKFRAME.Reserved">
            <summary>This member is used internally by the StackWalk64 function.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.STACKFRAME.KdHelp">
            <summary>A KDHELP64 structure that specifies helper data for walking kernel callback frames.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.STACKFRAME.AddrBStore">
            <summary><c>Intel Itanium:</c> An ADDRESS64 structure that specifies the backing store (RsBSP).</summary>
        </member>
        <member name="T:Vanara.PInvoke.DbgHelp.STACKFRAME_EX">
            <summary>Represents an extended stack frame.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.STACKFRAME_EX.AddrPC">
            <summary>
            <para>An ADDRESS64 structure that specifies the program counter.</para>
            <para><c>x86:</c> The program counter is EIP.</para>
            <para><c>Intel Itanium:</c> The program counter is StIIP.</para>
            <para><c>x64:</c> The program counter is RIP.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.STACKFRAME_EX.AddrReturn">
            <summary>An ADDRESS64 structure that specifies the return address.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.STACKFRAME_EX.AddrFrame">
            <summary>
            <para>An ADDRESS64 structure that specifies the frame pointer.</para>
            <para><c>x86:</c> The frame pointer is EBP.</para>
            <para><c>Intel Itanium:</c> There is no frame pointer, but <c>AddrBStore</c> is used.</para>
            <para><c>x64:</c> The frame pointer is RBP or RDI. This value is not always used.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.STACKFRAME_EX.AddrStack">
            <summary>
            <para>An ADDRESS64 structure that specifies the stack pointer.</para>
            <para><c>x86:</c> The stack pointer is ESP.</para>
            <para><c>Intel Itanium:</c> The stack pointer is SP.</para>
            <para><c>x64:</c> The stack pointer is RSP.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.STACKFRAME_EX.AddrBStore">
            <summary><c>Intel Itanium:</c> An ADDRESS64 structure that specifies the backing store (RsBSP).</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.STACKFRAME_EX.FuncTableEntry">
            <summary>
            On x86 computers, this member is an FPO_DATA structure. If there is no function table entry, this member is <c>NULL</c>.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.STACKFRAME_EX.Params">
            <summary>The possible arguments to the function.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.STACKFRAME_EX.Far">
            <summary>This member is <c>TRUE</c> if this is a WOW far call.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.STACKFRAME_EX.Virtual">
            <summary>This member is <c>TRUE</c> if this is a virtual frame.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.STACKFRAME_EX.Reserved">
            <summary>This member is used internally by the StackWalkEx function.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.STACKFRAME_EX.KdHelp">
            <summary>A KDHELP64 structure that specifies helper data for walking kernel callback frames.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.STACKFRAME_EX.StackFrameSize">
            <summary>
            Set to
            <c>sizeof(STACKFRAME_EX)</c>
            .
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.STACKFRAME_EX.InlineFrameContext">
            <summary>
            <para>Specifies the type of the inline frame context.</para>
            <para>INLINE_FRAME_CONTEXT_INIT (0)</para>
            <para>INLINE_FRAME_CONTEXT_IGNORE (0xffffffff)</para>
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.DbgHelp.STACKFRAME64">
            <summary>Represents a stack frame.</summary>
            <remarks>
            <para>
            This structure supersedes the <c>STACKFRAME</c> structure. For more information, see Updated Platform Support. <c>STACKFRAME</c>
            is defined as follows in Dbghelp.h.
            </para>
            <para>
            <code>#if !defined(_IMAGEHLP_SOURCE_) &amp;&amp; defined(_IMAGEHLP64) #define STACKFRAME STACKFRAME64 #define LPSTACKFRAME LPSTACKFRAME64 #else typedef struct _tagSTACKFRAME { ADDRESS AddrPC; ADDRESS AddrReturn; ADDRESS AddrFrame; ADDRESS AddrStack; PVOID FuncTableEntry; DWORD Params[4]; BOOL Far; BOOL Virtual; DWORD Reserved[3]; KDHELP KdHelp; ADDRESS AddrBStore; } STACKFRAME, *LPSTACKFRAME; #endif</code>
            </para>
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.STACKFRAME64.AddrPC">
            <summary>
            <para>An ADDRESS64 structure that specifies the program counter.</para>
            <para><c>x86:</c> The program counter is EIP.</para>
            <para><c>Intel Itanium:</c> The program counter is StIIP.</para>
            <para><c>x64:</c> The program counter is RIP.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.STACKFRAME64.AddrReturn">
            <summary>An ADDRESS64 structure that specifies the return address.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.STACKFRAME64.AddrFrame">
            <summary>
            <para>An ADDRESS64 structure that specifies the frame pointer.</para>
            <para><c>x86:</c> The frame pointer is EBP.</para>
            <para><c>Intel Itanium:</c> There is no frame pointer, but <c>AddrBStore</c> is used.</para>
            <para><c>x64:</c> The frame pointer is RBP or RDI. This value is not always used.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.STACKFRAME64.AddrStack">
            <summary>
            <para>An ADDRESS64 structure that specifies the stack pointer.</para>
            <para><c>x86:</c> The stack pointer is ESP.</para>
            <para><c>Intel Itanium:</c> The stack pointer is SP.</para>
            <para><c>x64:</c> The stack pointer is RSP.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.STACKFRAME64.AddrBStore">
            <summary><c>Intel Itanium:</c> An ADDRESS64 structure that specifies the backing store (RsBSP).</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.STACKFRAME64.FuncTableEntry">
            <summary>
            On x86 computers, this member is an FPO_DATA structure. If there is no function table entry, this member is <c>NULL</c>.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.STACKFRAME64.Params">
            <summary>The possible arguments to the function.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.STACKFRAME64.Far">
            <summary>This member is <c>TRUE</c> if this is a WOW far call.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.STACKFRAME64.Virtual">
            <summary>This member is <c>TRUE</c> if this is a virtual frame.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.STACKFRAME64.Reserved">
            <summary>This member is used internally by the StackWalk64 function.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.STACKFRAME64.KdHelp">
            <summary>A KDHELP64 structure that specifies helper data for walking kernel callback frames.</summary>
        </member>
        <member name="T:Vanara.PInvoke.DbgHelp.SYMBOL_INFO">
            <summary>Contains symbol information.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.SYMBOL_INFO.SizeOfStruct">
            <summary>
            The size of the structure, in bytes. This member must be set to <c>sizeof(SYMBOL_INFO)</c> . Note that the total size of the
            data is the <c>SizeOfStruct + (MaxNameLen - 1) * sizeof(TCHAR)</c> . The reason to subtract one is that the first character
            in the name is accounted for in the size of the structure.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.SYMBOL_INFO.TypeIndex">
            <summary>
            A unique value that identifies the type data that describes the symbol. This value does not persist between sessions.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.SYMBOL_INFO.Reserved0">
            <summary>This member is reserved for system use.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.SYMBOL_INFO.Index">
            <summary>
            <para>
            The unique value for the symbol. The value associated with a symbol is not guaranteed to be the same each time you run the process.
            </para>
            <para>
            For PDB symbols, the index value for a symbol is not generated until the symbol is enumerated or retrieved through a search
            by name or address. The index values for all CodeView and COFF symbols are generated when the symbols are loaded.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.SYMBOL_INFO.Size">
            <summary>
            The symbol size, in bytes. This value is meaningful only if the module symbols are from a pdb file; otherwise, this value is
            typically zero and should be ignored.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.SYMBOL_INFO.ModBase">
            <summary>The base address of the module that contains the symbol.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.SYMBOL_INFO.Flags">
            <summary>
            <para>This member can be one or more of the following values.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>SYMFLAG_CLR_TOKEN 0x00040000</term>
            <term>The symbol is a CLR token.</term>
            </item>
            <item>
            <term>SYMFLAG_CONSTANT 0x00000100</term>
            <term>The symbol is a constant.</term>
            </item>
            <item>
            <term>SYMFLAG_EXPORT 0x00000200</term>
            <term>The symbol is from the export table.</term>
            </item>
            <item>
            <term>SYMFLAG_FORWARDER 0x00000400</term>
            <term>The symbol is a forwarder.</term>
            </item>
            <item>
            <term>SYMFLAG_FRAMEREL 0x00000020</term>
            <term>Offsets are frame relative.</term>
            </item>
            <item>
            <term>SYMFLAG_FUNCTION 0x00000800</term>
            <term>The symbol is a known function.</term>
            </item>
            <item>
            <term>SYMFLAG_ILREL 0x00010000</term>
            <term>
            The symbol address is an offset relative to the beginning of the intermediate language block. This applies to managed code only.
            </term>
            </item>
            <item>
            <term>SYMFLAG_LOCAL 0x00000080</term>
            <term>The symbol is a local variable.</term>
            </item>
            <item>
            <term>SYMFLAG_METADATA 0x00020000</term>
            <term>The symbol is managed metadata.</term>
            </item>
            <item>
            <term>SYMFLAG_PARAMETER 0x00000040</term>
            <term>The symbol is a parameter.</term>
            </item>
            <item>
            <term>SYMFLAG_REGISTER 0x00000008</term>
            <term>The symbol is a register. The Register member is used.</term>
            </item>
            <item>
            <term>SYMFLAG_REGREL 0x00000010</term>
            <term>Offsets are register relative.</term>
            </item>
            <item>
            <term>SYMFLAG_SLOT 0x00008000</term>
            <term>The symbol is a managed code slot.</term>
            </item>
            <item>
            <term>SYMFLAG_THUNK 0x00002000</term>
            <term>The symbol is a thunk.</term>
            </item>
            <item>
            <term>SYMFLAG_TLSREL 0x00004000</term>
            <term>The symbol is an offset into the TLS data area.</term>
            </item>
            <item>
            <term>SYMFLAG_VALUEPRESENT 0x00000001</term>
            <term>The Value member is used.</term>
            </item>
            <item>
            <term>SYMFLAG_VIRTUAL 0x00001000</term>
            <term>The symbol is a virtual symbol created by the SymAddSymbol function.</term>
            </item>
            </list>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.SYMBOL_INFO.Value">
            <summary>The value of a constant.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.SYMBOL_INFO.Address">
            <summary>The virtual address of the start of the symbol.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.SYMBOL_INFO.Register">
            <summary>The register.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.SYMBOL_INFO.Scope">
            <summary>
            The DIA scope. For more information, see the Debug Interface Access SDK in the Visual Studio documentation. (This resource
            may not be available in some languages and countries.)
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.SYMBOL_INFO.Tag">
            <summary>The PDB classification. These values are defined in Dbghelp.h in the SymTagEnum enumeration type.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.SYMBOL_INFO.NameLen">
            <summary>The length of the name, in characters, not including the null-terminating character.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.SYMBOL_INFO.MaxNameLen">
            <summary>The size of the <c>Name</c> buffer, in characters. If this member is 0, the <c>Name</c> member is not used.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.SYMBOL_INFO.Name">
            <summary>
            The name of the symbol. The name can be undecorated if the SYMOPT_UNDNAME option is used with the SymSetOptions function.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.SYMBOL_INFO.Default">
            <summary>The default initial value for <c>SYMBOL_INFO</c> with size parameters set.</summary>
        </member>
        <member name="T:Vanara.PInvoke.DbgHelp.SYMBOL_INFO_V">
             <summary>
             Contains symbol information. Use this structure when extracting from a pointer, like in the enumeration callbacks.
             </summary>
             <example>
               <para>This is a sample of how to use this structure in a callback.</para>
               <code>List&lt;SYMBOL_INFO&gt; list = new();
             Win32Error.ThrowLastErrorIfFalse(SymEnumSymbolsEx(hProcess, baseOfDll, mask, EnumProc, userContext, options));
            
             bool EnumProc(IntPtr pSymInfo, uint SymbolSize, IntPtr UserContext)
             {
                try { list.Add((SYMBOL_INFO)pSymInfo.ToStructure&lt;SYMBOL_INFO_V&gt;(SymbolSize)); return true; }
                catch { return false; }
             }</code>
             </example>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.SYMBOL_INFO_V.SizeOfStruct">
            <summary>
            The size of the structure, in bytes. This member must be set to <c>sizeof(SYMBOL_INFO)</c> . Note that the total size of the
            data is the <c>SizeOfStruct + (MaxNameLen - 1) * sizeof(TCHAR)</c> . The reason to subtract one is that the first character
            in the name is accounted for in the size of the structure.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.SYMBOL_INFO_V.TypeIndex">
            <summary>
            A unique value that identifies the type data that describes the symbol. This value does not persist between sessions.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.SYMBOL_INFO_V.Reserved0">
            <summary>This member is reserved for system use.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.SYMBOL_INFO_V.Index">
            <summary>
            <para>
            The unique value for the symbol. The value associated with a symbol is not guaranteed to be the same each time you run the process.
            </para>
            <para>
            For PDB symbols, the index value for a symbol is not generated until the symbol is enumerated or retrieved through a search
            by name or address. The index values for all CodeView and COFF symbols are generated when the symbols are loaded.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.SYMBOL_INFO_V.Size">
            <summary>
            The symbol size, in bytes. This value is meaningful only if the module symbols are from a pdb file; otherwise, this value is
            typically zero and should be ignored.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.SYMBOL_INFO_V.ModBase">
            <summary>The base address of the module that contains the symbol.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.SYMBOL_INFO_V.Flags">
            <summary>
            <para>This member can be one or more of the following values.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>SYMFLAG_CLR_TOKEN 0x00040000</term>
            <term>The symbol is a CLR token.</term>
            </item>
            <item>
            <term>SYMFLAG_CONSTANT 0x00000100</term>
            <term>The symbol is a constant.</term>
            </item>
            <item>
            <term>SYMFLAG_EXPORT 0x00000200</term>
            <term>The symbol is from the export table.</term>
            </item>
            <item>
            <term>SYMFLAG_FORWARDER 0x00000400</term>
            <term>The symbol is a forwarder.</term>
            </item>
            <item>
            <term>SYMFLAG_FRAMEREL 0x00000020</term>
            <term>Offsets are frame relative.</term>
            </item>
            <item>
            <term>SYMFLAG_FUNCTION 0x00000800</term>
            <term>The symbol is a known function.</term>
            </item>
            <item>
            <term>SYMFLAG_ILREL 0x00010000</term>
            <term>
            The symbol address is an offset relative to the beginning of the intermediate language block. This applies to managed code only.
            </term>
            </item>
            <item>
            <term>SYMFLAG_LOCAL 0x00000080</term>
            <term>The symbol is a local variable.</term>
            </item>
            <item>
            <term>SYMFLAG_METADATA 0x00020000</term>
            <term>The symbol is managed metadata.</term>
            </item>
            <item>
            <term>SYMFLAG_PARAMETER 0x00000040</term>
            <term>The symbol is a parameter.</term>
            </item>
            <item>
            <term>SYMFLAG_REGISTER 0x00000008</term>
            <term>The symbol is a register. The Register member is used.</term>
            </item>
            <item>
            <term>SYMFLAG_REGREL 0x00000010</term>
            <term>Offsets are register relative.</term>
            </item>
            <item>
            <term>SYMFLAG_SLOT 0x00008000</term>
            <term>The symbol is a managed code slot.</term>
            </item>
            <item>
            <term>SYMFLAG_THUNK 0x00002000</term>
            <term>The symbol is a thunk.</term>
            </item>
            <item>
            <term>SYMFLAG_TLSREL 0x00004000</term>
            <term>The symbol is an offset into the TLS data area.</term>
            </item>
            <item>
            <term>SYMFLAG_VALUEPRESENT 0x00000001</term>
            <term>The Value member is used.</term>
            </item>
            <item>
            <term>SYMFLAG_VIRTUAL 0x00001000</term>
            <term>The symbol is a virtual symbol created by the SymAddSymbol function.</term>
            </item>
            </list>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.SYMBOL_INFO_V.Value">
            <summary>The value of a constant.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.SYMBOL_INFO_V.Address">
            <summary>The virtual address of the start of the symbol.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.SYMBOL_INFO_V.Register">
            <summary>The register.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.SYMBOL_INFO_V.Scope">
            <summary>
            The DIA scope. For more information, see the Debug Interface Access SDK in the Visual Studio documentation. (This resource
            may not be available in some languages and countries.)
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.SYMBOL_INFO_V.Tag">
            <summary>The PDB classification. These values are defined in Dbghelp.h in the SymTagEnum enumeration type.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.SYMBOL_INFO_V.NameLen">
            <summary>The length of the name, in characters, not including the null-terminating character.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.SYMBOL_INFO_V.MaxNameLen">
            <summary>The size of the <c>Name</c> buffer, in characters. If this member is 0, the <c>Name</c> member is not used.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.SYMBOL_INFO_V.Name">
            <summary>
            The name of the symbol. The name can be undecorated if the SYMOPT_UNDNAME option is used with the SymSetOptions function.
            </summary>
        </member>
        <member name="M:Vanara.PInvoke.DbgHelp.SYMBOL_INFO_V.op_Implicit(Vanara.PInvoke.DbgHelp.SYMBOL_INFO_V)~Vanara.PInvoke.DbgHelp.SYMBOL_INFO">
            <summary>Performs an implicit conversion from <see cref="T:Vanara.PInvoke.DbgHelp.SYMBOL_INFO_V"/> to <see cref="T:Vanara.PInvoke.DbgHelp.SYMBOL_INFO"/>.</summary>
            <param name="r">The r.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="T:Vanara.PInvoke.DbgHelp.SYMSRV_INDEX_INFO">
            <summary>Contains symbol server index information.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.SYMSRV_INDEX_INFO.sizeofstruct">
            <summary>
            The size of the structure, in bytes. This member must be set to <c>sizeof(SYMSRV_INDEX_INFO)</c> or
            <c>sizeof(SYMSRV_INDEX_INFOW)</c> .
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.SYMSRV_INDEX_INFO.file">
            <summary>The name of the .pdb, .dbg, or image file.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.SYMSRV_INDEX_INFO.stripped">
            <summary>A value that indicates whether the image file is stripped.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.SYMSRV_INDEX_INFO.timestamp">
            <summary>The timestamp from the PE header. This member is used only for image files.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.SYMSRV_INDEX_INFO.size">
            <summary>The file size from the PE header. This member is used only for image files.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.SYMSRV_INDEX_INFO.dbgfile">
            <summary>
            If the image file is stripped and there is a .dbg file, this member is the path to the .dbg file from the CV record.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.SYMSRV_INDEX_INFO.pdbfile">
            <summary>The .pdb file from the CV record. This member is used only for image and .dbg files.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.SYMSRV_INDEX_INFO.guid">
            <summary>
            The GUID of the .pdb file. If there is no GUID available, the signature of the .pdb file is copied into first <c>DWORD</c>
            of the GUID.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.SYMSRV_INDEX_INFO.sig">
            <summary>
            The signature of the .pdb file (for use with old-style .pdb files). This value can be 0 if it is a new-style .pdb file that
            uses a GUID-length signature.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.SYMSRV_INDEX_INFO.age">
            <summary>The age of the .pdb file.</summary>
        </member>
        <member name="T:Vanara.PInvoke.DbgHelp.TI_FINDCHILDREN_PARAMS">
            <summary>Contains type index information. It is used by the SymGetTypeInfo function.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.TI_FINDCHILDREN_PARAMS.Count">
            <summary>The number of children.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.TI_FINDCHILDREN_PARAMS.Start">
            <summary>
            The zero-based index of the child from which the child indexes are to be retrieved. For example, in an array with five
            elements, if Start is two, this indicates the third array element. In most cases, this member is zero.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.TI_FINDCHILDREN_PARAMS.ChildId">
            <summary>An array of type indexes. There is one index per child.</summary>
        </member>
        <member name="T:Vanara.PInvoke.DbgHelp.SafeIMAGEHLP_SYMBOL">
            <summary>Contains symbol information.</summary>
            <seealso cref="T:Vanara.InteropServices.SafeHGlobalStruct`1"/>
        </member>
        <member name="M:Vanara.PInvoke.DbgHelp.SafeIMAGEHLP_SYMBOL.#ctor(System.Int32)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.PInvoke.DbgHelp.SafeIMAGEHLP_SYMBOL"/> class.</summary>
            <param name="maxNameLen">Maximum length of the name.</param>
        </member>
        <member name="T:Vanara.PInvoke.DbgHelp.SafeIMAGEHLP_SYMBOL64">
            <summary>Contains symbol information.</summary>
            <seealso cref="T:Vanara.InteropServices.SafeHGlobalStruct`1"/>
        </member>
        <member name="M:Vanara.PInvoke.DbgHelp.SafeIMAGEHLP_SYMBOL64.#ctor(System.Int32)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.PInvoke.DbgHelp.SafeIMAGEHLP_SYMBOL64"/> class.</summary>
            <param name="maxNameLen">Maximum length of the name.</param>
        </member>
        <member name="T:Vanara.PInvoke.DbgHelp.SafeLOADED_IMAGE">
            <summary>Pointer to a LOADED_IMAGE structure.</summary>
        </member>
        <member name="M:Vanara.PInvoke.DbgHelp.SafeLOADED_IMAGE.op_Implicit(Vanara.PInvoke.DbgHelp.SafeLOADED_IMAGE)~Vanara.PInvoke.DbgHelp.LOADED_IMAGE">
            <summary>Performs an implicit conversion from <see cref="T:Vanara.PInvoke.DbgHelp.SafeLOADED_IMAGE"/> to <see cref="T:Vanara.PInvoke.DbgHelp.LOADED_IMAGE"/>.</summary>
            <param name="i">The <see cref="T:Vanara.PInvoke.DbgHelp.SafeLOADED_IMAGE"/> instance.</param>
            <returns>The resulting <see cref="T:Vanara.PInvoke.DbgHelp.LOADED_IMAGE"/> instance from the conversion.</returns>
        </member>
        <member name="M:Vanara.PInvoke.DbgHelp.SafeLOADED_IMAGE.op_Explicit(Vanara.PInvoke.DbgHelp.SafeLOADED_IMAGE)~Vanara.PInvoke.DbgHelp.LOADED_IMAGE_UNSAFE*">
            <summary>Performs an implicit conversion from <see cref="T:Vanara.PInvoke.DbgHelp.SafeLOADED_IMAGE"/> to <see cref="T:Vanara.PInvoke.DbgHelp.LOADED_IMAGE_UNSAFE"/>*.</summary>
            <param name="i">The <see cref="T:Vanara.PInvoke.DbgHelp.SafeLOADED_IMAGE"/> instance.</param>
            <returns>The resulting <see cref="T:Vanara.PInvoke.DbgHelp.LOADED_IMAGE_UNSAFE"/> pointer from the conversion.</returns>
        </member>
        <member name="M:Vanara.PInvoke.DbgHelp.SafeLOADED_IMAGE.#ctor(System.IntPtr,System.Boolean)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.PInvoke.DbgHelp.SafeLOADED_IMAGE"/> class and assigns an existing handle.</summary>
            <param name="preexistingHandle">An <see cref="T:System.IntPtr"/> object that represents the pre-existing handle to use.</param>
            <param name="ownsHandle"><see langword="true"/> to reliably release the handle during the finalization phase; otherwise, <see langword="false"/> (not recommended).</param>
        </member>
        <member name="M:Vanara.PInvoke.DbgHelp.SafeLOADED_IMAGE.#ctor">
            <summary>Initializes a new instance of the <see cref="T:Vanara.PInvoke.DbgHelp.SafeLOADED_IMAGE"/> class.</summary>
        </member>
        <member name="P:Vanara.PInvoke.DbgHelp.SafeLOADED_IMAGE.Null">
            <summary>Gets a <see cref="T:Vanara.PInvoke.DbgHelp.SafeLOADED_IMAGE"/> object that represents a null handle.</summary>
        </member>
        <member name="M:Vanara.PInvoke.DbgHelp.SafeLOADED_IMAGE.op_Implicit(Vanara.PInvoke.DbgHelp.SafeLOADED_IMAGE)~System.IntPtr">
            <summary>Performs an implicit conversion from <see cref="T:Vanara.PInvoke.DbgHelp.SafeLOADED_IMAGE"/> to <see cref="T:System.IntPtr"/>.</summary>
            <param name="h">The safe handle instance.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Vanara.PInvoke.DbgHelp.SafeLOADED_IMAGE.InternalReleaseHandle">
            <inheritdoc/>
        </member>
        <member name="T:Vanara.PInvoke.DbgHelp.PENUMSOURCEFILETOKENSCALLBACK">
            <summary>
            <para>
            An application-defined callback function used with the SymEnumSourceFileTokens function which enumerates the source server
            version control information stored in the PDB for a module.
            </para>
            <para>
            The <c>PENUMSOURCEFILETOKENSCALLBACK</c> type defines a pointer to this callback function. <c>SymEnumSourceFileTokensProc</c> is
            a placeholder for the application-defined function name.
            </para>
            </summary>
            <param name="token">
            A pointer to an opaque data structure that contains the version control information corresponding to a particular individual
            source file. The usage of this token is detailed below.
            </param>
            <param name="size">The size of the data in the token parameter.</param>
            <returns>
            <para>If the function returns <c>TRUE</c>, the enumeration will continue.</para>
            <para>If the function returns <c>FALSE</c>, the enumeration will stop.</para>
            </returns>
            <remarks>
            <para>An application can use this token to extract a source file from version control by calling SymGetSourceFileFromToken.</para>
            <para>
            To get individual variables from the token, call SymGetSourceVarFromToken. The names of the variables differ based on the
            scripts used to create the tokens. See Source Server for details.
            </para>
            </remarks>
        </member>
        <member name="T:Vanara.PInvoke.DbgHelp.PFINDFILEINPATHCALLBACK">
            <summary>
            <para>An application-defined callback function used with the SymFindFileInPath function.</para>
            <para>
            The <c>PFINDFILEINPATHCALLBACK</c> and <c>PFINDFILEINPATHCALLBACKW</c> types define a pointer to this callback function.
            <c>SymFindFileInPathProc</c> is a placeholder for the application-defined function name.
            </para>
            </summary>
            <param name="filename"/>
            <param name="context">
            The user-defined value specified in SymFindFileInPath, or <c>NULL</c>. This parameter is typically used by an application to
            pass a pointer to a data structure that provides some context for the callback function.
            </param>
            <returns>
            <para>Return <c>TRUE</c> to continue searching.</para>
            <para>Return <c>FALSE</c> to end the search.</para>
            </returns>
        </member>
        <member name="T:Vanara.PInvoke.DbgHelp.PSYM_ENUMERATESYMBOLS_CALLBACK">
            <summary>
            <para>An application-defined callback function used with the SymEnumSymbols, SymEnumTypes, and SymEnumTypesByName functions.</para>
            <para>
            The <c>PSYM_ENUMERATESYMBOLS_CALLBACK</c> and <c>PSYM_ENUMERATESYMBOLS_CALLBACKW</c> types define a pointer to this callback
            function. <c>SymEnumSymbolsProc</c> is a placeholder for the application-defined function name.
            </para>
            </summary>
            <param name="pSymInfo">A pointer to a SYMBOL_INFO structure that provides information about the symbol.</param>
            <param name="SymbolSize">
            The size of the symbol, in bytes. The size is calculated and is actually a guess. In some cases, this value can be zero.
            </param>
            <param name="UserContext">
            The user-defined value passed from the SymEnumSymbols or SymEnumTypes function, or <c>NULL</c>. This parameter is typically used
            by an application to pass a pointer to a data structure that provides context information for the callback function.
            </param>
            <returns>
            <para>If the function returns <c>TRUE</c>, the enumeration will continue.</para>
            <para>If the function returns <c>FALSE</c>, the enumeration will stop.</para>
            </returns>
        </member>
        <member name="T:Vanara.PInvoke.DbgHelp.PSYM_ENUMLINES_CALLBACK">
            <summary>
            <para>An application-defined callback function used with the SymEnumLines and SymEnumSourceLines functions.</para>
            <para>
            The <c>PSYM_ENUMLINES_CALLBACK</c> and <c>PSYM_ENUMLINES_CALLBACKW</c> types define a pointer to this callback function.
            <c>SymEnumLinesProc</c> is a placeholder for the application-defined function name.
            </para>
            </summary>
            <param name="LineInfo">A pointer to a SRCCODEINFO structure that provides information about the line.</param>
            <param name="UserContext">
            The user-defined value passed from the SymEnumLines function, or <c>NULL</c>. This parameter is typically used by an application
            to pass a pointer to a data structure that provides context information for the callback function.
            </param>
            <returns>
            <para>If the function returns <c>TRUE</c>, the enumeration will continue.</para>
            <para>If the function returns <c>FALSE</c>, the enumeration will stop.</para>
            </returns>
        </member>
        <member name="T:Vanara.PInvoke.DbgHelp.PSYM_ENUMPROCESSES_CALLBACK">
            <summary>
            <para>An application-defined function used with the SymEnumProcesses function.</para>
            <para>
            The <c>PSYM_ENUMPROCESSES_CALLBACK</c> type defines a pointer to this callback function. <c>SymEnumProcessesProc</c> is a
            placeholder for the application-defined function name.
            </para>
            </summary>
            <param name="hProcess">A handle to the process.</param>
            <param name="UserContext">
            The user-defined value passed from the SymEnumProcesses function, or <c>NULL</c>. This parameter is typically used by an
            application to pass a pointer to a data structure that provides context information for the callback function.
            </param>
            <returns>
            <para>If the function returns <c>TRUE</c>, the enumeration will continue.</para>
            <para>If the function returns <c>FALSE</c>, the enumeration will stop.</para>
            </returns>
        </member>
        <member name="T:Vanara.PInvoke.DbgHelp.PSYM_ENUMSOURCEFILES_CALLBACK">
            <summary>
            <para>An application-defined callback function used with the SymEnumSourceFiles function.</para>
            <para>
            The <c>PSYM_ENUMSOURCEFILES_CALLBACK</c> and <c>PSYM_ENUMSOURCEFILES_CALLBACKW</c> types define a pointer to this callback
            function. <c>SymEnumSourceFilesProc</c> is a placeholder for the application-defined function name.
            </para>
            </summary>
            <param name="pSourceFile">A pointer to a SOURCEFILE structure that provides information about the source file.</param>
            <param name="UserContext">
            The user-defined value passed from the SymEnumSourceFiles function, or <c>NULL</c>. This parameter is typically used by an
            application to pass a pointer to a data structure that provides context information for the callback function.
            </param>
            <returns>
            <para>If the function returns <c>TRUE</c>, the enumeration will continue.</para>
            <para>If the function returns <c>FALSE</c>, the enumeration will stop.</para>
            </returns>
        </member>
        <member name="T:Vanara.PInvoke.DbgHelp.PSYMBOL_FUNCENTRY_CALLBACK">
            <summary>
            <para>
            An application-defined callback function used with the SymRegisterFunctionEntryCallback64 function. It is called by the stack
            walking procedure.
            </para>
            <para>
            The <c>PSYMBOL_FUNCENTRY_CALLBACK64</c> type defines a pointer to this callback function.
            <c>SymRegisterFunctionEntryCallbackProc64</c> is a placeholder for the application-defined function name.
            </para>
            </summary>
            <param name="hProcess">A handle to the process that was originally passed to the StackWalk64 function.</param>
            <param name="AddrBase">The address of an instruction for which the callback function should return a function table entry.</param>
            <param name="UserContext">
            The user-defined value specified in SymRegisterFunctionEntryCallback64, or <c>NULL</c>. Typically, this parameter is used by an
            application to pass a pointer to a data structure that lets the callback function establish some context.
            </param>
            <returns>
            <para>Return the value <c>NULL</c> if no function table entry is available.</para>
            <para>
            On success, return a pointer to an <c>IMAGE_RUNTIME_FUNCTION_ENTRY</c> structure. Refer to the header file WinNT.h for the
            definition of this function.
            </para>
            </returns>
            <remarks>
            <para>
            The structure must be returned in exactly the form it exists in the process being debugged. Some members may be pointers to
            other locations in the process address space. The ReadProcessMemoryProc64 callback function may be called to retrieve the
            information at these locations.
            </para>
            <para>
            The calling application gets called through the registered callback function as a result of a call to the StackWalk64 function.
            The calling application must be prepared for the possible side effects that this can cause. If the application has only one
            callback function that is being used by multiple threads, then it may be necessary to synchronize some types of data access
            while in the context of the callback function.
            </para>
            <para>
            This function is similar to the FunctionTableAccessProc64 callback function. The difference is that
            <c>FunctionTableAccessProc64</c> returns an IMAGE_FUNCTION_ENTRY structure, while this function returns an
            <c>IMAGE_RUNTIME_FUNCTION_ENTRY</c> structure.
            </para>
            <para>
            This callback function supersedes the PSYMBOL_FUNCENTRY_CALLBACK callback function. PSYMBOL_FUNCENTRY_CALLBACK is defined as
            follows in Dbghelp.h.
            </para>
            <para>
            <code>#if !defined(_IMAGEHLP_SOURCE_) &amp;&amp; defined(_IMAGEHLP64) #define PSYMBOL_FUNCENTRY_CALLBACK PSYMBOL_FUNCENTRY_CALLBACK64 #endif typedef PVOID (CALLBACK *PSYMBOL_FUNCENTRY_CALLBACK)( __in HANDLE hProcess, __in DWORD AddrBase, __in_opt PVOID UserContext );</code>
            </para>
            </remarks>
        </member>
        <member name="T:Vanara.PInvoke.DbgHelp.PSYMBOL_FUNCENTRY_CALLBACK64">
            <summary>
            <para>
            An application-defined callback function used with the SymRegisterFunctionEntryCallback64 function. It is called by the stack
            walking procedure.
            </para>
            <para>
            The <c>PSYMBOL_FUNCENTRY_CALLBACK64</c> type defines a pointer to this callback function.
            <c>SymRegisterFunctionEntryCallbackProc64</c> is a placeholder for the application-defined function name.
            </para>
            </summary>
            <param name="hProcess">A handle to the process that was originally passed to the StackWalk64 function.</param>
            <param name="AddrBase">The address of an instruction for which the callback function should return a function table entry.</param>
            <param name="UserContext">
            The user-defined value specified in SymRegisterFunctionEntryCallback64, or <c>NULL</c>. Typically, this parameter is used by an
            application to pass a pointer to a data structure that lets the callback function establish some context.
            </param>
            <returns>
            <para>Return the value <c>NULL</c> if no function table entry is available.</para>
            <para>
            On success, return a pointer to an <c>IMAGE_RUNTIME_FUNCTION_ENTRY</c> structure. Refer to the header file WinNT.h for the
            definition of this function.
            </para>
            </returns>
            <remarks>
            <para>
            The structure must be returned in exactly the form it exists in the process being debugged. Some members may be pointers to
            other locations in the process address space. The ReadProcessMemoryProc64 callback function may be called to retrieve the
            information at these locations.
            </para>
            <para>
            The calling application gets called through the registered callback function as a result of a call to the StackWalk64 function.
            The calling application must be prepared for the possible side effects that this can cause. If the application has only one
            callback function that is being used by multiple threads, then it may be necessary to synchronize some types of data access
            while in the context of the callback function.
            </para>
            <para>
            This function is similar to the FunctionTableAccessProc64 callback function. The difference is that
            <c>FunctionTableAccessProc64</c> returns an IMAGE_FUNCTION_ENTRY structure, while this function returns an
            <c>IMAGE_RUNTIME_FUNCTION_ENTRY</c> structure.
            </para>
            <para>
            This callback function supersedes the PSYMBOL_FUNCENTRY_CALLBACK callback function. PSYMBOL_FUNCENTRY_CALLBACK is defined as
            follows in Dbghelp.h.
            </para>
            <para>
            <code>#if !defined(_IMAGEHLP_SOURCE_) &amp;&amp; defined(_IMAGEHLP64) #define PSYMBOL_FUNCENTRY_CALLBACK PSYMBOL_FUNCENTRY_CALLBACK64 #endif typedef PVOID (CALLBACK *PSYMBOL_FUNCENTRY_CALLBACK)( __in HANDLE hProcess, __in DWORD AddrBase, __in_opt PVOID UserContext );</code>
            </para>
            </remarks>
        </member>
        <member name="T:Vanara.PInvoke.DbgHelp.PSYMBOL_REGISTERED_CALLBACK">
            <summary>
            <para>An application-defined callback function used with the SymRegisterCallback64 function. It is called by the symbol handler.</para>
            <para>
            The <c>PSYMBOL_REGISTERED_CALLBACK64</c> type defines a pointer to this callback function. <c>SymRegisterCallbackProc64</c> is a
            placeholder for the application-defined function name.
            </para>
            </summary>
            <param name="hProcess">A handle to the process that was originally passed to the SymInitialize function.</param>
            <param name="ActionCode">
            <para>The callback code. This parameter can be one of the following values.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>CBA_DEBUG_INFO 0x10000000</term>
            <term>Display verbose information. The CallbackData parameter is a pointer to a string.</term>
            </item>
            <item>
            <term>CBA_DEFERRED_SYMBOL_LOAD_CANCEL 0x00000007</term>
            <term>
            Deferred symbol loading has started. To cancel the symbol load, return TRUE. The CallbackData parameter is a pointer to a
            IMAGEHLP_DEFERRED_SYMBOL_LOAD64 structure.
            </term>
            </item>
            <item>
            <term>CBA_DEFERRED_SYMBOL_LOAD_COMPLETE 0x00000002</term>
            <term>Deferred symbol load has completed. The CallbackData parameter is a pointer to a IMAGEHLP_DEFERRED_SYMBOL_LOAD64 structure.</term>
            </item>
            <item>
            <term>CBA_DEFERRED_SYMBOL_LOAD_FAILURE 0x00000003</term>
            <term>
            Deferred symbol load has failed. The CallbackData parameter is a pointer to a IMAGEHLP_DEFERRED_SYMBOL_LOAD64 structure. The
            symbol handler will attempt to load the symbols again if the callback function sets the FileName member of this structure.
            </term>
            </item>
            <item>
            <term>CBA_DEFERRED_SYMBOL_LOAD_PARTIAL 0x00000020</term>
            <term>
            Deferred symbol load has partially completed. The symbol loader is unable to read the image header from either the image file or
            the specified module. The CallbackData parameter is a pointer to a IMAGEHLP_DEFERRED_SYMBOL_LOAD64 structure. The symbol handler
            will attempt to load the symbols again if the callback function sets the FileName member of this structure. DbgHelp 5.1: This
            value is not supported.
            </term>
            </item>
            <item>
            <term>CBA_DEFERRED_SYMBOL_LOAD_START 0x00000001</term>
            <term>Deferred symbol load has started. The CallbackData parameter is a pointer to a IMAGEHLP_DEFERRED_SYMBOL_LOAD64 structure.</term>
            </item>
            <item>
            <term>CBA_DUPLICATE_SYMBOL 0x00000005</term>
            <term>
            Duplicate symbols were found. This reason is used only in COFF or CodeView format. The CallbackData parameter is a pointer to a
            IMAGEHLP_DUPLICATE_SYMBOL64 structure. To specify which symbol to use, set the SelectedSymbol member of this structure.
            </term>
            </item>
            <item>
            <term>CBA_EVENT 0x00000010</term>
            <term>
            Display verbose information. If you do not handle this event, the information is resent through the CBA_DEBUG_INFO event. The
            CallbackData parameter is a pointer to a IMAGEHLP_CBA_EVENT structure.
            </term>
            </item>
            <item>
            <term>CBA_READ_MEMORY 0x00000006</term>
            <term>
            The loaded image has been read. The CallbackData parameter is a pointer to a IMAGEHLP_CBA_READ_MEMORY structure. The callback
            function should read the number of bytes specified by the bytes member into the buffer specified by the buf member, and update
            the bytesread member accordingly.
            </term>
            </item>
            <item>
            <term>CBA_SET_OPTIONS 0x00000008</term>
            <term>
            Symbol options have been updated. To retrieve the current options, call the SymGetOptions function. The CallbackData parameter
            should be ignored.
            </term>
            </item>
            <item>
            <term>CBA_SRCSRV_EVENT 0x40000000</term>
            <term>
            Display verbose information for source server. If you do not handle this event, the information is resent through the
            CBA_DEBUG_INFO event. The CallbackData parameter is a pointer to a IMAGEHLP_CBA_EVENT structure. DbgHelp 6.6 and earlier: This
            value is not supported.
            </term>
            </item>
            <item>
            <term>CBA_SRCSRV_INFO 0x20000000</term>
            <term>
            Display verbose information for source server. The CallbackData parameter is a pointer to a string. DbgHelp 6.6 and earlier:
            This value is not supported.
            </term>
            </item>
            <item>
            <term>CBA_SYMBOLS_UNLOADED 0x00000004</term>
            <term>Symbols have been unloaded. The CallbackData parameter should be ignored.</term>
            </item>
            </list>
            </param>
            <param name="CallbackData">
            <para>Data for the operation. The format of this data depends on the value of the ActionCode parameter.</para>
            <para>
            If the callback function was registered with SymRegisterCallbackW64, the data is a Unicode string or data structure. Otherwise,
            the data uses ANSI format.
            </para>
            </param>
            <param name="UserContext">
            User-defined value specified in SymRegisterCallback64, or <c>NULL</c>. Typically, this parameter is used by an application to
            pass a pointer to a data structure that lets the callback function establish some context.
            </param>
            <returns>
            <para>To indicate success handling the code, return <c>TRUE</c>.</para>
            <para>
            To indicate failure handling the code, return <c>FALSE</c>. If your code does not handle a particular code, you should also
            return <c>FALSE</c>. (Returning <c>TRUE</c> in this case may have unintended consequences.)
            </para>
            </returns>
            <remarks>
            <para>
            The calling application gets called through the registered callback function as a result of another call to one of the symbol
            handler functions. The calling application must be prepared for the possible side effects that this can cause. If the
            application has only one callback function that is being used by multiple threads, then care may be necessary to synchronize
            some types of data access while in the context of the callback function.
            </para>
            <para>
            This callback function supersedes the PSYMBOL_REGISTERED_CALLBACK callback function. PSYMBOL_REGISTERED_CALLBACK is defined as
            follows in Dbghelp.h.
            </para>
            <para>
            <code>#if !defined(_IMAGEHLP_SOURCE_) &amp;&amp; defined(_IMAGEHLP64) #define PSYMBOL_REGISTERED_CALLBACK PSYMBOL_REGISTERED_CALLBACK64 #else typedef BOOL (CALLBACK *PSYMBOL_REGISTERED_CALLBACK)( __in HANDLE hProcess, __in ULONG ActionCode, __in_opt PVOID CallbackData, __in_opt PVOID UserContext ); #endif</code>
            </para>
            <para>For a more extensive example, read Getting Notifications.</para>
            </remarks>
        </member>
        <member name="T:Vanara.PInvoke.DbgHelp.PSYMBOL_REGISTERED_CALLBACK64">
            <summary>
            <para>An application-defined callback function used with the SymRegisterCallback64 function. It is called by the symbol handler.</para>
            <para>
            The <c>PSYMBOL_REGISTERED_CALLBACK64</c> type defines a pointer to this callback function. <c>SymRegisterCallbackProc64</c> is a
            placeholder for the application-defined function name.
            </para>
            </summary>
            <param name="hProcess">A handle to the process that was originally passed to the SymInitialize function.</param>
            <param name="ActionCode">
            <para>The callback code. This parameter can be one of the following values.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>CBA_DEBUG_INFO 0x10000000</term>
            <term>Display verbose information. The CallbackData parameter is a pointer to a string.</term>
            </item>
            <item>
            <term>CBA_DEFERRED_SYMBOL_LOAD_CANCEL 0x00000007</term>
            <term>
            Deferred symbol loading has started. To cancel the symbol load, return TRUE. The CallbackData parameter is a pointer to a
            IMAGEHLP_DEFERRED_SYMBOL_LOAD64 structure.
            </term>
            </item>
            <item>
            <term>CBA_DEFERRED_SYMBOL_LOAD_COMPLETE 0x00000002</term>
            <term>Deferred symbol load has completed. The CallbackData parameter is a pointer to a IMAGEHLP_DEFERRED_SYMBOL_LOAD64 structure.</term>
            </item>
            <item>
            <term>CBA_DEFERRED_SYMBOL_LOAD_FAILURE 0x00000003</term>
            <term>
            Deferred symbol load has failed. The CallbackData parameter is a pointer to a IMAGEHLP_DEFERRED_SYMBOL_LOAD64 structure. The
            symbol handler will attempt to load the symbols again if the callback function sets the FileName member of this structure.
            </term>
            </item>
            <item>
            <term>CBA_DEFERRED_SYMBOL_LOAD_PARTIAL 0x00000020</term>
            <term>
            Deferred symbol load has partially completed. The symbol loader is unable to read the image header from either the image file or
            the specified module. The CallbackData parameter is a pointer to a IMAGEHLP_DEFERRED_SYMBOL_LOAD64 structure. The symbol handler
            will attempt to load the symbols again if the callback function sets the FileName member of this structure. DbgHelp 5.1: This
            value is not supported.
            </term>
            </item>
            <item>
            <term>CBA_DEFERRED_SYMBOL_LOAD_START 0x00000001</term>
            <term>Deferred symbol load has started. The CallbackData parameter is a pointer to a IMAGEHLP_DEFERRED_SYMBOL_LOAD64 structure.</term>
            </item>
            <item>
            <term>CBA_DUPLICATE_SYMBOL 0x00000005</term>
            <term>
            Duplicate symbols were found. This reason is used only in COFF or CodeView format. The CallbackData parameter is a pointer to a
            IMAGEHLP_DUPLICATE_SYMBOL64 structure. To specify which symbol to use, set the SelectedSymbol member of this structure.
            </term>
            </item>
            <item>
            <term>CBA_EVENT 0x00000010</term>
            <term>
            Display verbose information. If you do not handle this event, the information is resent through the CBA_DEBUG_INFO event. The
            CallbackData parameter is a pointer to a IMAGEHLP_CBA_EVENT structure.
            </term>
            </item>
            <item>
            <term>CBA_READ_MEMORY 0x00000006</term>
            <term>
            The loaded image has been read. The CallbackData parameter is a pointer to a IMAGEHLP_CBA_READ_MEMORY structure. The callback
            function should read the number of bytes specified by the bytes member into the buffer specified by the buf member, and update
            the bytesread member accordingly.
            </term>
            </item>
            <item>
            <term>CBA_SET_OPTIONS 0x00000008</term>
            <term>
            Symbol options have been updated. To retrieve the current options, call the SymGetOptions function. The CallbackData parameter
            should be ignored.
            </term>
            </item>
            <item>
            <term>CBA_SRCSRV_EVENT 0x40000000</term>
            <term>
            Display verbose information for source server. If you do not handle this event, the information is resent through the
            CBA_DEBUG_INFO event. The CallbackData parameter is a pointer to a IMAGEHLP_CBA_EVENT structure. DbgHelp 6.6 and earlier: This
            value is not supported.
            </term>
            </item>
            <item>
            <term>CBA_SRCSRV_INFO 0x20000000</term>
            <term>
            Display verbose information for source server. The CallbackData parameter is a pointer to a string. DbgHelp 6.6 and earlier:
            This value is not supported.
            </term>
            </item>
            <item>
            <term>CBA_SYMBOLS_UNLOADED 0x00000004</term>
            <term>Symbols have been unloaded. The CallbackData parameter should be ignored.</term>
            </item>
            </list>
            </param>
            <param name="CallbackData">
            <para>Data for the operation. The format of this data depends on the value of the ActionCode parameter.</para>
            <para>
            If the callback function was registered with SymRegisterCallbackW64, the data is a Unicode string or data structure. Otherwise,
            the data uses ANSI format.
            </para>
            </param>
            <param name="UserContext">
            User-defined value specified in SymRegisterCallback64, or <c>NULL</c>. Typically, this parameter is used by an application to
            pass a pointer to a data structure that lets the callback function establish some context.
            </param>
            <returns>
            <para>To indicate success handling the code, return <c>TRUE</c>.</para>
            <para>
            To indicate failure handling the code, return <c>FALSE</c>. If your code does not handle a particular code, you should also
            return <c>FALSE</c>. (Returning <c>TRUE</c> in this case may have unintended consequences.)
            </para>
            </returns>
            <remarks>
            <para>
            The calling application gets called through the registered callback function as a result of another call to one of the symbol
            handler functions. The calling application must be prepared for the possible side effects that this can cause. If the
            application has only one callback function that is being used by multiple threads, then care may be necessary to synchronize
            some types of data access while in the context of the callback function.
            </para>
            <para>
            This callback function supersedes the PSYMBOL_REGISTERED_CALLBACK callback function. PSYMBOL_REGISTERED_CALLBACK is defined as
            follows in Dbghelp.h.
            </para>
            <para>
            <code>#if !defined(_IMAGEHLP_SOURCE_) &amp;&amp; defined(_IMAGEHLP64) #define PSYMBOL_REGISTERED_CALLBACK PSYMBOL_REGISTERED_CALLBACK64 #else typedef BOOL (CALLBACK *PSYMBOL_REGISTERED_CALLBACK)( __in HANDLE hProcess, __in ULONG ActionCode, __in_opt PVOID CallbackData, __in_opt PVOID UserContext ); #endif</code>
            </para>
            <para>For a more extensive example, read Getting Notifications.</para>
            </remarks>
        </member>
        <member name="T:Vanara.PInvoke.DbgHelp.CBA">
            <summary>Callback code for PSYMBOL_REGISTERED_CALLBACK.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.CBA.CBA_CHECK_ARM_MACHINE_THUMB_TYPE_OVERRIDE">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.CBA.CBA_CHECK_ENGOPT_DISALLOW_NETWORK_PATHS">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.CBA.CBA_ENGINE_PRESENT">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.CBA.CBA_UPDATE_STATUS_BAR">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.CBA.CBA_XML_LOG">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.CBA.CBA_DEBUG_INFO">
            <summary>
            Display verbose information.
            <para>The CallbackData parameter is a pointer to a string.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.CBA.CBA_DEFERRED_SYMBOL_LOAD_CANCEL">
            <summary>
            Deferred symbol loading has started. To cancel the symbol load, return TRUE.
            <para>The CallbackData parameter is a pointer to a IMAGEHLP_DEFERRED_SYMBOL_LOAD64 structure.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.CBA.CBA_DEFERRED_SYMBOL_LOAD_COMPLETE">
            <summary>
            Deferred symbol load has completed.
            <para>The CallbackData parameter is a pointer to a IMAGEHLP_DEFERRED_SYMBOL_LOAD64 structure.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.CBA.CBA_DEFERRED_SYMBOL_LOAD_FAILURE">
            <summary>
            Deferred symbol load has failed.
            <para>
            The CallbackData parameter is a pointer to a IMAGEHLP_DEFERRED_SYMBOL_LOAD64 structure. The symbol handler will attempt to
            load the symbols again if the callback function sets the FileName member of this structure.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.CBA.CBA_DEFERRED_SYMBOL_LOAD_PARTIAL">
            <summary>
            Deferred symbol load has partially completed. The symbol loader is unable to read the image header from either the image
            file or the specified module.
            <para>
            The CallbackData parameter is a pointer to a IMAGEHLP_DEFERRED_SYMBOL_LOAD64 structure. The symbol handler will attempt to
            load the symbols again if the callback function sets the FileName member of this structure.
            </para>
            <para>DbgHelp 5.1: This value is not supported.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.CBA.CBA_DEFERRED_SYMBOL_LOAD_START">
            <summary>
            Deferred symbol load has started.
            <para>The CallbackData parameter is a pointer to a IMAGEHLP_DEFERRED_SYMBOL_LOAD64 structure.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.CBA.CBA_DUPLICATE_SYMBOL">
            <summary>
            Duplicate symbols were found. This reason is used only in COFF or CodeView format.
            <para>
            The CallbackData parameter is a pointer to a IMAGEHLP_DUPLICATE_SYMBOL64 structure. To specify which symbol to use, set the
            SelectedSymbol member of this structure.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.CBA.CBA_EVENT">
            <summary>
            Display verbose information. If you do not handle this event, the information is resent through the CBA_DEBUG_INFO event.
            <para>The CallbackData parameter is a pointer to a IMAGEHLP_CBA_EVENT structure.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.CBA.CBA_READ_MEMORY">
            <summary>
            The loaded image has been read.
            <para>
            The CallbackData parameter is a pointer to a IMAGEHLP_CBA_READ_MEMORY structure. The callback function should read the
            number of bytes specified by the bytes member into the buffer specified by the buf member, and update the bytesread member accordingly.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.CBA.CBA_SET_OPTIONS">
            <summary>
            Symbol options have been updated. To retrieve the current options, call the SymGetOptions function.
            <para>The CallbackData parameter should be ignored.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.CBA.CBA_SRCSRV_EVENT">
            <summary>
            Display verbose information for source server. If you do not handle this event, the information is resent through the
            CBA_DEBUG_INFO event.
            <para>The CallbackData parameter is a pointer to a IMAGEHLP_CBA_EVENT structure.</para>
            <para>DbgHelp 6.6 and earlier: This value is not supported.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.CBA.CBA_SRCSRV_INFO">
            <summary>
            Display verbose information for source server.
            <para>The CallbackData parameter is a pointer to a string.</para>
            <para>DbgHelp 6.6 and earlier: This value is not supported.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.CBA.CBA_SYMBOLS_UNLOADED">
            <summary>
            Symbols have been unloaded.
            <para>The CallbackData parameter should be ignored.</para>
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.DbgHelp.ESLFLAG">
            <summary>Flags for <see cref="M:Vanara.PInvoke.DbgHelp.SymEnumSourceLines(Vanara.PInvoke.HPROCESS,System.UInt64,System.String,System.String,System.UInt32,Vanara.PInvoke.DbgHelp.ESLFLAG,Vanara.PInvoke.DbgHelp.PSYM_ENUMLINES_CALLBACK,System.IntPtr)"/>.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.ESLFLAG.ESLFLAG_FULLPATH">
            <summary>The function matches the full path in the File parameter.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.ESLFLAG.ESLFLAG_NEAREST">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.ESLFLAG.ESLFLAG_PREV">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.ESLFLAG.ESLFLAG_NEXT">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.ESLFLAG.ESLFLAG_INLINE_SITE">
            <summary/>
        </member>
        <member name="T:Vanara.PInvoke.DbgHelp.IMAGEHLP_HD_TYPE">
            <summary>The directory to be retrieved.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGEHLP_HD_TYPE.hdBase">
            <summary>The home directory.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGEHLP_HD_TYPE.hdSym">
            <summary>The symbol directory.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGEHLP_HD_TYPE.hdSrc">
            <summary>The source directory.</summary>
        </member>
        <member name="T:Vanara.PInvoke.DbgHelp.IMAGEHLP_SF_TYPE">
            <summary>The type of symbol file.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGEHLP_SF_TYPE.sfImage">
            <summary>A .exe or .dll file.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGEHLP_SF_TYPE.sfDbg">
            <summary>A .dbg file.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGEHLP_SF_TYPE.sfPdb">
            <summary>A .pdb file.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGEHLP_SF_TYPE.sfMpd">
            <summary>Reserved.</summary>
        </member>
        <member name="T:Vanara.PInvoke.DbgHelp.SLMFLAG">
            <summary>Flags for <see cref="M:Vanara.PInvoke.DbgHelp.SymLoadModuleEx(Vanara.PInvoke.HPROCESS,Vanara.PInvoke.HFILE,System.String,System.String,System.UInt64,System.UInt32,Vanara.PInvoke.DbgHelp.MODLOAD_DATA@,Vanara.PInvoke.DbgHelp.SLMFLAG)"/>.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.SLMFLAG.SLMFLAG_VIRTUAL">
            <summary>
            Creates a virtual module named ModuleName at the address specified in BaseOfDll. To add symbols to this module, call the
            SymAddSymbol function.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.SLMFLAG.SLMFLAG_ALT_INDEX">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.SLMFLAG.SLMFLAG_NO_SYMBOLS">
            <summary>Loads the module but not the symbols for the module.</summary>
        </member>
        <member name="T:Vanara.PInvoke.DbgHelp.SSRVOPT">
            <summary>The format of the id parameter. This parameter can be one of the following values.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.SSRVOPT.SSRVOPT_CALLBACK">
            <summary>
            Callback function. The data parameter contains a pointer to the callback function. If data is NULL, any previously-set
            callback function is ignored.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.SSRVOPT.SSRVOPT_DWORD">
            <summary>The id parameter is a DWORD.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.SSRVOPT.SSRVOPT_DWORDPTR">
            <summary>The id parameter is a pointer to a DWORD.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.SSRVOPT.SSRVOPT_GUIDPTR">
            <summary>The id parameter is a pointer to a GUID.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.SSRVOPT.SSRVOPT_OLDGUIDPTR">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.SSRVOPT.SSRVOPT_UNATTENDED">
            <summary>
            If data is TRUE, SymSrv will not display dialog boxes or pop-ups. If data is FALSE, SymSrv will display these graphical
            features when making connections.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.SSRVOPT.SSRVOPT_NOCOPY">
            <summary>
            If data is TRUE, SymSrv will not verify that the path parameter passed by the SymbolServer function actually exists. In this
            case, SymbolServer will always return TRUE.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.SSRVOPT.SSRVOPT_GETPATH">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.SSRVOPT.SSRVOPT_PARENTWIN">
            <summary>
            The data parameter is an HWND value that specifies the handle to the parent window that should be used for all dialog boxes
            and pop-ups. If data is NULL, SymSrv will use the desktop window as the parent (this is the default).
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.SSRVOPT.SSRVOPT_PARAMTYPE">
            <summary>
            Data type of the id parameter passed to the SymbolServer function. The data parameter is of type UINT_PTR and can be one of
            the following values: SSRVOPT_DWORD (default) SSRVOPT_DWORDPTR SSRVOPT_GUIDPTR
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.SSRVOPT.SSRVOPT_SECURE">
            <summary>
            If data is TRUE, SymSrv will not use the downstream store specified in _NT_SYMBOL_PATH. DbgHelp 6.0 and earlier: This value
            is not supported.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.SSRVOPT.SSRVOPT_TRACE">
            <summary>SymSrv will provide debug trace information. DbgHelp 5.1: This value is not supported.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.SSRVOPT.SSRVOPT_SETCONTEXT">
            <summary>
            The data parameter specifies the value passed to the SymbolServerCallback function in the context parameter. DbgHelp 6.0 and
            earlier: This value is not supported.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.SSRVOPT.SSRVOPT_PROXY">
            <summary>
            If data is NULL, the default proxy server is used. Otherwise, data is a null-terminated string that specifies the name and
            port number of the proxy server. The name and port number are separated by a colon (:). For more information, see Symbol
            Servers and Internet Firewalls. DbgHelp 6.0 and earlier: This value is not supported.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.SSRVOPT.SSRVOPT_DOWNSTREAM_STORE">
            <summary>
            The data parameter contains a string that specifies the downstream store path. For more information, see Using SymSrv.
            DbgHelp 6.0 and earlier: This value is not supported.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.SSRVOPT.SSRVOPT_OVERWRITE">
            <summary>
            If data is TRUE, SymSrv will overwrite the downlevel store from the symbol store. DbgHelp 6.1 and earlier: This value is not supported.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.SSRVOPT.SSRVOPT_RESETTOU">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.SSRVOPT.SSRVOPT_CALLBACKW">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.SSRVOPT.SSRVOPT_FLAT_DEFAULT_STORE">
            <summary>
            If data is TRUE, SymSrv uses the default downstream store as a flat directory. DbgHelp 6.1 and earlier: This value is not supported.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.SSRVOPT.SSRVOPT_PROXYW">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.SSRVOPT.SSRVOPT_MESSAGE">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.SSRVOPT.SSRVOPT_SERVICE">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.SSRVOPT.SSRVOPT_FAVOR_COMPRESSED">
            <summary>
            If data is TRUE, SymSrv uses symbols that do not have an address. By default, SymSrv filters out symbols that do not have an address.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.SSRVOPT.SSRVOPT_STRING">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.SSRVOPT.SSRVOPT_WINHTTP">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.SSRVOPT.SSRVOPT_WININET">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.SSRVOPT.SSRVOPT_DONT_UNCOMPRESS">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.SSRVOPT.SSRVOPT_DISABLE_PING_HOST">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.SSRVOPT.SSRVOPT_DISABLE_TIMEOUT">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.SSRVOPT.SSRVOPT_ENABLE_COMM_MSG">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.SSRVOPT.SSRVOPT_URI_FILTER">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.SSRVOPT.SSRVOPT_URI_TIERS">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.SSRVOPT.SSRVOPT_RETRY_APP_HANG">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.SSRVOPT.SSRVOPT_RESET">
            <summary>Resets default options.</summary>
        </member>
        <member name="T:Vanara.PInvoke.DbgHelp.SYMENUM">
            <summary>Indicates possible options.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.SYMENUM.SYMENUM_OPTIONS_DEFAULT">
            <summary>Use the default options.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.SYMENUM.SYMENUM_OPTIONS_INLINE">
            <summary>Enumerate inline symbols.</summary>
        </member>
        <member name="T:Vanara.PInvoke.DbgHelp.SYMOPT">
            <summary>The symbol options. Zero is a valid value and indicates that all options are turned off.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.SYMOPT.SYMOPT_ALLOW_ABSOLUTE_SYMBOLS">
            <summary>
            Enables the use of symbols that are stored with absolute addresses. Most symbols are stored as RVAs from the base of the
            module. DbgHelp translates them to absolute addresses. There are symbols that are stored as an absolute address. These have
            very specialized purposes and are typically not used.
            <para>DbgHelp 5.1 and earlier: This value is not supported.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.SYMOPT.SYMOPT_ALLOW_ZERO_ADDRESS">
            <summary>
            Enables the use of symbols that do not have an address. By default, DbgHelp filters out symbols that do not have an address.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.SYMOPT.SYMOPT_AUTO_PUBLICS">
            <summary>
            Do not search the public symbols when searching for symbols by address, or when enumerating symbols, unless they were not
            found in the global symbols or within the current scope. This option has no effect with SYMOPT_PUBLICS_ONLY.
            <para>DbgHelp 5.1 and earlier: This value is not supported.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.SYMOPT.SYMOPT_CASE_INSENSITIVE">
            <summary>All symbol searches are insensitive to case.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.SYMOPT.SYMOPT_DEBUG">
            <summary>Pass debug output through OutputDebugString or the SymRegisterCallbackProc64 callback function.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.SYMOPT.SYMOPT_DEFERRED_LOADS">
            <summary>
            Symbols are not loaded until a reference is made requiring the symbols be loaded. This is the fastest, most efficient way to
            use the symbol handler.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.SYMOPT.SYMOPT_DISABLE_SYMSRV_AUTODETECT">
            <summary>
            Disables the auto-detection of symbol server stores in the symbol path, even without the "SRV*" designation, maintaining
            compatibility with previous behavior.
            <para>DbgHelp 6.6 and earlier: This value is not supported.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.SYMOPT.SYMOPT_EXACT_SYMBOLS">
            <summary>Do not load an unmatched .pdb file. Do not load export symbols if all else fails.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.SYMOPT.SYMOPT_FAIL_CRITICAL_ERRORS">
            <summary>
            Do not display system dialog boxes when there is a media failure such as no media in a drive. Instead, the failure happens silently.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.SYMOPT.SYMOPT_FAVOR_COMPRESSED">
            <summary>
            If there is both an uncompressed and a compressed file available, favor the compressed file. This option is good for slow connections.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.SYMOPT.SYMOPT_FLAT_DIRECTORY">
            <summary>
            Symbols are stored in the root directory of the default downstream store.
            <para>DbgHelp 6.1 and earlier: This value is not supported.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.SYMOPT.SYMOPT_IGNORE_CVREC">
            <summary>Ignore path information in the CodeView record of the image header when loading a .pdb file.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.SYMOPT.SYMOPT_IGNORE_IMAGEDIR">
            <summary>
            Ignore the image directory.
            <para>DbgHelp 6.1 and earlier: This value is not supported.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.SYMOPT.SYMOPT_IGNORE_NT_SYMPATH">
            <summary>
            Do not use the path specified by _NT_SYMBOL_PATH if the user calls SymSetSearchPath without a valid path.
            <para>DbgHelp 5.1: This value is not supported.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.SYMOPT.SYMOPT_INCLUDE_32BIT_MODULES">
            <summary>When debugging on 64-bit Windows, include any 32-bit modules.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.SYMOPT.SYMOPT_LOAD_ANYTHING">
            <summary>Disable checks to ensure a file (.exe, .dbg., or .pdb) is the correct file. Instead, load the first file located.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.SYMOPT.SYMOPT_LOAD_LINES">
            <summary>Loads line number information.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.SYMOPT.SYMOPT_NO_CPP">
            <summary>
            All C++ decorated symbols containing the symbol separator "::" are replaced by "__". This option exists for debuggers that
            cannot handle parsing real C++ symbol names.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.SYMOPT.SYMOPT_NO_IMAGE_SEARCH">
            <summary>
            Do not search the image for the symbol path when loading the symbols for a module if the module header cannot be read.
            <para>DbgHelp 5.1: This value is not supported.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.SYMOPT.SYMOPT_NO_PROMPTS">
            <summary>Prevents prompting for validation from the symbol server.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.SYMOPT.SYMOPT_NO_PUBLICS">
            <summary>
            Do not search the publics table for symbols. This option should have little effect because there are copies of the public
            symbols in the globals table.
            <para>DbgHelp 5.1: This value is not supported.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.SYMOPT.SYMOPT_NO_UNQUALIFIED_LOADS">
            <summary>
            Prevents symbols from being loaded when the caller examines symbols across multiple modules. Examine only the module whose
            symbols have already been loaded.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.SYMOPT.SYMOPT_OVERWRITE">
            <summary>
            Overwrite the downlevel store from the symbol store.
            <para>DbgHelp 6.1 and earlier: This value is not supported.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.SYMOPT.SYMOPT_PUBLICS_ONLY">
            <summary>
            Do not use private symbols. The version of DbgHelp that shipped with earlier Windows release supported only public symbols;
            this option provides compatibility with this limitation.
            <para>DbgHelp 5.1: This value is not supported.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.SYMOPT.SYMOPT_SECURE">
            <summary>
            DbgHelp will not load any symbol server other than SymSrv. SymSrv will not use the downstream store specified in
            _NT_SYMBOL_PATH. After this flag has been set, it cannot be cleared.
            <para>DbgHelp 6.0 and 6.1: This flag can be cleared.</para>
            <para>DbgHelp 5.1: This value is not supported.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.SYMOPT.SYMOPT_UNDNAME">
            <summary>
            All symbols are presented in undecorated form.
            <para>
            This option has no effect on global or local symbols because they are stored undecorated. This option applies only to public symbols.
            </para>
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.DbgHelp.SYMSEARCH">
            <summary>The options that control the behavior of <see cref="M:Vanara.PInvoke.DbgHelp.SymSearch(Vanara.PInvoke.HPROCESS,System.UInt64,System.UInt32,System.UInt32,System.String,System.UInt64,Vanara.PInvoke.DbgHelp.PSYM_ENUMERATESYMBOLS_CALLBACK,System.IntPtr,Vanara.PInvoke.DbgHelp.SYMSEARCH)"/>.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.SYMSEARCH.SYMSEARCH_ALLITEMS">
            <summary>Include all symbols and other data in the .pdb files. DbgHelp 6.6 and earlier: This value is not supported.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.SYMSEARCH.SYMSEARCH_GLOBALSONLY">
            <summary>Search only for global symbols.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.SYMSEARCH.SYMSEARCH_MASKOBJS">
            <summary>For internal use only.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.SYMSEARCH.SYMSEARCH_RECURSE">
            <summary>Recurse from the top to find all symbols.</summary>
        </member>
        <member name="T:Vanara.PInvoke.DbgHelp.SYMSTOREOPT">
            <summary>The flags that control <see cref="M:Vanara.PInvoke.DbgHelp.SymSrvStoreFile(Vanara.PInvoke.HPROCESS,System.String,System.String,Vanara.PInvoke.DbgHelp.SYMSTOREOPT)"/>.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.SYMSTOREOPT.SYMSTOREOPT_ALT_INDEX">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.SYMSTOREOPT.SYMSTOREOPT_COMPRESS">
            <summary>Compress the file.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.SYMSTOREOPT.SYMSTOREOPT_OVERWRITE">
            <summary>Overwrite the file if it exists.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.SYMSTOREOPT.SYMSTOREOPT_PASS_IF_EXISTS">
            <summary>Do not report an error if the file already exists in the symbol store.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.SYMSTOREOPT.SYMSTOREOPT_POINTER">
            <summary>Store in File.ptr.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.SYMSTOREOPT.SYMSTOREOPT_RETURNINDEX">
            <summary>Return the index only.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.SYMSTOREOPT.SYMSTOREOPT_UNICODE">
            <summary/>
        </member>
        <member name="M:Vanara.PInvoke.DbgHelp.SymAddrIncludeInlineTrace(Vanara.PInvoke.HPROCESS,System.UInt64)">
            <summary>Indicates whether the specified address is within an inline frame.</summary>
            <param name="hProcess">A handle to a process. This handle must have been previously passed to the SymInitialize function.</param>
            <param name="Address">The address.</param>
            <returns>Returns zero if the address is not within an inline frame.</returns>
        </member>
        <member name="M:Vanara.PInvoke.DbgHelp.SymAddSourceStream(Vanara.PInvoke.HPROCESS,System.UInt64,System.String,System.IntPtr,Vanara.PInvoke.SizeT)">
            <summary>Adds the stream to the specified module for use by the Source Server.</summary>
            <param name="hProcess">A handle to a process. This handle must have been previously passed to the SymInitialize function.</param>
            <param name="Base">The base address of the module.</param>
            <param name="StreamFile">
            A null-terminated string that contains the absolute or relative path to a file that contains the source indexing stream. Can be
            <c>NULL</c> if Buffer is not <c>NULL</c>.
            </param>
            <param name="Buffer">A buffer that contains the source indexing stream. Can be <c>NULL</c> if StreamFile is not <c>NULL</c>.</param>
            <param name="Size">Size, in bytes, of the Buffer buffer.</param>
            <returns>
            <para>If the function succeeds, the return value is <c>TRUE</c>.</para>
            <para>If the function fails, the return value is <c>FALSE</c>. To retrieve extended error information, call GetLastError.</para>
            </returns>
            <remarks>
            <para>
            <c>SymAddSourceStream</c> adds a stream of data formatted for use by the source Server to a designated module. The caller can
            pass the stream either as a buffer in the Buffer parameter or a file in the StreamFile parameter. If both parameters are filled,
            then the function uses the Buffer parameter. If both parameters are <c>NULL</c>, then the function returns <c>FALSE</c> and the
            last-error code is set to <c>ERROR_INVALID_PARAMETER</c>.
            </para>
            <para>
            It is important to note that <c>SymAddSourceStream</c> does not add the stream to any corresponding PDB in order to persist the
            data. This function is used by those programmatically implementing their own debuggers in scenarios in which a PDB is not available.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.DbgHelp.SymAddSymbol(Vanara.PInvoke.HPROCESS,System.UInt64,System.String,System.UInt64,System.UInt32,System.UInt32)">
            <summary>Adds a virtual symbol to the specified module.</summary>
            <param name="hProcess">A handle to a process. This handle must have been previously passed to the SymInitialize function.</param>
            <param name="BaseOfDll">The base address of the module.</param>
            <param name="Name">The name of the symbol. The maximum size of a symbol name is MAX_SYM_NAME characters.</param>
            <param name="Address">The address of the symbol. This address must be within the address range of the specified module.</param>
            <param name="Size">The size of the symbol, in bytes. This parameter is optional.</param>
            <param name="Flags">This parameter is unused.</param>
            <returns>
            <para>If the function succeeds, the return value is <c>TRUE</c>.</para>
            <para>If the function fails, the return value is <c>FALSE</c>. To retrieve extended error information, call GetLastError.</para>
            </returns>
            <remarks>
            <para>
            All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will
            likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more
            than one thread to this function.
            </para>
            <para>To call the Unicode version of this function, define DBGHELP_TRANSLATE_TCHAR.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.DbgHelp.SymbolServerSetOptions(System.IntPtr,System.Int64)">
            <summary>
            <para>An entry point to the symbol server DLL. It is used to set the symbol server options.</para>
            <para>
            The <c>PSYMBOLSERVERSETOPTIONSPROC</c> type defines a pointer to this callback function. <c>SymbolServerSetOptions</c> is a
            placeholder for the library-defined function name.
            </para>
            </summary>
            <param name="options">[in] The option to be set (see Remarks).</param>
            <param name="data">[in] The server-specific option data. The format of this data depends on the value of options (see Remarks).</param>
            <returns>
            The server can return <c>TRUE</c> to indicate success, or return <c>FALSE</c> and call the <c>SetLastError</c> function to
            indicate an error condition.
            </returns>
            <remarks>
            <para>
            To call this function, you must use the <c>LoadLibrary</c> function to load the DLL and the <c>GetProcAddress</c> function to
            get the address of the function. The default implementation is in Symsrv.dll.
            </para>
            <para>If you are using Symsrv.dll as your symbol server, the options parameter should be one of the following values.</para>
            <list type="table">
            <listheader>
            <term>id</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>SSRVOPT_CALLBACK</term>
            <term>
            Callback function. The data parameter contains a pointer to the callback function. If data is NULL, any previously-set callback
            function is ignored.
            </term>
            </item>
            <item>
            <term>SSRVOPT_DOWNSTREAM_STORE</term>
            <term>
            The data parameter contains a string that specifies the downstream store path. For more information, see Using SymSrv. DbgHelp
            6.0 and earlier: This value is not supported.
            </term>
            </item>
            <item>
            <term>SSRVOPT_FLAT_DEFAULT_STORE</term>
            <term>
            If data is TRUE, SymSrv uses the default downstream store as a flat directory. DbgHelp 6.1 and earlier: This value is not supported.
            </term>
            </item>
            <item>
            <term>SSRVOPT_FAVOR_COMPRESSED</term>
            <term>
            If data is TRUE, SymSrv uses symbols that do not have an address. By default, SymSrv filters out symbols that do not have an address.
            </term>
            </item>
            <item>
            <term>SSRVOPT_NOCOPY</term>
            <term>
            If data is TRUE, SymSrv will not verify that the path parameter passed by the SymbolServer function actually exists. In this
            case, SymbolServer will always return TRUE.
            </term>
            </item>
            <item>
            <term>SSRVOPT_OVERWRITE</term>
            <term>
            If data is TRUE, SymSrv will overwrite the downlevel store from the symbol store. DbgHelp 6.1 and earlier: This value is not supported.
            </term>
            </item>
            <item>
            <term>SSRVOPT_PARAMTYPE</term>
            <term>
            Data type of the id parameter passed to the SymbolServer function. The data parameter is of type UINT_PTR and can be one of the
            following values: SSRVOPT_DWORD (default) SSRVOPT_DWORDPTR SSRVOPT_GUIDPTR
            </term>
            </item>
            <item>
            <term>SSRVOPT_PARENTWIN</term>
            <term>
            The data parameter is an HWND value that specifies the handle to the parent window that should be used for all dialog boxes and
            pop-ups. If data is NULL, SymSrv will use the desktop window as the parent (this is the default).
            </term>
            </item>
            <item>
            <term>SSRVOPT_PROXY</term>
            <term>
            If data is NULL, the default proxy server is used. Otherwise, data is a null-terminated string that specifies the name and port
            number of the proxy server. The name and port number are separated by a colon (:). For more information, see Symbol Servers and
            Internet Firewalls. DbgHelp 6.0 and earlier: This value is not supported.
            </term>
            </item>
            <item>
            <term>SSRVOPT_RESET</term>
            <term>Resets default options.</term>
            </item>
            <item>
            <term>SSRVOPT_SECURE</term>
            <term>
            If data is TRUE, SymSrv will not use the downstream store specified in _NT_SYMBOL_PATH. DbgHelp 6.0 and earlier: This value is
            not supported.
            </term>
            </item>
            <item>
            <term>SSRVOPT_SETCONTEXT</term>
            <term>
            The data parameter specifies the value passed to the SymbolServerCallback function in the context parameter. DbgHelp 6.0 and
            earlier: This value is not supported.
            </term>
            </item>
            <item>
            <term>SSRVOPT_TRACE</term>
            <term>SymSrv will provide debug trace information. DbgHelp 5.1: This value is not supported.</term>
            </item>
            <item>
            <term>SSRVOPT_UNATTENDED</term>
            <term>
            If data is TRUE, SymSrv will not display dialog boxes or pop-ups. If data is FALSE, SymSrv will display these graphical features
            when making connections.
            </term>
            </item>
            </list>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.DbgHelp.SymCleanup(Vanara.PInvoke.HPROCESS)">
            <summary>Deallocates all resources associated with the process handle.</summary>
            <param name="hProcess">A handle to the process that was originally passed to the SymInitialize function.</param>
            <returns>
            <para>If the function succeeds, the return value is <c>TRUE</c>.</para>
            <para>If the function fails, the return value is <c>FALSE</c>. To retrieve extended error information, call GetLastError.</para>
            </returns>
            <remarks>
            <para>
            This function frees all resources associated with the process handle. Failure to call this function causes memory and resource
            leaks in the calling application
            </para>
            <para>
            All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will
            likely result in unexpected behavior or memory corruption. To avoid this, call SymInitialize only when your process starts and
            <c>SymCleanup</c> only when your process ends. It is not necessary for each thread in the process to call these functions.
            </para>
            <para>Examples</para>
            <para>For an example, see Terminating the Symbol Handler.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.DbgHelp.SymCompareInlineTrace(Vanara.PInvoke.HPROCESS,System.UInt64,System.UInt32,System.UInt64,System.UInt64,System.UInt64)">
            <summary>Compares two inline traces.</summary>
            <param name="hProcess">A handle to a process. This handle must have been previously passed to the SymInitialize function.</param>
            <param name="Address1">The first address to be compared.</param>
            <param name="InlineContext1">The inline context for the first trace to be compared.</param>
            <param name="RetAddress1">The return address of the first trace to be compared.</param>
            <param name="Address2">The second address to be compared.</param>
            <param name="RetAddress2">The return address of the second trace to be compared.</param>
            <returns>
            <para>Indicates the result of the comparison.</para>
            <list type="table">
            <listheader>
            <term>Return code/value</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>SYM_INLINE_COMP_ERROR 0</term>
            <term>An error occurred.</term>
            </item>
            <item>
            <term>SYM_INLINE_COMP_IDENTICAL 1</term>
            <term>The inline contexts are identical.</term>
            </item>
            <item>
            <term>SYM_INLINE_COMP_STEPIN 2</term>
            <term>The inline trace is a step-in of an inline function.</term>
            </item>
            <item>
            <term>SYM_INLINE_COMP_STEPOUT 3</term>
            <term>The inline trace is a step-out of an inline function.</term>
            </item>
            <item>
            <term>SYM_INLINE_COMP_STEPOVER 4</term>
            <term>The inline trace is a step-over of an inline function.</term>
            </item>
            <item>
            <term>SYM_INLINE_COMP_DIFFERENT 5</term>
            <term>The inline contexts are different.</term>
            </item>
            </list>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.DbgHelp.SymDeleteSymbol(Vanara.PInvoke.HPROCESS,System.UInt64,System.String,System.UInt64,System.UInt32)">
            <summary>Deletes a virtual symbol from the specified module.</summary>
            <param name="hProcess">A handle to a process. This handle must have been previously passed to the SymInitialize function.</param>
            <param name="BaseOfDll">The base address of the module.</param>
            <param name="Name">The name of the symbol.</param>
            <param name="Address">The address of the symbol. This address must be within the address range of the specified module.</param>
            <param name="Flags">This parameter is unused.</param>
            <returns>
            <para>If the function succeeds, the return value is <c>TRUE</c>.</para>
            <para>If the function fails, the return value is <c>FALSE</c>. To retrieve extended error information, call GetLastError.</para>
            </returns>
            <remarks>
            <para>
            All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will
            likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more
            than one thread to this function.
            </para>
            <para>To call the Unicode version of this function, define DBGHELP_TRANSLATE_TCHAR.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.DbgHelp.SymEnumerateModules(Vanara.PInvoke.HPROCESS,Vanara.PInvoke.DbgHelp.PSYM_ENUMMODULES_CALLBACK,System.IntPtr)">
            <summary>Enumerates all modules that have been loaded for the process by the SymLoadModule64 or SymLoadModuleEx function.</summary>
            <param name="hProcess">A handle to the process that was originally passed to the SymInitialize function.</param>
            <param name="EnumModulesCallback">
            The enumeration callback function. This function is called once per module. For more information, see SymEnumerateModulesProc64.
            </param>
            <param name="UserContext">
            A user-defined value or <c>NULL</c>. This value is simply passed to the callback function. Normally, this parameter is used by
            an application to pass a pointer to a data structure that lets the callback function establish some type of context.
            </param>
            <returns>
            <para>If the function succeeds, the return value is <c>TRUE</c>.</para>
            <para>If the function fails, the return value is <c>FALSE</c>. To retrieve extended error information, call GetLastError.</para>
            </returns>
            <remarks>
            <para>
            The <c>SymEnumerateModules64</c> function enumerates all modules that have been loaded for the process by SymLoadModule64, even
            if the symbol loading is deferred. The enumeration callback function is called once for each module and is passed the module information.
            </para>
            <para>
            All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will
            likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more
            than one thread to this function.
            </para>
            <para>
            To call the Unicode version of this function, define DBGHELP_TRANSLATE_TCHAR. <c>SymEnumerateModulesW64</c> is defined as
            follows in Dbghelp.h.
            </para>
            <para>
            <code> BOOL IMAGEAPI SymEnumerateModulesW64( __in HANDLE hProcess, __in PSYM_ENUMMODULES_CALLBACKW64 EnumModulesCallback, __in_opt PVOID UserContext ); #ifdef DBGHELP_TRANSLATE_TCHAR #define SymEnumerateModules64 SymEnumerateModulesW64 #endif</code>
            </para>
            <para>
            This function supersedes the <c>SymEnumerateModules</c> function. For more information, see Updated Platform Support.
            <c>SymEnumerateModules</c> is defined as follows in Dbghelp.h.
            </para>
            <para>
            <code>#if !defined(_IMAGEHLP_SOURCE_) &amp;&amp; defined(_IMAGEHLP64) #define SymEnumerateModules SymEnumerateModules64 #else BOOL IMAGEAPI SymEnumerateModules( __in HANDLE hProcess, __in PSYM_ENUMMODULES_CALLBACK EnumModulesCallback, __in_opt PVOID UserContext ); #endif</code>
            </para>
            <para>Examples</para>
            <para>For an example, see Enumerating Symbol Modules.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.DbgHelp.SymEnumerateModules(Vanara.PInvoke.HPROCESS,System.Boolean)">
            <summary>Enumerates all modules that have been loaded for the process by the SymLoadModule64 or SymLoadModuleEx function.</summary>
            <param name="hProcess">A handle to the process that was originally passed to the SymInitialize function.</param>
            <param name="force32bit">If set to <see langword="true"/>, force loading a 32-bit module, even on 64-bit systems.</param>
            <returns>A list of loaded module names and bases.</returns>
            <remarks>
            <para>
            The <c>SymEnumerateModules</c> function enumerates all modules that have been loaded for the process by SymLoadModule, even if
            the symbol loading is deferred.
            </para>
            <para>
            All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will
            likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more
            than one thread to this function.
            </para>
            <para>This function supersedes the <c>SymEnumerateModules</c> function. For more information, see Updated Platform Support.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.DbgHelp.SymEnumerateModules64(Vanara.PInvoke.HPROCESS,Vanara.PInvoke.DbgHelp.PSYM_ENUMMODULES_CALLBACK64,System.IntPtr)">
            <summary>Enumerates all modules that have been loaded for the process by the SymLoadModule64 or SymLoadModuleEx function.</summary>
            <param name="hProcess">A handle to the process that was originally passed to the SymInitialize function.</param>
            <param name="EnumModulesCallback">
            The enumeration callback function. This function is called once per module. For more information, see SymEnumerateModulesProc64.
            </param>
            <param name="UserContext">
            A user-defined value or <c>NULL</c>. This value is simply passed to the callback function. Normally, this parameter is used by
            an application to pass a pointer to a data structure that lets the callback function establish some type of context.
            </param>
            <returns>
            <para>If the function succeeds, the return value is <c>TRUE</c>.</para>
            <para>If the function fails, the return value is <c>FALSE</c>. To retrieve extended error information, call GetLastError.</para>
            </returns>
            <remarks>
            <para>
            The <c>SymEnumerateModules64</c> function enumerates all modules that have been loaded for the process by SymLoadModule64, even
            if the symbol loading is deferred. The enumeration callback function is called once for each module and is passed the module information.
            </para>
            <para>
            All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will
            likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more
            than one thread to this function.
            </para>
            <para>
            To call the Unicode version of this function, define DBGHELP_TRANSLATE_TCHAR. <c>SymEnumerateModulesW64</c> is defined as
            follows in Dbghelp.h.
            </para>
            <para>
            <code> BOOL IMAGEAPI SymEnumerateModulesW64( __in HANDLE hProcess, __in PSYM_ENUMMODULES_CALLBACKW64 EnumModulesCallback, __in_opt PVOID UserContext ); #ifdef DBGHELP_TRANSLATE_TCHAR #define SymEnumerateModules64 SymEnumerateModulesW64 #endif</code>
            </para>
            <para>
            This function supersedes the <c>SymEnumerateModules</c> function. For more information, see Updated Platform Support.
            <c>SymEnumerateModules</c> is defined as follows in Dbghelp.h.
            </para>
            <para>
            <code>#if !defined(_IMAGEHLP_SOURCE_) &amp;&amp; defined(_IMAGEHLP64) #define SymEnumerateModules SymEnumerateModules64 #else BOOL IMAGEAPI SymEnumerateModules( __in HANDLE hProcess, __in PSYM_ENUMMODULES_CALLBACK EnumModulesCallback, __in_opt PVOID UserContext ); #endif</code>
            </para>
            <para>Examples</para>
            <para>For an example, see Enumerating Symbol Modules.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.DbgHelp.SymEnumerateModulesW64(Vanara.PInvoke.HPROCESS,Vanara.PInvoke.DbgHelp.PSYM_ENUMMODULES_CALLBACK64,System.IntPtr)">
            <summary>Enumerates all modules that have been loaded for the process by the SymLoadModule64 or SymLoadModuleEx function.</summary>
            <param name="hProcess">A handle to the process that was originally passed to the SymInitialize function.</param>
            <param name="EnumModulesCallback">
            The enumeration callback function. This function is called once per module. For more information, see SymEnumerateModulesProc64.
            </param>
            <param name="UserContext">
            A user-defined value or <c>NULL</c>. This value is simply passed to the callback function. Normally, this parameter is used by
            an application to pass a pointer to a data structure that lets the callback function establish some type of context.
            </param>
            <returns>
            <para>If the function succeeds, the return value is <c>TRUE</c>.</para>
            <para>If the function fails, the return value is <c>FALSE</c>. To retrieve extended error information, call GetLastError.</para>
            </returns>
            <remarks>
            <para>
            The <c>SymEnumerateModules64</c> function enumerates all modules that have been loaded for the process by SymLoadModule64, even
            if the symbol loading is deferred. The enumeration callback function is called once for each module and is passed the module information.
            </para>
            <para>
            All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will
            likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more
            than one thread to this function.
            </para>
            <para>
            To call the Unicode version of this function, define DBGHELP_TRANSLATE_TCHAR. <c>SymEnumerateModulesW64</c> is defined as
            follows in Dbghelp.h.
            </para>
            <para>
            <code> BOOL IMAGEAPI SymEnumerateModulesW64( __in HANDLE hProcess, __in PSYM_ENUMMODULES_CALLBACKW64 EnumModulesCallback, __in_opt PVOID UserContext ); #ifdef DBGHELP_TRANSLATE_TCHAR #define SymEnumerateModules64 SymEnumerateModulesW64 #endif</code>
            </para>
            <para>
            This function supersedes the <c>SymEnumerateModules</c> function. For more information, see Updated Platform Support.
            <c>SymEnumerateModules</c> is defined as follows in Dbghelp.h.
            </para>
            <para>
            <code>#if !defined(_IMAGEHLP_SOURCE_) &amp;&amp; defined(_IMAGEHLP64) #define SymEnumerateModules SymEnumerateModules64 #else BOOL IMAGEAPI SymEnumerateModules( __in HANDLE hProcess, __in PSYM_ENUMMODULES_CALLBACK EnumModulesCallback, __in_opt PVOID UserContext ); #endif</code>
            </para>
            <para>Examples</para>
            <para>For an example, see Enumerating Symbol Modules.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.DbgHelp.SymEnumLines(Vanara.PInvoke.HPROCESS,System.UInt64,System.String,System.String,Vanara.PInvoke.DbgHelp.PSYM_ENUMLINES_CALLBACK,System.IntPtr)">
            <summary>Enumerates all lines in the specified module.</summary>
            <param name="hProcess">A handle to a process. This handle must have been previously passed to the SymInitialize function.</param>
            <param name="Base">The base address of the module.</param>
            <param name="Obj">
            The name of an .obj file within the module. The scope of the enumeration is limited to this file. If this parameter is
            <c>NULL</c> or an empty string, all .obj files are searched.
            </param>
            <param name="File">
            A wildcard expression that indicates the names of the source files to be searched. If this parameter is <c>NULL</c> or an empty
            string, all files are searched.
            </param>
            <param name="EnumLinesCallback">A SymEnumLinesProc callback function that receives the line information.</param>
            <param name="UserContext">
            A user-defined value that is passed to the callback function, or <c>NULL</c>. This parameter is typically used by an application
            to pass a pointer to a data structure that provides context for the callback function.
            </param>
            <returns>
            <para>If the function succeeds, the return value is <c>TRUE</c>.</para>
            <para>If the function fails, the return value is <c>FALSE</c>. To retrieve extended error information, call GetLastError.</para>
            </returns>
            <remarks>
            <para>
            This function is supported for PDB information only. If you have COFF information, try using one of the <c>SymGetLineXXX</c> functions.
            </para>
            <para>
            All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will
            likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more
            than one thread to this function.
            </para>
            <para>To call the Unicode version of this function, define DBGHELP_TRANSLATE_TCHAR.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.DbgHelp.SymEnumLines(Vanara.PInvoke.HPROCESS,System.UInt64,System.String,System.String)">
            <summary>Enumerates all lines in the specified module.</summary>
            <param name="hProcess">A handle to a process. This handle must have been previously passed to the SymInitialize function.</param>
            <param name="Base">The base address of the module.</param>
            <param name="Obj">
            The name of an .obj file within the module. The scope of the enumeration is limited to this file. If this parameter is
            <c>NULL</c> or an empty string, all .obj files are searched.
            </param>
            <param name="File">
            A wildcard expression that indicates the names of the source files to be searched. If this parameter is <c>NULL</c> or an empty
            string, all files are searched.
            </param>
            <returns>
            A list of the line information items (.obj file name, sourc file name, line number and the address of the first line).
            </returns>
            <remarks>
            <para>
            This function is supported for PDB information only. If you have COFF information, try using one of the <c>SymGetLineXXX</c> functions.
            </para>
            <para>
            All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will
            likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more
            than one thread to this function.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.DbgHelp.SymEnumProcesses(Vanara.PInvoke.DbgHelp.PSYM_ENUMPROCESSES_CALLBACK,System.IntPtr)">
            <summary>Enumerates each process that has called the SymInitialize function.</summary>
            <param name="EnumProcessesCallback">A SymEnumProcessesProc callback function that receives the process information.</param>
            <param name="UserContext">
            A user-defined value that is passed to the callback function, or <c>NULL</c>. This parameter is typically used by an application
            to pass a pointer to a data structure that provides context for the callback function.
            </param>
            <returns>
            <para>If the function succeeds, the return value is <c>TRUE</c>.</para>
            <para>If the function fails, the return value is <c>FALSE</c>. To retrieve extended error information, call GetLastError.</para>
            </returns>
            <remarks>
            All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will
            likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more
            than one thread to this function.
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.DbgHelp.SymEnumProcesses">
            <summary>Enumerates each process that has called the SymInitialize function.</summary>
            <returns>A list of process handles.</returns>
        </member>
        <member name="M:Vanara.PInvoke.DbgHelp.SymEnumSourceFiles(Vanara.PInvoke.HPROCESS,System.UInt64,System.String,Vanara.PInvoke.DbgHelp.PSYM_ENUMSOURCEFILES_CALLBACK,System.IntPtr)">
            <summary>Enumerates all source files in a process.</summary>
            <param name="hProcess">A handle to a process. This handle must have been previously passed to the SymInitialize function.</param>
            <param name="ModBase">
            The base address of the module. If this value is zero and Mask contains an exclamation point (!), the function looks across
            modules. If this value is zero and Mask does not contain an exclamation point, the function uses the scope established by the
            SymSetContext function.
            </param>
            <param name="Mask">
            <para>
            A wildcard expression that indicates the names of the source files to be enumerated. To specify a module name, use the !mod syntax.
            </para>
            <para>If this parameter is <c>NULL</c>, the function will enumerate all files.</para>
            </param>
            <param name="cbSrcFiles">Pointer to a SymEnumSourceFilesProc callback function that receives the source file information.</param>
            <param name="UserContext">
            User-defined value that is passed to the callback function, or <c>NULL</c>. This parameter is typically used by an application
            to pass a pointer to a data structure that provides context for the callback function.
            </param>
            <returns>
            <para>If the function succeeds, the return value is <c>TRUE</c>.</para>
            <para>If the function fails, the return value is <c>FALSE</c>. To retrieve extended error information, call GetLastError.</para>
            </returns>
            <remarks>
            All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will
            likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more
            than one thread to this function.
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.DbgHelp.SymEnumSourceFileTokens(Vanara.PInvoke.HPROCESS,System.UInt64,Vanara.PInvoke.DbgHelp.PENUMSOURCEFILETOKENSCALLBACK)">
            <summary>Enumerates all individual entries in a module's source server data, if available.</summary>
            <param name="hProcess">A handle to a process. This handle must have been previously passed to the SymInitialize function.</param>
            <param name="Base">The base address of the module.</param>
            <param name="Callback">A SymEnumSourceFileTokensProc callback function that receives the symbol information.</param>
            <returns>
            <para>If the function succeeds, the return value is <c>TRUE</c>.</para>
            <para>If the function fails, the return value is <c>FALSE</c>. To retrieve extended error information, call GetLastError.</para>
            </returns>
            <remarks>
            <para>
            Some modules have PDB files with source server information detailing the version control information for each of the source
            files used to create each individual module. An application can use this function to enumerate the data for every source file
            that was "source indexed".
            </para>
            <para>
            All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will
            likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more
            than one thread to this function.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.DbgHelp.SymEnumSourceLines(Vanara.PInvoke.HPROCESS,System.UInt64,System.String,System.String,System.UInt32,Vanara.PInvoke.DbgHelp.ESLFLAG,Vanara.PInvoke.DbgHelp.PSYM_ENUMLINES_CALLBACK,System.IntPtr)">
            <summary>Enumerates all source lines in a module.</summary>
            <param name="hProcess">A handle to a process. This handle must have been previously passed to the SymInitialize function.</param>
            <param name="Base">The base address of the module.</param>
            <param name="Obj">
            The name of an .obj file within the module. The scope of the enumeration is limited to this file. If this parameter is
            <c>NULL</c> or an empty string, all .obj files are searched.
            </param>
            <param name="File">
            A wildcard expression that indicates the names of the source files to be searched. If this parameter is <c>NULL</c> or an empty
            string, all files are searched.
            </param>
            <param name="Line">
            The line number of a line within the module. The scope of the enumeration is limited to this line. If this parameter is 0, all
            lines are searched.
            </param>
            <param name="Flags">If this parameter is ESLFLAG_FULLPATH, the function matches the full path in the File parameter.</param>
            <param name="EnumLinesCallback">A SymEnumLinesProc callback function that receives the line information.</param>
            <param name="UserContext">
            A user-defined value that is passed to the callback function, or <c>NULL</c>. This parameter is typically used by an application
            to pass a pointer to a data structure that provides context for the callback function.
            </param>
            <returns>
            <para>If the function succeeds, the return value is <c>TRUE</c>.</para>
            <para>If the function fails, the return value is <c>FALSE</c>. To retrieve extended error information, call GetLastError.</para>
            </returns>
            <remarks>
            All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will
            likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more
            than one thread to this function.
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.DbgHelp.SymEnumSymbols(Vanara.PInvoke.HPROCESS,System.UInt64,System.String,Vanara.PInvoke.DbgHelp.PSYM_ENUMERATESYMBOLS_CALLBACK,System.IntPtr)">
            <summary>Enumerates all symbols in a process.</summary>
            <param name="hProcess">A handle to a process. This handle must have been previously passed to the SymInitialize function.</param>
            <param name="BaseOfDll">
            The base address of the module. If this value is zero and Mask contains an exclamation point (!), the function looks across
            modules. If this value is zero and Mask does not contain an exclamation point, the function uses the scope established by the
            SymSetContext function.
            </param>
            <param name="Mask">
            <para>
            A wildcard string that indicates the names of the symbols to be enumerated. The text can optionally contain the wildcards, "*"
            and "?".
            </para>
            <para>
            To specify a specific module or set of modules, begin the text with a wildcard string specifying the module, followed by an
            exclamation point. When specifying a module, BaseOfDll is ignored.
            </para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>foo</term>
            <term>
            If BaseOfDll is not zero, then SymEnumSymbols will look for a global symbol named "foo". If BaseOfDll is zero, then
            SymEnumSymbols will look for a local symbol named "foo" within the scope established by the most recent call to the
            SymSetContext function.
            </term>
            </item>
            <item>
            <term>foo?</term>
            <term>
            If BaseOfDll is not zero, then SymEnumSymbols will look for a global symbol that starts with "foo" and contains one extra
            character afterwards, such as "fool" and "foot". If BaseOfDll is zero, then SymEnumSymbols will look for a symbol that starts
            with "foo" and contains one extra character afterwards, such as "fool" and "foot". The search would be within the scope
            established by the most recent call to the SymSetContext function.
            </term>
            </item>
            <item>
            <term>foo*!bar</term>
            <term>
            SymEnumSymbols will look in every loaded module that starts with the text "foo" for a symbol called "bar". It could find matches
            such as these, "foot!bar", "footlocker!bar", and "fool!bar".
            </term>
            </item>
            <item>
            <term>*!*</term>
            <term>SymEnumSymbols will enumerate every symbol in every loaded module.</term>
            </item>
            </list>
            </param>
            <param name="EnumSymbolsCallback">A SymEnumSymbolsProc callback function that receives the symbol information.</param>
            <param name="UserContext">
            A user-defined value that is passed to the callback function, or <c>NULL</c>. This parameter is typically used by an application
            to pass a pointer to a data structure that provides context for the callback function.
            </param>
            <returns>
            <para>If the function succeeds, the return value is <c>TRUE</c>.</para>
            <para>If the function fails, the return value is <c>FALSE</c>. To retrieve extended error information, call GetLastError.</para>
            </returns>
            <remarks>
            <para>
            All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will
            likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more
            than one thread to this function.
            </para>
            <para>To call the Unicode version of this function, define <c>DBGHELP_TRANSLATE_TCHAR</c>.</para>
            <para>Examples</para>
            <para>For an example, see Enumerating Symbols.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.DbgHelp.SymEnumSymbolsEx(Vanara.PInvoke.HPROCESS,System.UInt64,System.String,Vanara.PInvoke.DbgHelp.SYMENUM,System.IntPtr)">
            <summary>Enumerates all symbols in a process.</summary>
            <param name="hProcess">A handle to a process. This handle must have been previously passed to the SymInitialize function.</param>
            <param name="BaseOfDll">
            The base address of the module. If this value is zero and Mask contains an exclamation point (!), the function looks across
            modules. If this value is zero and Mask does not contain an exclamation point, the function uses the scope established by the
            SymSetContext function.
            </param>
            <param name="Mask">
            <para>
            A wildcard string that indicates the names of the symbols to be enumerated. The text can optionally contain the wildcards, "*"
            and "?".
            </para>
            <para>
            To specify a specific module or set of modules, begin the text with a wildcard string specifying the module, followed by an
            exclamation point. When specifying a module, BaseOfDll is ignored.
            </para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>foo</term>
            <term>
            If BaseOfDll is not zero, then SymEnumSymbols will look for a global symbol named "foo". If BaseOfDll is zero, then
            SymEnumSymbols will look for a local symbol named "foo" within the scope established by the most recent call to the SymSetContext function.
            </term>
            </item>
            <item>
            <term>foo?</term>
            <term>
            If BaseOfDll is not zero, then SymEnumSymbols will look for a global symbol that starts with "foo" and contains one extra
            character afterwards, such as "fool" and "foot". If BaseOfDll is zero, then SymEnumSymbols will look for a symbol that starts
            with "foo" and contains one extra character afterwards, such as "fool" and "foot". The search would be within the scope
            established by the most recent call to the SymSetContext function.
            </term>
            </item>
            <item>
            <term>foo*!bar</term>
            <term>
            SymEnumSymbols will look in every loaded module that starts with the text "foo" for a symbol called "bar". It could find matches
            such as these, "foot!bar", "footlocker!bar", and "fool!bar".
            </term>
            </item>
            <item>
            <term>*!*</term>
            <term>SymEnumSymbols will enumerate every symbol in every loaded module.</term>
            </item>
            </list>
            </param>
            <param name="Options">
            <para>Indicates possible options.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>SYMENUM_OPTIONS_DEFAULT 1</term>
            <term>Use the default options.</term>
            </item>
            <item>
            <term>SYMENUM_OPTIONS_INLINE 2</term>
            <term>Enumerate inline symbols.</term>
            </item>
            </list>
            </param>
            <param name="UserContext">
            A user-defined value that is passed to the callback function, or <c>NULL</c>. This parameter is typically used by an application
            to pass a pointer to a data structure that provides context for the callback function.
            </param>
            <returns>A list of <see cref="T:Vanara.PInvoke.DbgHelp.SYMBOL_INFO"/> structures.</returns>
            <remarks>
            <para>
            All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will
            likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more
            than one thread to this function.
            </para>
            <para>Examples</para>
            <para>For an example, see Enumerating Symbols.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.DbgHelp.SymEnumSymbolsEx(Vanara.PInvoke.HPROCESS,System.UInt64,System.String,Vanara.PInvoke.DbgHelp.PSYM_ENUMERATESYMBOLS_CALLBACK,System.IntPtr,Vanara.PInvoke.DbgHelp.SYMENUM)">
            <summary>Enumerates all symbols in a process.</summary>
            <param name="hProcess">A handle to a process. This handle must have been previously passed to the SymInitialize function.</param>
            <param name="BaseOfDll">
            The base address of the module. If this value is zero and Mask contains an exclamation point (!), the function looks across
            modules. If this value is zero and Mask does not contain an exclamation point, the function uses the scope established by the
            SymSetContext function.
            </param>
            <param name="Mask">
            <para>
            A wildcard string that indicates the names of the symbols to be enumerated. The text can optionally contain the wildcards, "*"
            and "?".
            </para>
            <para>
            To specify a specific module or set of modules, begin the text with a wildcard string specifying the module, followed by an
            exclamation point. When specifying a module, BaseOfDll is ignored.
            </para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>foo</term>
            <term>
            If BaseOfDll is not zero, then SymEnumSymbols will look for a global symbol named "foo". If BaseOfDll is zero, then
            SymEnumSymbols will look for a local symbol named "foo" within the scope established by the most recent call to the
            SymSetContext function.
            </term>
            </item>
            <item>
            <term>foo?</term>
            <term>
            If BaseOfDll is not zero, then SymEnumSymbols will look for a global symbol that starts with "foo" and contains one extra
            character afterwards, such as "fool" and "foot". If BaseOfDll is zero, then SymEnumSymbols will look for a symbol that starts
            with "foo" and contains one extra character afterwards, such as "fool" and "foot". The search would be within the scope
            established by the most recent call to the SymSetContext function.
            </term>
            </item>
            <item>
            <term>foo*!bar</term>
            <term>
            SymEnumSymbols will look in every loaded module that starts with the text "foo" for a symbol called "bar". It could find matches
            such as these, "foot!bar", "footlocker!bar", and "fool!bar".
            </term>
            </item>
            <item>
            <term>*!*</term>
            <term>SymEnumSymbols will enumerate every symbol in every loaded module.</term>
            </item>
            </list>
            </param>
            <param name="EnumSymbolsCallback">A SymEnumSymbolsProc callback function that receives the symbol information.</param>
            <param name="UserContext">
            A user-defined value that is passed to the callback function, or <c>NULL</c>. This parameter is typically used by an application
            to pass a pointer to a data structure that provides context for the callback function.
            </param>
            <param name="Options">
            <para>Indicates possible options.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>SYMENUM_OPTIONS_DEFAULT 1</term>
            <term>Use the default options.</term>
            </item>
            <item>
            <term>SYMENUM_OPTIONS_INLINE 2</term>
            <term>Enumerate inline symbols.</term>
            </item>
            </list>
            </param>
            <returns>
            <para>If the function succeeds, the return value is <c>TRUE</c>.</para>
            <para>If the function fails, the return value is <c>FALSE</c>. To retrieve extended error information, call GetLastError.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.DbgHelp.SymEnumSymbolsForAddr(Vanara.PInvoke.HPROCESS,System.UInt64,Vanara.PInvoke.DbgHelp.PSYM_ENUMERATESYMBOLS_CALLBACK,System.IntPtr)">
            <summary>Enumerates the symbols for the specified address.</summary>
            <param name="hProcess">A handle to a process. This handle must have been previously passed to the SymInitialize function.</param>
            <param name="Address">
            The address for which symbols are to be located. The address does not have to be on a symbol boundary. If the address comes
            after the beginning of a symbol and before the end of the symbol (the beginning of the symbol plus the symbol size), the
            function will find the symbol.
            </param>
            <param name="EnumSymbolsCallback">
            An application-defined callback function. This function is called for every symbol found at Address. For more information, see SymEnumSymbolsProc.
            </param>
            <param name="UserContext">Optional user-defined data. This value is passed to the callback function.</param>
            <returns>
            <para>If the function succeeds, the return value is <c>TRUE</c>.</para>
            <para>If the function fails, the return value is <c>FALSE</c>. To retrieve extended error information, call GetLastError.</para>
            </returns>
            <remarks>
            <para>
            All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will
            likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more
            than one thread to this function.
            </para>
            <para>To call the Unicode version of this function, define DBGHELP_TRANSLATE_TCHAR.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.DbgHelp.SymEnumTypes(Vanara.PInvoke.HPROCESS,System.UInt64,Vanara.PInvoke.DbgHelp.PSYM_ENUMERATESYMBOLS_CALLBACK,System.IntPtr)">
            <summary>Enumerates all user-defined types.</summary>
            <param name="hProcess">A handle to a process. This handle must have been previously passed to the SymInitialize function.</param>
            <param name="BaseOfDll">The base address of the module.</param>
            <param name="EnumSymbolsCallback">A pointer to an SymEnumSymbolsProc callback function that receives the symbol information.</param>
            <param name="UserContext">
            A user-defined value to be passed to the callback function, or <c>NULL</c>. This parameter is typically used by an application
            to pass a pointer to a data structure that provides context information for the callback function.
            </param>
            <returns>
            <para>If the function succeeds, the return value is <c>TRUE</c>.</para>
            <para>If the function fails, the return value is <c>FALSE</c>. To retrieve extended error information, call GetLastError.</para>
            </returns>
            <remarks>
            <para>
            All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will
            likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more
            than one thread to this function.
            </para>
            <para>To call the Unicode version of this function, define DBGHELP_TRANSLATE_TCHAR.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.DbgHelp.SymEnumTypesByName(Vanara.PInvoke.HPROCESS,System.UInt64,System.String,Vanara.PInvoke.DbgHelp.PSYM_ENUMERATESYMBOLS_CALLBACK,System.IntPtr)">
            <summary>Enumerates all user-defined types.</summary>
            <param name="hProcess">A handle to a process. This handle must have been previously passed to the SymInitialize function.</param>
            <param name="BaseOfDll">The base address of the module.</param>
            <param name="mask">
            A wildcard expression that indicates the names of the symbols to be enumerated. To specify a module name, use the !mod syntax.
            </param>
            <param name="EnumSymbolsCallback">A pointer to an SymEnumSymbolsProc callback function that receives the symbol information.</param>
            <param name="UserContext">
            A user-defined value to be passed to the callback function, or <c>NULL</c>. This parameter is typically used by an application
            to pass a pointer to a data structure that provides context information for the callback function.
            </param>
            <returns>
            <para>If the function succeeds, the return value is <c>TRUE</c>.</para>
            <para>If the function fails, the return value is <c>FALSE</c>. To retrieve extended error information, call GetLastError.</para>
            </returns>
            <remarks>
            <para>
            All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will
            likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more
            than one thread to this function.
            </para>
            <para>To call the Unicode version of this function, define DBGHELP_TRANSLATE_TCHAR.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.DbgHelp.SymFindDebugInfoFile(Vanara.PInvoke.HPROCESS,System.String,System.Text.StringBuilder,Vanara.PInvoke.DbgHelp.PFIND_DEBUG_FILE_CALLBACK,System.IntPtr)">
            <summary>Locates a .dbg file in the process search path.</summary>
            <param name="hProcess">A handle to the process that was originally passed to the SymInitialize function.</param>
            <param name="FileName">The name of the .dbg file. You can use a partial path.</param>
            <param name="DebugFilePath">The fully qualified path of the .dbg file. This buffer must be at least MAX_PATH characters.</param>
            <param name="Callback">
            <para>
            An application-defined callback function that verifies whether the correct file was found or the function should continue its
            search. For more information, see FindDebugInfoFileProc.
            </para>
            <para>This parameter can be <c>NULL</c>.</para>
            </param>
            <param name="CallerData">
            A user-defined value or <c>NULL</c>. This value is simply passed to the callback function. This parameter is typically used by
            an application to pass a pointer to a data structure that provides some context for the callback function.
            </param>
            <returns>
            <para>If the function succeeds, the return value is an open handle to the .dbg file.</para>
            <para>If the function fails, the return value is <c>NULL</c>. To retrieve extended error information, call GetLastError.</para>
            </returns>
            <remarks>
            <para>This function uses the search path set using the SymInitialize or SymSetSearchPath function.</para>
            <para>
            All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will
            likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more
            than one thread to this function.
            </para>
            <para>To call the Unicode version of this function, define DBGHELP_TRANSLATE_TCHAR.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.DbgHelp.SymFindExecutableImage(Vanara.PInvoke.HPROCESS,System.String,System.Text.StringBuilder,Vanara.PInvoke.DbgHelp.PFIND_EXE_FILE_CALLBACK,System.IntPtr)">
            <summary>Locates an executable file in the process search path.</summary>
            <param name="hProcess">A handle to the process that was originally passed to the SymInitialize function.</param>
            <param name="FileName">The name of the executable file. You can use a partial path.</param>
            <param name="ImageFilePath">The fully qualified path of the executable file. This buffer must be at least MAX_PATH characters.</param>
            <param name="Callback">
            <para>
            An application-defined callback function that verifies whether the correct executable file was found, or whether the function
            should continue its search. For more information, see FindExecutableImageProc.
            </para>
            <para>This parameter can be <c>NULL</c>.</para>
            </param>
            <param name="CallerData">
            A user-defined value or <c>NULL</c>. This value is simply passed to the callback function. This parameter is typically used by
            an application to pass a pointer to a data structure that provides some context for the callback function.
            </param>
            <returns>
            <para>If the function succeeds, the return value is an open handle to the executable file.</para>
            <para>If the function fails, the return value is <c>NULL</c>. To retrieve extended error information, call GetLastError.</para>
            </returns>
            <remarks>
            <para>This function uses the search path set using the SymInitialize or SymSetSearchPath function.</para>
            <para>
            All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will
            likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more
            than one thread to this function.
            </para>
            <para>To call the Unicode version of this function, define DBGHELP_TRANSLATE_TCHAR.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.DbgHelp.SymFindFileInPath(Vanara.PInvoke.HPROCESS,System.String,System.String,System.IntPtr,System.UInt32,System.UInt32,Vanara.PInvoke.DbgHelp.SSRVOPT,System.Text.StringBuilder,Vanara.PInvoke.DbgHelp.PFINDFILEINPATHCALLBACK,System.IntPtr)">
            <summary>Locates a symbol file or executable image.</summary>
            <param name="hprocess">A handle to the process that was originally passed to the SymInitialize function.</param>
            <param name="SearchPath">
            The search path. This can be multiple paths separated by semicolons. It can include both directories and symbol servers. If this
            parameter is <c>NULL</c>, the function uses the search path set using the SymSetSearchPath or SymInitialize function.
            </param>
            <param name="FileName">The name of the file. You can specify a path; however, only the file name is used.</param>
            <param name="id">The first of three identifying parameters (see Remarks).</param>
            <param name="two">The second of three identifying parameters (see Remarks).</param>
            <param name="three">The third of three identifying parameters (see Remarks).</param>
            <param name="flags">
            <para>The format of the id parameter. This parameter can be one of the following values.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>SSRVOPT_DWORD 0x0002</term>
            <term>The id parameter is a DWORD.</term>
            </item>
            <item>
            <term>SSRVOPT_DWORDPTR 0x0004</term>
            <term>The id parameter is a pointer to a DWORD.</term>
            </item>
            <item>
            <term>SSRVOPT_GUIDPTR 0x0008</term>
            <term>The id parameter is a pointer to a GUID.</term>
            </item>
            </list>
            </param>
            <param name="FoundFile">
            A pointer to a buffer that receives the fully qualified path to the symbol file. This buffer must be at least MAX_PATH characters.
            </param>
            <param name="callback">A SymFindFileInPathProc callback function.</param>
            <param name="context">
            A user-defined value or <c>NULL</c>. This value is simply passed to the callback function. This parameter is typically used by
            an application to pass a pointer to a data structure that provides some context for the callback function.
            </param>
            <returns>
            If the server locates a valid symbol file, it returns <c>TRUE</c>; otherwise, it returns <c>FALSE</c> and GetLastError returns a
            value that indicates why the symbol file was not returned.
            </returns>
            <remarks>
            <para>The identifying parameters are filled in as follows:</para>
            <list type="bullet">
            <item>
            <term>
            If DbgHelp is looking for a .pdb file, the id parameter specifies the PDB signature as found in the codeview debug directory of
            the original image. Parameter two specifies the PDB age. Parameter three is unused and set to zero.
            </term>
            </item>
            <item>
            <term>
            If DbgHelp is looking for any other type of image, such as an executable file or .dbg file, the id parameter specifies the
            TimeDateStamp of the original image as found in its PE header. Parameter two specifies the SizeOfImage field, also extracted
            from the PE header. Parameter three is unused and set to zero.
            </term>
            </item>
            </list>
            <para>All of these values can be obtained by calling SymSrvGetFileIndexInfo.</para>
            <para>
            When searching a directory, this function does not verify that the symbol identifiers match by default. To ensure the matching
            symbol files are located, call the SymSetOptions function with SYMOPT_EXACT_SYMBOLS.
            </para>
            <para>
            All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will
            likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more
            than one thread to this function.
            </para>
            <para>To call the Unicode version of this function, define DBGHELP_TRANSLATE_TCHAR.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.DbgHelp.SymFromAddr(Vanara.PInvoke.HPROCESS,System.UInt64,System.UInt64@,Vanara.PInvoke.DbgHelp.SYMBOL_INFO@)">
            <summary>Retrieves symbol information for the specified address.</summary>
            <param name="hProcess">A handle to a process. This handle must have been previously passed to the SymInitialize function.</param>
            <param name="Address">
            The address for which a symbol should be located. The address does not have to be on a symbol boundary. If the address comes
            after the beginning of a symbol and before the end of the symbol, the symbol is found.
            </param>
            <param name="Displacement">The displacement from the beginning of the symbol, or zero.</param>
            <param name="Symbol">
            A pointer to a SYMBOL_INFO structure that provides information about the symbol. The symbol name is variable in length;
            therefore this buffer must be large enough to hold the name stored at the end of the <c>SYMBOL_INFO</c> structure. Be sure to
            set the <c>MaxNameLen</c> member to the number of bytes reserved for the name.
            </param>
            <returns>
            <para>If the function succeeds, the return value is <c>TRUE</c>.</para>
            <para>If the function fails, the return value is <c>FALSE</c>. To retrieve extended error information, call GetLastError.</para>
            </returns>
            <remarks>
            <para>
            All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will
            likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more
            than one thread to this function.
            </para>
            <para>To call the Unicode version of this function, define DBGHELP_TRANSLATE_TCHAR.</para>
            <para>Examples</para>
            <para>For an example, see Retrieving Symbol Information by Address.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.DbgHelp.SymFromIndex(Vanara.PInvoke.HPROCESS,System.UInt64,System.UInt32,Vanara.PInvoke.DbgHelp.SYMBOL_INFO@)">
            <summary>Retrieves symbol information for the specified index.</summary>
            <param name="hProcess">A handle to a process. This handle must have been previously passed to the SymInitialize function.</param>
            <param name="BaseOfDll">The base address of the module.</param>
            <param name="Index">A unique value for the symbol.</param>
            <param name="Symbol">A pointer to a SYMBOL_INFO structure that provides information about the symbol.</param>
            <returns>
            <para>If the function succeeds, the return value is <c>TRUE</c>.</para>
            <para>If the function fails, the return value is <c>FALSE</c>. To retrieve extended error information, call GetLastError.</para>
            </returns>
            <remarks>
            All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will
            likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more
            than one thread to this function.
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.DbgHelp.SymFromInlineContext(Vanara.PInvoke.HPROCESS,System.UInt64,System.UInt32,System.UInt64@,Vanara.PInvoke.DbgHelp.SYMBOL_INFO@)">
            <summary>Retrieves symbol information for the specified address and inline context.</summary>
            <param name="hProcess">A handle to a process. This handle must have been previously passed to the SymInitialize function.</param>
            <param name="Address">
            The address for which a symbol should be located. The address does not have to be on a symbol boundary. If the address comes
            after the beginning of a symbol and before the end of the symbol, the symbol is found.
            </param>
            <param name="InlineContext">The inline context for which a symbol should be located.</param>
            <param name="Displacement">The displacement from the beginning of the symbol, or zero.</param>
            <param name="Symbol">
            A pointer to a SYMBOL_INFO structure that provides information about the symbol. The symbol name is variable in length;
            therefore this buffer must be large enough to hold the name stored at the end of the <c>SYMBOL_INFO</c> structure. Be sure to
            set the <c>MaxNameLen</c> member to the number of bytes reserved for the name.
            </param>
            <returns>
            <para>If the function succeeds, the return value is <c>TRUE</c>.</para>
            <para>If the function fails, the return value is <c>FALSE</c>. To retrieve extended error information, call GetLastError.</para>
            </returns>
            <remarks/>
        </member>
        <member name="M:Vanara.PInvoke.DbgHelp.SymFromName(Vanara.PInvoke.HPROCESS,System.String,Vanara.PInvoke.DbgHelp.SYMBOL_INFO@)">
            <summary>Retrieves symbol information for the specified name.</summary>
            <param name="hProcess">A handle to a process. This handle must have been previously passed to the SymInitialize function.</param>
            <param name="Name">The name of the symbol to be located.</param>
            <param name="Symbol">A pointer to a SYMBOL_INFO structure that provides information about the symbol.</param>
            <returns>
            <para>If the function succeeds, the return value is <c>TRUE</c>.</para>
            <para>If the function fails, the return value is <c>FALSE</c>. To retrieve extended error information, call GetLastError.</para>
            </returns>
            <remarks>
            <para>
            All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will
            likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more
            than one thread to this function.
            </para>
            <para>To call the Unicode version of this function, define DBGHELP_TRANSLATE_TCHAR.</para>
            <para>Examples</para>
            <para>For an example, see Retrieving Symbol Information by Name.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.DbgHelp.SymFromToken(Vanara.PInvoke.HPROCESS,System.UInt64,System.UInt32,Vanara.PInvoke.DbgHelp.SYMBOL_INFO@)">
            <summary>Retrieves symbol information for the specified managed code token.</summary>
            <param name="hProcess">A handle to a process. This handle must have been previously passed to the SymInitialize function.</param>
            <param name="Base">The base address of the managed code module.</param>
            <param name="Token">The managed code token.</param>
            <param name="Symbol">A pointer to a SYMBOL_INFO structure that provides information about the symbol.</param>
            <returns>
            <para>If the function succeeds, the return value is <c>TRUE</c>.</para>
            <para>If the function fails, the return value is <c>FALSE</c>. To retrieve extended error information, call GetLastError.</para>
            </returns>
            <remarks>
            <para>
            All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will
            likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more
            than one thread to this function.
            </para>
            <para>To call the Unicode version of this function, define DBGHELP_TRANSLATE_TCHAR.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.DbgHelp.SymFunctionTableAccess(Vanara.PInvoke.HPROCESS,System.UInt32)">
            <summary>Retrieves the function table entry for the specified address.</summary>
            <param name="hProcess">A handle to the process that was originally passed to the SymInitialize function.</param>
            <param name="AddrBase">The base address for which function table information is required.</param>
            <returns>
            <para>If the function succeeds, the return value is a pointer to the function table entry.</para>
            <para>If the function fails, the return value is <c>NULL</c>. To retrieve extended error information, call GetLastError.</para>
            </returns>
            <remarks>
            <para>The type of pointer returned is specific to the image from which symbols are loaded.</para>
            <para><c>x86:</c> If the image is for an x86 system, this is a pointer to an FPO_DATA structure.</para>
            <para><c>x64:</c> If the image is for an x64 system, this is a pointer to an _IMAGE_RUNTIME_FUNCTION_ENTRY structure.</para>
            <para>
            All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will
            likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more
            than one thread to this function.
            </para>
            <para>
            This function supersedes the <c>SymFunctionTableAccess</c> function. For more information, see Updated Platform Support.
            <c>SymFunctionTableAccess</c> is defined as follows in Dbghelp.h.
            </para>
            <para>
            <code>#if !defined(_IMAGEHLP_SOURCE_) &amp;&amp; defined(_IMAGEHLP64) #define SymFunctionTableAccess SymFunctionTableAccess64 #else PVOID IMAGEAPI SymFunctionTableAccess( __in HANDLE hProcess, __in DWORD AddrBase ); #endif</code>
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.DbgHelp.SymFunctionTableAccess64(Vanara.PInvoke.HPROCESS,System.UInt64)">
            <summary>Retrieves the function table entry for the specified address.</summary>
            <param name="hProcess">A handle to the process that was originally passed to the SymInitialize function.</param>
            <param name="AddrBase">The base address for which function table information is required.</param>
            <returns>
            <para>If the function succeeds, the return value is a pointer to the function table entry.</para>
            <para>If the function fails, the return value is <c>NULL</c>. To retrieve extended error information, call GetLastError.</para>
            </returns>
            <remarks>
            <para>The type of pointer returned is specific to the image from which symbols are loaded.</para>
            <para><c>x86:</c> If the image is for an x86 system, this is a pointer to an FPO_DATA structure.</para>
            <para><c>x64:</c> If the image is for an x64 system, this is a pointer to an _IMAGE_RUNTIME_FUNCTION_ENTRY structure.</para>
            <para>
            All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will
            likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more
            than one thread to this function.
            </para>
            <para>
            This function supersedes the <c>SymFunctionTableAccess</c> function. For more information, see Updated Platform Support.
            <c>SymFunctionTableAccess</c> is defined as follows in Dbghelp.h.
            </para>
            <para>
            <code>#if !defined(_IMAGEHLP_SOURCE_) &amp;&amp; defined(_IMAGEHLP64) #define SymFunctionTableAccess SymFunctionTableAccess64 #else PVOID IMAGEAPI SymFunctionTableAccess( __in HANDLE hProcess, __in DWORD AddrBase ); #endif</code>
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.DbgHelp.SymFunctionTableAccess64AccessRoutines(Vanara.PInvoke.HPROCESS,System.UInt64,Vanara.PInvoke.DbgHelp.PREAD_PROCESS_MEMORY_ROUTINE64,Vanara.PInvoke.DbgHelp.PGET_MODULE_BASE_ROUTINE64)">
            <summary>
            <para>Finds a function table entry or frame pointer omission (FPO) record for an address.</para>
            <para>Use SymFunctionTableAccess64 instead.</para>
            </summary>
            <param name="hProcess">A handle to the process that was originally passed to the SymInitialize function.</param>
            <param name="AddrBase">The base address for which function table information is required.</param>
            <param name="ReadMemoryRoutine">Pointer to a read memory callback function.</param>
            <param name="GetModuleBaseRoutine">Pointer to a get module base callback function.</param>
            <returns>None</returns>
        </member>
        <member name="M:Vanara.PInvoke.DbgHelp.SymGetExtendedOption(Vanara.PInvoke.DbgHelp.IMAGEHLP_EXTENDED_OPTIONS)">
            <summary>Gets whether the specified extended symbol option on or off.</summary>
            <param name="option">
            <para>The extended symbol option to check. The following are valid values.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>SYMOPT_EX_DISABLEACCESSTIMEUPDATE 0</term>
            <term>
            Turns off explicit updates to the last access time of a symbol that is loaded. By default, DbgHelp updates the last access time
            of a symbol file that is consumed so that a symbol cache can be maintained by using a least recently used mechanism.
            </term>
            </item>
            </list>
            </param>
            <returns>The value of the specified symbol option.</returns>
        </member>
        <member name="M:Vanara.PInvoke.DbgHelp.SymGetFileLineOffsets64(Vanara.PInvoke.HPROCESS,System.String,System.String,System.UInt64@,System.UInt32)">
            <summary>Locates line information for the specified module and file name.</summary>
            <param name="hProcess">A handle to the process that was originally passed to the SymInitialize function.</param>
            <param name="ModuleName">
            The name of the module in which lines are to be located. If this parameter is <c>NULL</c>, the function searches all modules.
            </param>
            <param name="FileName">The name of the file in which lines are to be located.</param>
            <param name="Buffer">
            An array of offsets for each line. The offset for the line n is stored in element n-1. Array elements for lines that do not have
            line information are left unchanged.
            </param>
            <param name="BufferLines">The size of the Buffer array, in elements.</param>
            <returns>
            <para>
            If the function succeeds, the return value is the highest line number found. This value is zero if no line information was found.
            </para>
            <para>If the function fails, the return value is LINE_ERROR. To retrieve extended error information, call GetLastError.</para>
            </returns>
            <remarks>
            All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will
            likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more
            than one thread to this function.
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.DbgHelp.SymGetHomeDirectory(Vanara.PInvoke.DbgHelp.IMAGEHLP_HD_TYPE,System.Text.StringBuilder,Vanara.PInvoke.SizeT)">
            <summary>Retrieves the home directory used by Dbghelp.</summary>
            <param name="type">
            <para>The directory to be retrieved. This parameter can be one of the following values.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>hdBase 0</term>
            <term>The home directory.</term>
            </item>
            <item>
            <term>hdSrc 2</term>
            <term>The source directory.</term>
            </item>
            <item>
            <term>hdSym 1</term>
            <term>The symbol directory.</term>
            </item>
            </list>
            </param>
            <param name="dir">A pointer to a string that receives the directory.</param>
            <param name="size">The size of the output buffer, in characters.</param>
            <returns>
            <para>If the function succeeds, the return value is a pointer to the dir parameter.</para>
            <para>If the function fails, the return value is <c>NULL</c>. To retrieve extended error information, call GetLastError.</para>
            </returns>
            <remarks>
            <para>
            All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will
            likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more
            than one thread to this function.
            </para>
            <para>To call the Unicode version of this function, define DBGHELP_TRANSLATE_TCHAR.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.DbgHelp.SymGetLineFromAddr(Vanara.PInvoke.HPROCESS,System.UInt32,System.UInt32@,Vanara.PInvoke.DbgHelp.IMAGEHLP_LINE@)">
            <summary>Locates the source line for the specified address.</summary>
            <param name="hProcess">A handle to the process that was originally passed to the SymInitialize function.</param>
            <param name="dwAddr">
            The address for which a line should be located. It is not necessary for the address to be on a line boundary. If the address
            appears after the beginning of a line and before the end of the line, the line is found.
            </param>
            <param name="pdwDisplacement">The displacement in bytes from the beginning of the line, or zero.</param>
            <param name="Line">A pointer to an IMAGEHLP_LINE64 structure.</param>
            <returns>
            <para>If the function succeeds, the return value is <c>TRUE</c>.</para>
            <para>If the function fails, the return value is <c>FALSE</c>. To retrieve extended error information, call GetLastError.</para>
            </returns>
            <remarks>
            <para>
            The caller must allocate the Line buffer properly and fill in the required members of the IMAGEHLP_LINE64 structure before
            calling <c>SymGetLineFromAddr64</c>.
            </para>
            <para>
            This function returns a pointer to a buffer that may be reused by another function. Therefore, be sure to copy the data returned
            to another buffer immediately.
            </para>
            <para>
            All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will
            likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more
            than one thread to this function.
            </para>
            <para>
            To call the Unicode version of this function, define <c>DBGHELP_TRANSLATE_TCHAR</c>. <c>SymGetLineFromAddrW64</c> is defined as
            follows in Dbghelp.h.
            </para>
            <para>
            <code>BOOL IMAGEAPI SymGetLineFromAddrW64( _In_ HANDLE hProcess, _In_ DWORD64 dwAddr, _Out_ PDWORD pdwDisplacement, _Out_ PIMAGEHLP_LINEW64 Line ); #ifdef DBGHELP_TRANSLATE_TCHAR #define SymGetLineFromAddr64 SymGetLineFromAddrW64 #endif</code>
            </para>
            <para>
            This function supersedes the <c>SymGetLineFromAddr</c> function. For more information, see Updated Platform Support.
            <c>SymGetLineFromAddr</c> is defined as follows in Dbghelp.h.
            </para>
            <para>
            <code>#if !defined(_IMAGEHLP_SOURCE_) &amp;&amp; defined(_IMAGEHLP64) #define SymGetLineFromAddr SymGetLineFromAddr64 #define SymGetLineFromAddrW SymGetLineFromAddrW64 #else BOOL IMAGEAPI SymGetLineFromAddr( _In_ HANDLE hProcess, _In_ DWORD dwAddr, _Out_ PDWORD pdwDisplacement, _Out_ PIMAGEHLP_LINE Line ); BOOL IMAGEAPI SymGetLineFromAddrW( _In_ HANDLE hProcess, _In_ DWORD dwAddr, _Out_ PDWORD pdwDisplacement, _Out_ PIMAGEHLP_LINEW Line ); #endif</code>
            </para>
            <para>Examples</para>
            <para>For an example, see Retrieving Symbol Information by Address.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.DbgHelp.SymGetLineFromAddr64(Vanara.PInvoke.HPROCESS,System.UInt64,System.UInt32@,Vanara.PInvoke.DbgHelp.IMAGEHLP_LINE64@)">
            <summary>Locates the source line for the specified address.</summary>
            <param name="hProcess">A handle to the process that was originally passed to the SymInitialize function.</param>
            <param name="qwAddr">TBD</param>
            <param name="pdwDisplacement">The displacement in bytes from the beginning of the line, or zero.</param>
            <param name="Line64">TBD</param>
            <returns>
            <para>If the function succeeds, the return value is <c>TRUE</c>.</para>
            <para>If the function fails, the return value is <c>FALSE</c>. To retrieve extended error information, call GetLastError.</para>
            </returns>
            <remarks>
            <para>
            The caller must allocate the Line buffer properly and fill in the required members of the IMAGEHLP_LINE64 structure before
            calling <c>SymGetLineFromAddr64</c>.
            </para>
            <para>
            This function returns a pointer to a buffer that may be reused by another function. Therefore, be sure to copy the data returned
            to another buffer immediately.
            </para>
            <para>
            All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will
            likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more
            than one thread to this function.
            </para>
            <para>
            To call the Unicode version of this function, define <c>DBGHELP_TRANSLATE_TCHAR</c>. <c>SymGetLineFromAddrW64</c> is defined as
            follows in Dbghelp.h.
            </para>
            <para>
            <code>BOOL IMAGEAPI SymGetLineFromAddrW64( _In_ HANDLE hProcess, _In_ DWORD64 dwAddr, _Out_ PDWORD pdwDisplacement, _Out_ PIMAGEHLP_LINEW64 Line ); #ifdef DBGHELP_TRANSLATE_TCHAR #define SymGetLineFromAddr64 SymGetLineFromAddrW64 #endif</code>
            </para>
            <para>
            This function supersedes the <c>SymGetLineFromAddr</c> function. For more information, see Updated Platform Support.
            <c>SymGetLineFromAddr</c> is defined as follows in Dbghelp.h.
            </para>
            <para>
            <code>#if !defined(_IMAGEHLP_SOURCE_) &amp;&amp; defined(_IMAGEHLP64) #define SymGetLineFromAddr SymGetLineFromAddr64 #define SymGetLineFromAddrW SymGetLineFromAddrW64 #else BOOL IMAGEAPI SymGetLineFromAddr( _In_ HANDLE hProcess, _In_ DWORD dwAddr, _Out_ PDWORD pdwDisplacement, _Out_ PIMAGEHLP_LINE Line ); BOOL IMAGEAPI SymGetLineFromAddrW( _In_ HANDLE hProcess, _In_ DWORD dwAddr, _Out_ PDWORD pdwDisplacement, _Out_ PIMAGEHLP_LINEW Line ); #endif</code>
            </para>
            <para>Examples</para>
            <para>For an example, see Retrieving Symbol Information by Address.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.DbgHelp.SymGetLineFromAddrW64(Vanara.PInvoke.HPROCESS,System.UInt64,System.UInt32@,Vanara.PInvoke.DbgHelp.IMAGEHLP_LINE64@)">
            <summary>Locates the source line for the specified address.</summary>
            <param name="hProcess">A handle to the process that was originally passed to the SymInitialize function.</param>
            <param name="qwAddr">TBD</param>
            <param name="pdwDisplacement">The displacement in bytes from the beginning of the line, or zero.</param>
            <param name="Line64">TBD</param>
            <returns>
            <para>If the function succeeds, the return value is <c>TRUE</c>.</para>
            <para>If the function fails, the return value is <c>FALSE</c>. To retrieve extended error information, call GetLastError.</para>
            </returns>
            <remarks>
            <para>
            The caller must allocate the Line buffer properly and fill in the required members of the IMAGEHLP_LINE64 structure before
            calling <c>SymGetLineFromAddr64</c>.
            </para>
            <para>
            This function returns a pointer to a buffer that may be reused by another function. Therefore, be sure to copy the data returned
            to another buffer immediately.
            </para>
            <para>
            All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will
            likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more
            than one thread to this function.
            </para>
            <para>
            To call the Unicode version of this function, define <c>DBGHELP_TRANSLATE_TCHAR</c>. <c>SymGetLineFromAddrW64</c> is defined as
            follows in Dbghelp.h.
            </para>
            <para>
            <code>BOOL IMAGEAPI SymGetLineFromAddrW64( _In_ HANDLE hProcess, _In_ DWORD64 dwAddr, _Out_ PDWORD pdwDisplacement, _Out_ PIMAGEHLP_LINEW64 Line ); #ifdef DBGHELP_TRANSLATE_TCHAR #define SymGetLineFromAddr64 SymGetLineFromAddrW64 #endif</code>
            </para>
            <para>
            This function supersedes the <c>SymGetLineFromAddr</c> function. For more information, see Updated Platform Support.
            <c>SymGetLineFromAddr</c> is defined as follows in Dbghelp.h.
            </para>
            <para>
            <code>#if !defined(_IMAGEHLP_SOURCE_) &amp;&amp; defined(_IMAGEHLP64) #define SymGetLineFromAddr SymGetLineFromAddr64 #define SymGetLineFromAddrW SymGetLineFromAddrW64 #else BOOL IMAGEAPI SymGetLineFromAddr( _In_ HANDLE hProcess, _In_ DWORD dwAddr, _Out_ PDWORD pdwDisplacement, _Out_ PIMAGEHLP_LINE Line ); BOOL IMAGEAPI SymGetLineFromAddrW( _In_ HANDLE hProcess, _In_ DWORD dwAddr, _Out_ PDWORD pdwDisplacement, _Out_ PIMAGEHLP_LINEW Line ); #endif</code>
            </para>
            <para>Examples</para>
            <para>For an example, see Retrieving Symbol Information by Address.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.DbgHelp.SymGetLineFromInlineContext(Vanara.PInvoke.HPROCESS,System.UInt64,System.UInt32,System.UInt64,System.UInt32@,Vanara.PInvoke.DbgHelp.IMAGEHLP_LINE64@)">
            <summary>Locates the source line for the specified inline context.</summary>
            <param name="hProcess">A handle to the process that was originally passed to the SymInitialize function.</param>
            <param name="qwAddr">TBD</param>
            <param name="InlineContext">The inline context.</param>
            <param name="qwModuleBaseAddress">The base address of the module.</param>
            <param name="pdwDisplacement">The displacement in bytes from the beginning of the line, or zero.</param>
            <param name="Line64">TBD</param>
            <returns>
            <para>If the function succeeds, the return value is <c>TRUE</c>.</para>
            <para>If the function fails, the return value is <c>FALSE</c>. To retrieve extended error information, call GetLastError.</para>
            </returns>
            <remarks>
            <para>
            The caller must allocate the Line buffer properly and fill in the required members of the IMAGEHLP_LINE64 structure before
            calling <c>SymGetLineFromInlineContext</c>.
            </para>
            <para>
            This function returns a pointer to a buffer that may be reused by another function. Therefore, be sure to copy the data returned
            to another buffer immediately.
            </para>
            <para>
            All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will
            likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more
            than one thread to this function.
            </para>
            <para>
            To call the Unicode version of this function, define <c>DBGHELP_TRANSLATE_TCHAR</c>. <c>SymGetLineFromInlineContext</c> is
            defined as follows in Dbghelp.h.
            </para>
            <para>
            <code>BOOL IMAGEAPI SymGetLineFromInlineContextW( _In_ HANDLE hProcess, _In_ DWORD64 dwAddr, _In_ ULONG InlineContext, _In_opt_ DWORD64 qwModuleBaseAddress, _Out_ PDWORD pdwDisplacement, _Out_ PIMAGEHLP_LINEW64 Line ); #ifdef DBGHELP_TRANSLATE_TCHAR #define SymGetLineFromInlineContext SymGetLineFromInlineContextW #endif</code>
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.DbgHelp.SymGetLineFromName(Vanara.PInvoke.HPROCESS,System.String,System.String,System.UInt32,System.Int32@,Vanara.PInvoke.DbgHelp.IMAGEHLP_LINE@)">
            <summary>Locates a source line for the specified module, file name, and line number.</summary>
            <param name="hProcess">A handle to the process that was originally passed to the SymInitialize function.</param>
            <param name="ModuleName">The name of the module in which a line is to be located.</param>
            <param name="FileName">
            The name of the file in which a line is to be located. If the application has more than one source file with this name, be sure
            to specify a full path.
            </param>
            <param name="dwLineNumber">The line number to be located.</param>
            <param name="plDisplacement">The displacement in bytes from the beginning of the line, or zero.</param>
            <param name="Line">A pointer to an IMAGEHLP_LINE64 structure.</param>
            <returns>
            <para>If the function succeeds, the return value is <c>TRUE</c>.</para>
            <para>If the function fails, the return value is <c>FALSE</c>. To retrieve extended error information, call GetLastError.</para>
            </returns>
            <remarks>
            <para>
            The caller must allocate the Line buffer properly and fill in the required members of the IMAGEHLP_LINE64 structure before
            calling <c>SymGetLineFromName64</c>.
            </para>
            <para>
            Before calling this function, ensure that the symbols are initialized correctly by first calling SymInitialize, SymSetOptions,
            and SymLoadModule64.
            </para>
            <para>
            This function returns a pointer to a buffer that may be reused by another function. Therefore, be sure to copy the data returned
            to another buffer immediately.
            </para>
            <para>
            All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will
            likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more
            than one thread to this function.
            </para>
            <para>
            To call the Unicode version of this function, define DBGHELP_TRANSLATE_TCHAR. <c>SymGetLineFromNameW64</c> is defined as follows
            in Dbghelp.h.
            </para>
            <para>
            <code> BOOL IMAGEAPI SymGetLineFromNameW64( __in HANDLE hProcess, __in_opt PCWSTR ModuleName, __in_opt PCWSTR FileName, __in DWORD dwLineNumber, __out PLONG plDisplacement, __inout PIMAGEHLP_LINEW64 Line ); #ifdef DBGHELP_TRANSLATE_TCHAR #define SymGetLineFromName64 SymGetLineFromNameW64 #endif</code>
            </para>
            <para>
            This function supersedes the <c>SymGetLineFromName</c> function. For more information, see Updated Platform Support.
            <c>SymGetLineFromName</c> is defined as follows in Dbghelp.h.
            </para>
            <para>
            <code>#if !defined(_IMAGEHLP_SOURCE_) &amp;&amp; defined(_IMAGEHLP64) #define SymGetLineFromName SymGetLineFromName64 #else BOOL IMAGEAPI SymGetLineFromName( __in HANDLE hProcess, __in_opt PCSTR ModuleName, __in_opt PCSTR FileName, __in DWORD dwLineNumber, __out PLONG plDisplacement, __inout PIMAGEHLP_LINE Line ); #endif</code>
            </para>
            <para>Examples</para>
            <para>For an example, see Retrieving Symbol Information by Name.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.DbgHelp.SymGetLineFromName64(Vanara.PInvoke.HPROCESS,System.String,System.String,System.UInt32,System.Int32@,Vanara.PInvoke.DbgHelp.IMAGEHLP_LINE64@)">
            <summary>Locates a source line for the specified module, file name, and line number.</summary>
            <param name="hProcess">A handle to the process that was originally passed to the SymInitialize function.</param>
            <param name="ModuleName">The name of the module in which a line is to be located.</param>
            <param name="FileName">
            The name of the file in which a line is to be located. If the application has more than one source file with this name, be sure
            to specify a full path.
            </param>
            <param name="dwLineNumber">The line number to be located.</param>
            <param name="plDisplacement">The displacement in bytes from the beginning of the line, or zero.</param>
            <param name="Line">A pointer to an IMAGEHLP_LINE64 structure.</param>
            <returns>
            <para>If the function succeeds, the return value is <c>TRUE</c>.</para>
            <para>If the function fails, the return value is <c>FALSE</c>. To retrieve extended error information, call GetLastError.</para>
            </returns>
            <remarks>
            <para>
            The caller must allocate the Line buffer properly and fill in the required members of the IMAGEHLP_LINE64 structure before
            calling <c>SymGetLineFromName64</c>.
            </para>
            <para>
            Before calling this function, ensure that the symbols are initialized correctly by first calling SymInitialize, SymSetOptions,
            and SymLoadModule64.
            </para>
            <para>
            This function returns a pointer to a buffer that may be reused by another function. Therefore, be sure to copy the data returned
            to another buffer immediately.
            </para>
            <para>
            All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will
            likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more
            than one thread to this function.
            </para>
            <para>
            To call the Unicode version of this function, define DBGHELP_TRANSLATE_TCHAR. <c>SymGetLineFromNameW64</c> is defined as follows
            in Dbghelp.h.
            </para>
            <para>
            <code> BOOL IMAGEAPI SymGetLineFromNameW64( __in HANDLE hProcess, __in_opt PCWSTR ModuleName, __in_opt PCWSTR FileName, __in DWORD dwLineNumber, __out PLONG plDisplacement, __inout PIMAGEHLP_LINEW64 Line ); #ifdef DBGHELP_TRANSLATE_TCHAR #define SymGetLineFromName64 SymGetLineFromNameW64 #endif</code>
            </para>
            <para>
            This function supersedes the <c>SymGetLineFromName</c> function. For more information, see Updated Platform Support.
            <c>SymGetLineFromName</c> is defined as follows in Dbghelp.h.
            </para>
            <para>
            <code>#if !defined(_IMAGEHLP_SOURCE_) &amp;&amp; defined(_IMAGEHLP64) #define SymGetLineFromName SymGetLineFromName64 #else BOOL IMAGEAPI SymGetLineFromName( __in HANDLE hProcess, __in_opt PCSTR ModuleName, __in_opt PCSTR FileName, __in DWORD dwLineNumber, __out PLONG plDisplacement, __inout PIMAGEHLP_LINE Line ); #endif</code>
            </para>
            <para>Examples</para>
            <para>For an example, see Retrieving Symbol Information by Name.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.DbgHelp.SymGetLineFromNameW64(Vanara.PInvoke.HPROCESS,System.String,System.String,System.UInt32,System.Int32@,Vanara.PInvoke.DbgHelp.IMAGEHLP_LINE64@)">
            <summary>Locates a source line for the specified module, file name, and line number.</summary>
            <param name="hProcess">A handle to the process that was originally passed to the SymInitialize function.</param>
            <param name="ModuleName">The name of the module in which a line is to be located.</param>
            <param name="FileName">
            The name of the file in which a line is to be located. If the application has more than one source file with this name, be sure
            to specify a full path.
            </param>
            <param name="dwLineNumber">The line number to be located.</param>
            <param name="plDisplacement">The displacement in bytes from the beginning of the line, or zero.</param>
            <param name="Line">A pointer to an IMAGEHLP_LINE64 structure.</param>
            <returns>
            <para>If the function succeeds, the return value is <c>TRUE</c>.</para>
            <para>If the function fails, the return value is <c>FALSE</c>. To retrieve extended error information, call GetLastError.</para>
            </returns>
            <remarks>
            <para>
            The caller must allocate the Line buffer properly and fill in the required members of the IMAGEHLP_LINE64 structure before
            calling <c>SymGetLineFromName64</c>.
            </para>
            <para>
            Before calling this function, ensure that the symbols are initialized correctly by first calling SymInitialize, SymSetOptions,
            and SymLoadModule64.
            </para>
            <para>
            This function returns a pointer to a buffer that may be reused by another function. Therefore, be sure to copy the data returned
            to another buffer immediately.
            </para>
            <para>
            All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will
            likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more
            than one thread to this function.
            </para>
            <para>
            To call the Unicode version of this function, define DBGHELP_TRANSLATE_TCHAR. <c>SymGetLineFromNameW64</c> is defined as follows
            in Dbghelp.h.
            </para>
            <para>
            <code> BOOL IMAGEAPI SymGetLineFromNameW64( __in HANDLE hProcess, __in_opt PCWSTR ModuleName, __in_opt PCWSTR FileName, __in DWORD dwLineNumber, __out PLONG plDisplacement, __inout PIMAGEHLP_LINEW64 Line ); #ifdef DBGHELP_TRANSLATE_TCHAR #define SymGetLineFromName64 SymGetLineFromNameW64 #endif</code>
            </para>
            <para>
            This function supersedes the <c>SymGetLineFromName</c> function. For more information, see Updated Platform Support.
            <c>SymGetLineFromName</c> is defined as follows in Dbghelp.h.
            </para>
            <para>
            <code>#if !defined(_IMAGEHLP_SOURCE_) &amp;&amp; defined(_IMAGEHLP64) #define SymGetLineFromName SymGetLineFromName64 #else BOOL IMAGEAPI SymGetLineFromName( __in HANDLE hProcess, __in_opt PCSTR ModuleName, __in_opt PCSTR FileName, __in DWORD dwLineNumber, __out PLONG plDisplacement, __inout PIMAGEHLP_LINE Line ); #endif</code>
            </para>
            <para>Examples</para>
            <para>For an example, see Retrieving Symbol Information by Name.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.DbgHelp.SymGetLineNext(Vanara.PInvoke.HPROCESS,Vanara.PInvoke.DbgHelp.IMAGEHLP_LINE@)">
            <summary>Retrieves the line information for the next source line.</summary>
            <param name="hProcess">A handle to the process that was originally passed to the SymInitialize function.</param>
            <param name="Line">A pointer to an IMAGEHLP_LINE64 structure that contains the line information.</param>
            <returns>
            <para>If the function succeeds, the return value is <c>TRUE</c>.</para>
            <para>If the function fails, the return value is <c>FALSE</c>. To retrieve extended error information, call GetLastError.</para>
            </returns>
            <remarks>
            <para>
            The <c>SymGetLineNext64</c> function requires that the IMAGEHLP_LINE64 structure have valid data, presumably obtained from a
            call to the SymGetLineFromAddr64 or SymGetLineFromName64 function. This structure receives the line information for the next
            line in sequence.
            </para>
            <para>
            This function returns a pointer to a buffer that may be reused by another function. Therefore, be sure to copy the data returned
            to another buffer immediately.
            </para>
            <para>
            All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will
            likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more
            than one thread to this function.
            </para>
            <para>
            To call the Unicode version of this function, define DBGHELP_TRANSLATE_TCHAR. <c>SymGetLineNextW64</c> is defined as follows in Dbghelp.h.
            </para>
            <para>
            <code> BOOL IMAGEAPI SymGetLineNextW64( __in HANDLE hProcess, __inout PIMAGEHLP_LINEW64 Line #ifdef DBGHELP_TRANSLATE_TCHAR #define SymGetLineNext64 SymGetLineNextW64 #endif</code>
            </para>
            <para>
            This function supersedes the <c>SymGetLineNext</c> function. For more information, see Updated Platform Support.
            <c>SymGetLineNext</c> is defined as follows in Dbghelp.h.
            </para>
            <para>
            <code>#if !defined(_IMAGEHLP_SOURCE_) &amp;&amp; defined(_IMAGEHLP64) #define SymGetLineNext SymGetLineNext64 #else BOOL IMAGEAPI SymGetLineNext( __in HANDLE hProcess, __inout PIMAGEHLP_LINE Line ); BOOL IMAGEAPI SymGetLineNextW( __in HANDLE hProcess, __inout PIMAGEHLP_LINEW Line ); #endif</code>
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.DbgHelp.SymGetLineNext64(Vanara.PInvoke.HPROCESS,Vanara.PInvoke.DbgHelp.IMAGEHLP_LINE64@)">
            <summary>Retrieves the line information for the next source line.</summary>
            <param name="hProcess">A handle to the process that was originally passed to the SymInitialize function.</param>
            <param name="Line">A pointer to an IMAGEHLP_LINE64 structure that contains the line information.</param>
            <returns>
            <para>If the function succeeds, the return value is <c>TRUE</c>.</para>
            <para>If the function fails, the return value is <c>FALSE</c>. To retrieve extended error information, call GetLastError.</para>
            </returns>
            <remarks>
            <para>
            The <c>SymGetLineNext64</c> function requires that the IMAGEHLP_LINE64 structure have valid data, presumably obtained from a
            call to the SymGetLineFromAddr64 or SymGetLineFromName64 function. This structure receives the line information for the next
            line in sequence.
            </para>
            <para>
            This function returns a pointer to a buffer that may be reused by another function. Therefore, be sure to copy the data returned
            to another buffer immediately.
            </para>
            <para>
            All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will
            likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more
            than one thread to this function.
            </para>
            <para>
            To call the Unicode version of this function, define DBGHELP_TRANSLATE_TCHAR. <c>SymGetLineNextW64</c> is defined as follows in Dbghelp.h.
            </para>
            <para>
            <code> BOOL IMAGEAPI SymGetLineNextW64( __in HANDLE hProcess, __inout PIMAGEHLP_LINEW64 Line #ifdef DBGHELP_TRANSLATE_TCHAR #define SymGetLineNext64 SymGetLineNextW64 #endif</code>
            </para>
            <para>
            This function supersedes the <c>SymGetLineNext</c> function. For more information, see Updated Platform Support.
            <c>SymGetLineNext</c> is defined as follows in Dbghelp.h.
            </para>
            <para>
            <code>#if !defined(_IMAGEHLP_SOURCE_) &amp;&amp; defined(_IMAGEHLP64) #define SymGetLineNext SymGetLineNext64 #else BOOL IMAGEAPI SymGetLineNext( __in HANDLE hProcess, __inout PIMAGEHLP_LINE Line ); BOOL IMAGEAPI SymGetLineNextW( __in HANDLE hProcess, __inout PIMAGEHLP_LINEW Line ); #endif</code>
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.DbgHelp.SymGetLineNextW64(Vanara.PInvoke.HPROCESS,Vanara.PInvoke.DbgHelp.IMAGEHLP_LINE64@)">
            <summary>Retrieves the line information for the next source line.</summary>
            <param name="hProcess">A handle to the process that was originally passed to the SymInitialize function.</param>
            <param name="Line">A pointer to an IMAGEHLP_LINE64 structure that contains the line information.</param>
            <returns>
            <para>If the function succeeds, the return value is <c>TRUE</c>.</para>
            <para>If the function fails, the return value is <c>FALSE</c>. To retrieve extended error information, call GetLastError.</para>
            </returns>
            <remarks>
            <para>
            The <c>SymGetLineNext64</c> function requires that the IMAGEHLP_LINE64 structure have valid data, presumably obtained from a
            call to the SymGetLineFromAddr64 or SymGetLineFromName64 function. This structure receives the line information for the next
            line in sequence.
            </para>
            <para>
            This function returns a pointer to a buffer that may be reused by another function. Therefore, be sure to copy the data returned
            to another buffer immediately.
            </para>
            <para>
            All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will
            likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more
            than one thread to this function.
            </para>
            <para>
            To call the Unicode version of this function, define DBGHELP_TRANSLATE_TCHAR. <c>SymGetLineNextW64</c> is defined as follows in Dbghelp.h.
            </para>
            <para>
            <code> BOOL IMAGEAPI SymGetLineNextW64( __in HANDLE hProcess, __inout PIMAGEHLP_LINEW64 Line #ifdef DBGHELP_TRANSLATE_TCHAR #define SymGetLineNext64 SymGetLineNextW64 #endif</code>
            </para>
            <para>
            This function supersedes the <c>SymGetLineNext</c> function. For more information, see Updated Platform Support.
            <c>SymGetLineNext</c> is defined as follows in Dbghelp.h.
            </para>
            <para>
            <code>#if !defined(_IMAGEHLP_SOURCE_) &amp;&amp; defined(_IMAGEHLP64) #define SymGetLineNext SymGetLineNext64 #else BOOL IMAGEAPI SymGetLineNext( __in HANDLE hProcess, __inout PIMAGEHLP_LINE Line ); BOOL IMAGEAPI SymGetLineNextW( __in HANDLE hProcess, __inout PIMAGEHLP_LINEW Line ); #endif</code>
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.DbgHelp.SymGetLinePrev(Vanara.PInvoke.HPROCESS,Vanara.PInvoke.DbgHelp.IMAGEHLP_LINE@)">
            <summary>Retrieves the line information for the previous source line.</summary>
            <param name="hProcess">A handle to the process that was originally passed to the SymInitialize function.</param>
            <param name="Line">A pointer to an IMAGEHLP_LINE64 structure.</param>
            <returns>
            <para>If the function succeeds, the return value is <c>TRUE</c>.</para>
            <para>If the function fails, the return value is <c>FALSE</c>. To retrieve extended error information, call GetLastError.</para>
            </returns>
            <remarks>
            <para>
            The <c>SymGetLinePrev64</c> function requires that the IMAGEHLP_LINE64 structure have valid data, presumably obtained from a
            call to the SymGetLineFromAddr64 or SymGetLineFromName64 function. This structure is filled with the line information for the
            previous line in sequence.
            </para>
            <para>
            This function returns a pointer to a buffer that may be reused by another function. Therefore, be sure to copy the data returned
            to another buffer immediately.
            </para>
            <para>
            All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will
            likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more
            than one thread to this function.
            </para>
            <para>
            To call the Unicode version of this function, define DBGHELP_TRANSLATE_TCHAR. <c>SymGetLinePrevW64</c> is defined as follows in DbgHelp.h.
            </para>
            <para>
            <code>BOOL IMAGEAPI SymGetLinePrevW64( __in HANDLE hProcess, __inout PIMAGEHLP_LINEW64 Line ); #ifdef DBGHELP_TRANSLATE_TCHAR #define SymGetLinePrev64 SymGetLinePrevW64 #endif</code>
            </para>
            <para>
            This function supersedes the <c>SymGetLinePrev</c> function. For more information, see Updated Platform Support.
            <c>SymGetLinePrev</c> is defined as follows in DbgHelp.h.
            </para>
            <para>
            <code>#if !defined(_IMAGEHLP_SOURCE_) &amp;&amp; defined(_IMAGEHLP64) #define SymGetLinePrev SymGetLinePrev64 #else BOOL IMAGEAPI SymGetLinePrev( __in HANDLE hProcess, __inout PIMAGEHLP_LINE Line ); BOOL IMAGEAPI SymGetLinePrevW( __in HANDLE hProcess, __inout PIMAGEHLP_LINEW Line ); #endif</code>
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.DbgHelp.SymGetLinePrev64(Vanara.PInvoke.HPROCESS,Vanara.PInvoke.DbgHelp.IMAGEHLP_LINE64@)">
            <summary>Retrieves the line information for the previous source line.</summary>
            <param name="hProcess">A handle to the process that was originally passed to the SymInitialize function.</param>
            <param name="Line">A pointer to an IMAGEHLP_LINE64 structure.</param>
            <returns>
            <para>If the function succeeds, the return value is <c>TRUE</c>.</para>
            <para>If the function fails, the return value is <c>FALSE</c>. To retrieve extended error information, call GetLastError.</para>
            </returns>
            <remarks>
            <para>
            The <c>SymGetLinePrev64</c> function requires that the IMAGEHLP_LINE64 structure have valid data, presumably obtained from a
            call to the SymGetLineFromAddr64 or SymGetLineFromName64 function. This structure is filled with the line information for the
            previous line in sequence.
            </para>
            <para>
            This function returns a pointer to a buffer that may be reused by another function. Therefore, be sure to copy the data returned
            to another buffer immediately.
            </para>
            <para>
            All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will
            likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more
            than one thread to this function.
            </para>
            <para>
            To call the Unicode version of this function, define DBGHELP_TRANSLATE_TCHAR. <c>SymGetLinePrevW64</c> is defined as follows in DbgHelp.h.
            </para>
            <para>
            <code>BOOL IMAGEAPI SymGetLinePrevW64( __in HANDLE hProcess, __inout PIMAGEHLP_LINEW64 Line ); #ifdef DBGHELP_TRANSLATE_TCHAR #define SymGetLinePrev64 SymGetLinePrevW64 #endif</code>
            </para>
            <para>
            This function supersedes the <c>SymGetLinePrev</c> function. For more information, see Updated Platform Support.
            <c>SymGetLinePrev</c> is defined as follows in DbgHelp.h.
            </para>
            <para>
            <code>#if !defined(_IMAGEHLP_SOURCE_) &amp;&amp; defined(_IMAGEHLP64) #define SymGetLinePrev SymGetLinePrev64 #else BOOL IMAGEAPI SymGetLinePrev( __in HANDLE hProcess, __inout PIMAGEHLP_LINE Line ); BOOL IMAGEAPI SymGetLinePrevW( __in HANDLE hProcess, __inout PIMAGEHLP_LINEW Line ); #endif</code>
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.DbgHelp.SymGetLinePrevW64(Vanara.PInvoke.HPROCESS,Vanara.PInvoke.DbgHelp.IMAGEHLP_LINE64@)">
            <summary>Retrieves the line information for the previous source line.</summary>
            <param name="hProcess">A handle to the process that was originally passed to the SymInitialize function.</param>
            <param name="Line">A pointer to an IMAGEHLP_LINE64 structure.</param>
            <returns>
            <para>If the function succeeds, the return value is <c>TRUE</c>.</para>
            <para>If the function fails, the return value is <c>FALSE</c>. To retrieve extended error information, call GetLastError.</para>
            </returns>
            <remarks>
            <para>
            The <c>SymGetLinePrev64</c> function requires that the IMAGEHLP_LINE64 structure have valid data, presumably obtained from a
            call to the SymGetLineFromAddr64 or SymGetLineFromName64 function. This structure is filled with the line information for the
            previous line in sequence.
            </para>
            <para>
            This function returns a pointer to a buffer that may be reused by another function. Therefore, be sure to copy the data returned
            to another buffer immediately.
            </para>
            <para>
            All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will
            likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more
            than one thread to this function.
            </para>
            <para>
            To call the Unicode version of this function, define DBGHELP_TRANSLATE_TCHAR. <c>SymGetLinePrevW64</c> is defined as follows in DbgHelp.h.
            </para>
            <para>
            <code>BOOL IMAGEAPI SymGetLinePrevW64( __in HANDLE hProcess, __inout PIMAGEHLP_LINEW64 Line ); #ifdef DBGHELP_TRANSLATE_TCHAR #define SymGetLinePrev64 SymGetLinePrevW64 #endif</code>
            </para>
            <para>
            This function supersedes the <c>SymGetLinePrev</c> function. For more information, see Updated Platform Support.
            <c>SymGetLinePrev</c> is defined as follows in DbgHelp.h.
            </para>
            <para>
            <code>#if !defined(_IMAGEHLP_SOURCE_) &amp;&amp; defined(_IMAGEHLP64) #define SymGetLinePrev SymGetLinePrev64 #else BOOL IMAGEAPI SymGetLinePrev( __in HANDLE hProcess, __inout PIMAGEHLP_LINE Line ); BOOL IMAGEAPI SymGetLinePrevW( __in HANDLE hProcess, __inout PIMAGEHLP_LINEW Line ); #endif</code>
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.DbgHelp.SymGetModuleBase(Vanara.PInvoke.HPROCESS,System.UInt32)">
            <summary>Retrieves the base address of the module that contains the specified address.</summary>
            <param name="hProcess">A handle to the process that was originally passed to the SymInitialize function.</param>
            <param name="dwAddr">The virtual address that is contained in one of the modules loaded by the SymLoadModule64 function.</param>
            <returns>
            <para>
            If the function succeeds, the return value is a nonzero virtual address. The value is the base address of the module containing
            the address specified by the dwAddr parameter.
            </para>
            <para>If the function fails, the return value is zero. To retrieve extended error information, call GetLastError.</para>
            </returns>
            <remarks>
            <para>
            The module table is searched for a module that contains dwAddr. The module is located based on the load address and size of each module.
            </para>
            <para>
            All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will
            likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more
            than one thread to this function.
            </para>
            <para>
            This function supersedes the <c>SymGetModuleBase</c> function. For more information, see Updated Platform Support.
            <c>SymGetModuleBase</c> is defined as follows in DbgHelp.h.
            </para>
            <para>
            <code>#if !defined(_IMAGEHLP_SOURCE_) &amp;&amp; defined(_IMAGEHLP64) #define SymGetModuleBase SymGetModuleBase64 #else DWORD IMAGEAPI SymGetModuleBase( __in HANDLE hProcess, __in DWORD dwAddr ); #endif</code>
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.DbgHelp.SymGetModuleBase64(Vanara.PInvoke.HPROCESS,System.UInt64)">
            <summary>Retrieves the base address of the module that contains the specified address.</summary>
            <param name="hProcess">A handle to the process that was originally passed to the SymInitialize function.</param>
            <param name="qwAddr">TBD</param>
            <returns>
            <para>
            If the function succeeds, the return value is a nonzero virtual address. The value is the base address of the module containing
            the address specified by the dwAddr parameter.
            </para>
            <para>If the function fails, the return value is zero. To retrieve extended error information, call GetLastError.</para>
            </returns>
            <remarks>
            <para>
            The module table is searched for a module that contains dwAddr. The module is located based on the load address and size of each module.
            </para>
            <para>
            All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will
            likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more
            than one thread to this function.
            </para>
            <para>
            This function supersedes the <c>SymGetModuleBase</c> function. For more information, see Updated Platform Support.
            <c>SymGetModuleBase</c> is defined as follows in DbgHelp.h.
            </para>
            <para>
            <code>#if !defined(_IMAGEHLP_SOURCE_) &amp;&amp; defined(_IMAGEHLP64) #define SymGetModuleBase SymGetModuleBase64 #else DWORD IMAGEAPI SymGetModuleBase( __in HANDLE hProcess, __in DWORD dwAddr ); #endif</code>
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.DbgHelp.SymGetModuleInfo(Vanara.PInvoke.HPROCESS,System.UInt32,Vanara.PInvoke.DbgHelp.IMAGEHLP_MODULE@)">
            <summary>Retrieves the module information of the specified module.</summary>
            <param name="hProcess">A handle to the process that was originally passed to the SymInitialize function.</param>
            <param name="dwAddr">The virtual address that is contained in one of the modules loaded by the SymLoadModule64 function</param>
            <param name="ModuleInfo">
            A pointer to an IMAGEHLP_MODULE64 structure. The <c>SizeOfStruct</c> member must be set to the size of the
            <c>IMAGEHLP_MODULE64</c> structure. An invalid value will result in an error.
            </param>
            <returns>
            <para>If the function succeeds, the return value is <c>TRUE</c>.</para>
            <para>If the function fails, the return value is <c>FALSE</c>. To retrieve extended error information, call GetLastError.</para>
            </returns>
            <remarks>
            <para>
            The module table is searched for a module that contains the dwAddr. The module is located based on the load address and size of
            each module. If a valid module is found, the ModuleInfo parameter is filled with the information about the module.
            </para>
            <para>
            The size of the IMAGEHLP_MODULE64 structure used by this function has changed over the years. If a version of DbgHelp.dll is
            called that is older than the DbgHelp.h used to compile the calling code, then this function may fail with an error code of
            <c>ERROR_INVALID_PARAMETER</c>. This most commonly occurs when the system version (%WinDir%\System32\DbgHelp.dll) is called.
            Code that calls the system version of DbgHelp.dll must be compiled using the appropriate SDK for that Windows release or the SDK
            for a previous release.
            </para>
            <para>
            The recommended model is to redistribute the required version of DbgHelp.dll along with the calling software. This allows the
            caller to use the most robust versions of DbgHelp.dll as well as a simplifying upgrades. The most recent version of DbgHelp.dll
            can always be found in the Debugging Tools for Windows package. As a general rule, code that is compiled to work with older
            versions will always work with newer versions.
            </para>
            <para>
            All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will
            likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more
            than one thread to this function.
            </para>
            <para>
            To call the Unicode version of this function, define <c>DBGHELP_TRANSLATE_TCHAR</c>. <c>SymGetModuleInfoW64</c> is defined as
            follows in DbgHelp.h.
            </para>
            <para>
            <code> BOOL IMAGEAPI SymGetModuleInfoW64( __in HANDLE hProcess, __in DWORD64 qwAddr, __out PIMAGEHLP_MODULEW64 ModuleInfo ); #ifdef DBGHELP_TRANSLATE_TCHAR #define SymGetModuleInfo64 SymGetModuleInfoW64 #endif</code>
            </para>
            <para>
            This function supersedes the <c>SymGetModuleInfo</c> function. For more information, see Updated Platform Support.
            <c>SymGetModuleInfo</c> is defined as follows in DbgHelp.h.
            </para>
            <para>
            <code>#if !defined(_IMAGEHLP_SOURCE_) &amp;&amp; defined(_IMAGEHLP64) #define SymGetModuleInfo SymGetModuleInfo64 #define SymGetModuleInfoW SymGetModuleInfoW64 #else BOOL IMAGEAPI SymGetModuleInfo( __in HANDLE hProcess, __in DWORD dwAddr, __out PIMAGEHLP_MODULE ModuleInfo ); BOOL IMAGEAPI SymGetModuleInfoW( __in HANDLE hProcess, __in DWORD dwAddr, __out PIMAGEHLP_MODULEW ModuleInfo ); #endif</code>
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.DbgHelp.SymGetModuleInfo64(Vanara.PInvoke.HPROCESS,System.UInt64,Vanara.PInvoke.DbgHelp.IMAGEHLP_MODULE64@)">
            <summary>Retrieves the module information of the specified module.</summary>
            <param name="hProcess">A handle to the process that was originally passed to the SymInitialize function.</param>
            <param name="qwAddr">TBD</param>
            <param name="ModuleInfo">
            A pointer to an IMAGEHLP_MODULE64 structure. The <c>SizeOfStruct</c> member must be set to the size of the
            <c>IMAGEHLP_MODULE64</c> structure. An invalid value will result in an error.
            </param>
            <returns>
            <para>If the function succeeds, the return value is <c>TRUE</c>.</para>
            <para>If the function fails, the return value is <c>FALSE</c>. To retrieve extended error information, call GetLastError.</para>
            </returns>
            <remarks>
            <para>
            The module table is searched for a module that contains the dwAddr. The module is located based on the load address and size of
            each module. If a valid module is found, the ModuleInfo parameter is filled with the information about the module.
            </para>
            <para>
            The size of the IMAGEHLP_MODULE64 structure used by this function has changed over the years. If a version of DbgHelp.dll is
            called that is older than the DbgHelp.h used to compile the calling code, then this function may fail with an error code of
            <c>ERROR_INVALID_PARAMETER</c>. This most commonly occurs when the system version (%WinDir%\System32\DbgHelp.dll) is called.
            Code that calls the system version of DbgHelp.dll must be compiled using the appropriate SDK for that Windows release or the SDK
            for a previous release.
            </para>
            <para>
            The recommended model is to redistribute the required version of DbgHelp.dll along with the calling software. This allows the
            caller to use the most robust versions of DbgHelp.dll as well as a simplifying upgrades. The most recent version of DbgHelp.dll
            can always be found in the Debugging Tools for Windows package. As a general rule, code that is compiled to work with older
            versions will always work with newer versions.
            </para>
            <para>
            All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will
            likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more
            than one thread to this function.
            </para>
            <para>
            To call the Unicode version of this function, define <c>DBGHELP_TRANSLATE_TCHAR</c>. <c>SymGetModuleInfoW64</c> is defined as
            follows in DbgHelp.h.
            </para>
            <para>
            <code> BOOL IMAGEAPI SymGetModuleInfoW64( __in HANDLE hProcess, __in DWORD64 qwAddr, __out PIMAGEHLP_MODULEW64 ModuleInfo ); #ifdef DBGHELP_TRANSLATE_TCHAR #define SymGetModuleInfo64 SymGetModuleInfoW64 #endif</code>
            </para>
            <para>
            This function supersedes the <c>SymGetModuleInfo</c> function. For more information, see Updated Platform Support.
            <c>SymGetModuleInfo</c> is defined as follows in DbgHelp.h.
            </para>
            <para>
            <code>#if !defined(_IMAGEHLP_SOURCE_) &amp;&amp; defined(_IMAGEHLP64) #define SymGetModuleInfo SymGetModuleInfo64 #define SymGetModuleInfoW SymGetModuleInfoW64 #else BOOL IMAGEAPI SymGetModuleInfo( __in HANDLE hProcess, __in DWORD dwAddr, __out PIMAGEHLP_MODULE ModuleInfo ); BOOL IMAGEAPI SymGetModuleInfoW( __in HANDLE hProcess, __in DWORD dwAddr, __out PIMAGEHLP_MODULEW ModuleInfo ); #endif</code>
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.DbgHelp.SymGetModuleInfoW64(Vanara.PInvoke.HPROCESS,System.UInt64,Vanara.PInvoke.DbgHelp.IMAGEHLP_MODULE64@)">
            <summary>Retrieves the module information of the specified module.</summary>
            <param name="hProcess">A handle to the process that was originally passed to the SymInitialize function.</param>
            <param name="qwAddr">TBD</param>
            <param name="ModuleInfo">
            A pointer to an IMAGEHLP_MODULE64 structure. The <c>SizeOfStruct</c> member must be set to the size of the
            <c>IMAGEHLP_MODULE64</c> structure. An invalid value will result in an error.
            </param>
            <returns>
            <para>If the function succeeds, the return value is <c>TRUE</c>.</para>
            <para>If the function fails, the return value is <c>FALSE</c>. To retrieve extended error information, call GetLastError.</para>
            </returns>
            <remarks>
            <para>
            The module table is searched for a module that contains the dwAddr. The module is located based on the load address and size of
            each module. If a valid module is found, the ModuleInfo parameter is filled with the information about the module.
            </para>
            <para>
            The size of the IMAGEHLP_MODULE64 structure used by this function has changed over the years. If a version of DbgHelp.dll is
            called that is older than the DbgHelp.h used to compile the calling code, then this function may fail with an error code of
            <c>ERROR_INVALID_PARAMETER</c>. This most commonly occurs when the system version (%WinDir%\System32\DbgHelp.dll) is called.
            Code that calls the system version of DbgHelp.dll must be compiled using the appropriate SDK for that Windows release or the SDK
            for a previous release.
            </para>
            <para>
            The recommended model is to redistribute the required version of DbgHelp.dll along with the calling software. This allows the
            caller to use the most robust versions of DbgHelp.dll as well as a simplifying upgrades. The most recent version of DbgHelp.dll
            can always be found in the Debugging Tools for Windows package. As a general rule, code that is compiled to work with older
            versions will always work with newer versions.
            </para>
            <para>
            All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will
            likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more
            than one thread to this function.
            </para>
            <para>
            To call the Unicode version of this function, define <c>DBGHELP_TRANSLATE_TCHAR</c>. <c>SymGetModuleInfoW64</c> is defined as
            follows in DbgHelp.h.
            </para>
            <para>
            <code> BOOL IMAGEAPI SymGetModuleInfoW64( __in HANDLE hProcess, __in DWORD64 qwAddr, __out PIMAGEHLP_MODULEW64 ModuleInfo ); #ifdef DBGHELP_TRANSLATE_TCHAR #define SymGetModuleInfo64 SymGetModuleInfoW64 #endif</code>
            </para>
            <para>
            This function supersedes the <c>SymGetModuleInfo</c> function. For more information, see Updated Platform Support.
            <c>SymGetModuleInfo</c> is defined as follows in DbgHelp.h.
            </para>
            <para>
            <code>#if !defined(_IMAGEHLP_SOURCE_) &amp;&amp; defined(_IMAGEHLP64) #define SymGetModuleInfo SymGetModuleInfo64 #define SymGetModuleInfoW SymGetModuleInfoW64 #else BOOL IMAGEAPI SymGetModuleInfo( __in HANDLE hProcess, __in DWORD dwAddr, __out PIMAGEHLP_MODULE ModuleInfo ); BOOL IMAGEAPI SymGetModuleInfoW( __in HANDLE hProcess, __in DWORD dwAddr, __out PIMAGEHLP_MODULEW ModuleInfo ); #endif</code>
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.DbgHelp.SymGetOmaps(Vanara.PInvoke.HPROCESS,System.UInt64,Vanara.PInvoke.DbgHelp.OMAP*@,System.UInt64@,Vanara.PInvoke.DbgHelp.OMAP*@,System.UInt64@)">
            <summary>Retrieves the omap tables within a loaded module.</summary>
            <param name="hProcess">A handle to a process. This handle must have been previously passed to the SymInitialize function.</param>
            <param name="BaseOfDll">The base address of the module.</param>
            <param name="OmapTo">
            An array of address map entries to the new image layout taken from the original layout. For details on the map entries, see the
            OMAP structure.
            </param>
            <param name="cOmapTo">The number of entries in the OmapTo array.</param>
            <param name="OmapFrom">
            An array of address map entries from the new image layout to the original layout (as described by the debug symbols). For
            details on the map entries, see the OMAP structure.
            </param>
            <param name="cOmapFrom">The number of entries in the OmapFrom array.</param>
            <returns>
            <para>If the function succeeds, the return value is <c>TRUE</c>.</para>
            <para>
            If the function fails (the omap is not found), the return value is <c>FALSE</c>. To retrieve extended error information, call GetLastError.
            </para>
            </returns>
            <remarks>
            All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will
            likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more
            than one thread to this function.
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.DbgHelp.SymGetOptions">
            <summary>Retrieves the current option mask.</summary>
            <returns>
            The function returns the current options that have been set. Zero is a valid value and indicates that all options are turned off.
            </returns>
            <remarks>
            <para>
            These options can be changed several times while the library is in use by an application. Any option change affects all future
            calls to the symbol handler.
            </para>
            <para>The return value is the combination of the following values that have been set using the SymSetOptions function.</para>
            <list type="bullet">
            <item>
            <term>SYMOPT_ALLOW_ABSOLUTE_SYMBOLS</term>
            </item>
            <item>
            <term>SYMOPT_ALLOW_ZERO_ADDRESS</term>
            </item>
            <item>
            <term>SYMOPT_AUTO_PUBLICS</term>
            </item>
            <item>
            <term>SYMOPT_CASE_INSENSITIVE</term>
            </item>
            <item>
            <term>SYMOPT_DEBUG</term>
            </item>
            <item>
            <term>SYMOPT_DEFERRED_LOADS</term>
            </item>
            <item>
            <term>SYMOPT_EXACT_SYMBOLS</term>
            </item>
            <item>
            <term>SYMOPT_FAIL_CRITICAL_ERRORS</term>
            </item>
            <item>
            <term>SYMOPT_FAVOR_COMPRESSED</term>
            </item>
            <item>
            <term>SYMOPT_FLAT_DIRECTORY</term>
            </item>
            <item>
            <term>SYMOPT_IGNORE_CVREC</term>
            </item>
            <item>
            <term>SYMOPT_IGNORE_IMAGEDIR</term>
            </item>
            <item>
            <term>SYMOPT_IGNORE_NT_SYMPATH</term>
            </item>
            <item>
            <term>SYMOPT_INCLUDE_32BIT_MODULES</term>
            </item>
            <item>
            <term>SYMOPT_LOAD_ANYTHING</term>
            </item>
            <item>
            <term>SYMOPT_LOAD_LINES</term>
            </item>
            <item>
            <term>SYMOPT_NO_CPP</term>
            </item>
            <item>
            <term>SYMOPT_NO_IMAGE_SEARCH</term>
            </item>
            <item>
            <term>SYMOPT_NO_PROMPTS</term>
            </item>
            <item>
            <term>SYMOPT_NO_PUBLICS</term>
            </item>
            <item>
            <term>SYMOPT_NO_UNQUALIFIED_LOADS</term>
            </item>
            <item>
            <term>SYMOPT_OVERWRITE</term>
            </item>
            <item>
            <term>SYMOPT_PUBLICS_ONLY</term>
            </item>
            <item>
            <term>SYMOPT_SECURE</term>
            </item>
            <item>
            <term>SYMOPT_UNDNAME</term>
            </item>
            </list>
            <para>
            All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will
            likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more
            than one thread to this function.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.DbgHelp.SymGetScope(Vanara.PInvoke.HPROCESS,System.UInt64,System.UInt32,Vanara.PInvoke.DbgHelp.SYMBOL_INFO@)">
            <summary>Retrieves the scope for the specified index.</summary>
            <param name="hProcess">A handle to a process. This handle must have been previously passed to the SymInitialize function.</param>
            <param name="BaseOfDll">The base address of the module.</param>
            <param name="Index">A unique value for the symbol.</param>
            <param name="Symbol">A pointer to a SYMBOL_INFO structure. The <c>Scope</c> member contains the scope.</param>
            <returns>
            <para>If the function succeeds, the return value is <c>TRUE</c>.</para>
            <para>If the function fails, the return value is <c>FALSE</c>. To retrieve extended error information, call GetLastError.</para>
            </returns>
            <remarks>
            All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will
            likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more
            than one thread to this function.
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.DbgHelp.SymGetSearchPath(Vanara.PInvoke.HPROCESS,System.Text.StringBuilder,System.UInt32)">
            <summary>Retrieves the symbol search path for the specified process.</summary>
            <param name="hProcess">A handle to the process that was originally passed to the SymInitialize function.</param>
            <param name="SearchPath">A pointer to the buffer that receives the symbol search path.</param>
            <param name="SearchPathLength">The size of the SearchPath buffer, in characters.</param>
            <returns>
            <para>If the function succeeds, the return value is <c>TRUE</c>.</para>
            <para>If the function fails, the return value is <c>FALSE</c>. To retrieve extended error information, call GetLastError.</para>
            </returns>
            <remarks>
            <para>
            The <c>SymGetSearchPath</c> function copies the symbol search path for the specified process into the SearchPath buffer. If the
            function fails, the contents of the buffer are undefined.
            </para>
            <para>To specify a symbol search path for the process, use the SymSetSearchPath function.</para>
            <para>
            All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will
            likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more
            than one thread to this function.
            </para>
            <para>To call the Unicode version of this function, define DBGHELP_TRANSLATE_TCHAR.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.DbgHelp.SymGetSourceFile(Vanara.PInvoke.HPROCESS,System.UInt64,System.String,System.String,System.Text.StringBuilder,System.UInt32)">
            <summary>Retrieves the specified source file from the source server.</summary>
            <param name="hProcess">A handle to a process. This handle must have been previously passed to the SymInitialize function.</param>
            <param name="Base">The base address of the module.</param>
            <param name="Params">This parameter is unused.</param>
            <param name="FileSpec">The name of the source file.</param>
            <param name="FilePath">A pointer to a buffer that receives the fully qualified path of the source file.</param>
            <param name="Size">The size of the FilePath buffer, in characters.</param>
            <returns>
            <para>If the function succeeds, the return value is <c>TRUE</c>.</para>
            <para>If the function fails, the return value is <c>FALSE</c>. To retrieve extended error information, call GetLastError.</para>
            </returns>
            <remarks>
            <para>To control which directory receives the source files, use the SymSetHomeDirectory function.</para>
            <para>
            All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will
            likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more
            than one thread to this function.
            </para>
            <para>To call the Unicode version of this function, define DBGHELP_TRANSLATE_TCHAR.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.DbgHelp.SymGetSourceFileChecksum(Vanara.PInvoke.HPROCESS,System.UInt64,System.String,System.UInt32@,System.IntPtr,System.UInt32,System.UInt32@)">
            <summary>Retrieves the specified source file checksum from the source server.</summary>
            <param name="hProcess">A handle to a process. This handle must have been previously passed to the SymInitialize function.</param>
            <param name="Base">The base address of the module.</param>
            <param name="FileSpec">The name of the source file.</param>
            <param name="pCheckSumType">On success, points to the checksum type.</param>
            <param name="pChecksum">
            pointer to a buffer that receives the checksum. If <c>NULL</c>, then when the call returns pActualBytesWritten returns the
            number of bytes required.
            </param>
            <param name="checksumSize">The size of the pChecksum buffer, in bytes.</param>
            <param name="pActualBytesWritten">Pointer to the actual bytes written in the buffer.</param>
            <returns>
            <para>If the function succeeds, the return value is <c>TRUE</c>.</para>
            <para>If the function fails, the return value is <c>FALSE</c>. To retrieve extended error information, call GetLastError.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.DbgHelp.SymGetSourceFileFromToken(Vanara.PInvoke.HPROCESS,System.IntPtr,System.String,System.Text.StringBuilder,System.UInt32)">
            <summary>Retrieves the source file associated with the specified token from the source server.</summary>
            <param name="hProcess">A handle to a process. This handle must have been previously passed to the SymInitialize function.</param>
            <param name="Token">A pointer to the token.</param>
            <param name="Params">This parameter is unused.</param>
            <param name="FilePath">A pointer to a buffer that receives the fully qualified path of the source file.</param>
            <param name="Size">The size of the FilePath buffer, in characters.</param>
            <returns>
            <para>If the function succeeds, the return value is <c>TRUE</c>.</para>
            <para>If the function fails, the return value is <c>FALSE</c>. To retrieve extended error information, call GetLastError.</para>
            </returns>
            <remarks>
            <para>
            All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will
            likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more
            than one thread to this function.
            </para>
            <para>To call the Unicode version of this function, define DBGHELP_TRANSLATE_TCHAR.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.DbgHelp.SymGetSourceFileToken(Vanara.PInvoke.HPROCESS,System.UInt64,System.String,System.IntPtr@,System.UInt32@)">
            <summary>Retrieves token for the specified source file from the source server.</summary>
            <param name="hProcess">A handle to a process. This handle must have been previously passed to the SymInitialize function.</param>
            <param name="Base">The base address of the module.</param>
            <param name="FileSpec">The name of the source file.</param>
            <param name="Token">A pointer to a buffer that receives the token.</param>
            <param name="Size">The size of the Token buffer, in bytes.</param>
            <returns>
            <para>If the function succeeds, the return value is <c>TRUE</c>.</para>
            <para>If the function fails, the return value is <c>FALSE</c>. To retrieve extended error information, call GetLastError.</para>
            </returns>
            <remarks>
            <para>
            All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will
            likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more
            than one thread to this function.
            </para>
            <para>To call the Unicode version of this function, define DBGHELP_TRANSLATE_TCHAR.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.DbgHelp.SymGetSourceVarFromToken(Vanara.PInvoke.HPROCESS,System.IntPtr,System.String,System.String,System.Text.StringBuilder,System.UInt32)">
            <summary>Retrieves the value associated with the specified variable name from the Source Server token.</summary>
            <param name="hProcess">A handle to a process. This handle must have been previously passed to the SymInitialize function.</param>
            <param name="Token">A pointer to the token.</param>
            <param name="Params">This parameter is unused.</param>
            <param name="VarName">The name of the variable token whose value you want to retrieve.</param>
            <param name="Value">
            A pointer to a buffer that receives the value associated with the variable token specified in the VarName parameter.
            </param>
            <param name="Size">The size of the Value buffer, in characters.</param>
            <returns>
            <para>If the function succeeds, the return value is <c>TRUE</c>.</para>
            <para>If the function fails, the return value is <c>FALSE</c>. To retrieve extended error information, call GetLastError.</para>
            </returns>
            <remarks>
            <para>
            All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will
            likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more
            than one thread to this function.
            </para>
            <para>To call the Unicode version of this function, define DBGHELP_TRANSLATE_TCHAR.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.DbgHelp.SymGetSymbolFile(Vanara.PInvoke.HPROCESS,System.String,System.String,Vanara.PInvoke.DbgHelp.IMAGEHLP_SF_TYPE,System.Text.StringBuilder,Vanara.PInvoke.SizeT,System.Text.StringBuilder,Vanara.PInvoke.SizeT)">
            <summary>Locates a symbol file in the specified symbol path.</summary>
            <param name="hProcess">
            <para>A handle to the process that was originally passed to the SymInitialize function.</para>
            <para>
            If this handle is 0, SymPath cannot be <c>NULL</c>. Use this option to load a symbol file without calling SymInitialize or SymCleanup.
            </para>
            </param>
            <param name="SymPath">
            The symbol path. If this parameter is <c>NULL</c> or an empty string, the function uses the symbol path set using the
            SymInitialize or SymSetSearchPath function.
            </param>
            <param name="ImageFile">The name of the image file.</param>
            <param name="Type">
            <para>The type of symbol file. This parameter can be one of the following values.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>sfImage 0</term>
            <term>A .exe or .dll file.</term>
            </item>
            <item>
            <term>sfDbg 1</term>
            <term>A .dbg file.</term>
            </item>
            <item>
            <term>sfPdb 2</term>
            <term>A .pdb file.</term>
            </item>
            <item>
            <term>sfMpd 3</term>
            <term>Reserved.</term>
            </item>
            </list>
            </param>
            <param name="SymbolFile">A pointer to a null-terminated string that receives the name of the symbol file.</param>
            <param name="cSymbolFile">The size of the SymbolFile buffer, in characters.</param>
            <param name="DbgFile">
            A pointer to a buffer that receives the fully qualified path to the symbol file. This buffer must be at least MAX_PATH characters.
            </param>
            <param name="cDbgFile">The size of the DbgFile buffer, in characters.</param>
            <returns>
            If the server locates a valid symbol file, it returns <c>TRUE</c>; otherwise, it returns <c>FALSE</c> and GetLastError returns a
            value that indicates why the symbol file was not returned.
            </returns>
            <remarks>
            <para>
            All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will
            likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more
            than one thread to this function.
            </para>
            <para>To call the Unicode version of this function, define DBGHELP_TRANSLATE_TCHAR.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.DbgHelp.SymGetSymFromAddr(Vanara.PInvoke.HPROCESS,System.UInt32,System.UInt32@,Vanara.PInvoke.DbgHelp.SafeIMAGEHLP_SYMBOL)">
            <summary>
            <para>Locates the symbol for the specified address.</para>
            <para><c>Note</c> This function is provided only for compatibility. Applications should use SymFromAddr.</para>
            </summary>
            <param name="hProcess">A handle to the process that was originally passed to the SymInitialize function.</param>
            <param name="dwAddr">
            The address for which a symbol is to be located. The address does not have to be on a symbol boundary. If the address comes
            after the beginning of a symbol and before the end of the symbol (the beginning of the symbol plus the symbol size), the symbol
            is found.
            </param>
            <param name="pdwDisplacement">The displacement from the beginning of the symbol, or zero.</param>
            <param name="Symbol">A pointer to an IMAGEHLP_SYMBOL64 structure.</param>
            <returns>
            <para>If the function succeeds, the return value is <c>TRUE</c>.</para>
            <para>If the function fails, the return value is <c>FALSE</c>. To retrieve extended error information, call GetLastError.</para>
            </returns>
            <remarks>
            <para>
            The <c>SymGetSymFromAddr64</c> function locates the symbol for a specified address. The modules are searched for the one the
            address belongs to. When the module is found, its symbol table is searched for a match. When the symbol is found, the symbol
            information is copied into the Symbol buffer provided by the caller. The caller must allocate the Symbol buffer properly and
            fill in the required parameters in the IMAGEHLP_SYMBOL64 structure before calling <c>SymGetSymFromAddr64</c>.
            </para>
            <para>
            All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will
            likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more
            than one thread to this function.
            </para>
            <para>
            This function supersedes the <c>SymGetSymFromAddr</c> function. For more information, see Updated Platform Support.
            <c>SymGetSymFromAddr</c> is defined as follows in Dbghelp.h.
            </para>
            <para>
            <code>#if !defined(_IMAGEHLP_SOURCE_) &amp;&amp; defined(_IMAGEHLP64) #define SymGetSymFromAddr SymGetSymFromAddr64 #else BOOL IMAGEAPI SymGetSymFromAddr( __in HANDLE hProcess, __in DWORD dwAddr, __out_opt PDWORD pdwDisplacement, __inout PIMAGEHLP_SYMBOL Symbol ); #endif</code>
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.DbgHelp.SymGetSymFromAddr64(Vanara.PInvoke.HPROCESS,System.UInt64,System.UInt64@,Vanara.PInvoke.DbgHelp.SafeIMAGEHLP_SYMBOL64)">
            <summary>
            <para>Locates the symbol for the specified address.</para>
            <para><c>Note</c> This function is provided only for compatibility. Applications should use SymFromAddr.</para>
            </summary>
            <param name="hProcess">A handle to the process that was originally passed to the SymInitialize function.</param>
            <param name="qwAddr">TBD</param>
            <param name="pdwDisplacement">The displacement from the beginning of the symbol, or zero.</param>
            <param name="Symbol">A pointer to an IMAGEHLP_SYMBOL64 structure.</param>
            <returns>
            <para>If the function succeeds, the return value is <c>TRUE</c>.</para>
            <para>If the function fails, the return value is <c>FALSE</c>. To retrieve extended error information, call GetLastError.</para>
            </returns>
            <remarks>
            <para>
            The <c>SymGetSymFromAddr64</c> function locates the symbol for a specified address. The modules are searched for the one the
            address belongs to. When the module is found, its symbol table is searched for a match. When the symbol is found, the symbol
            information is copied into the Symbol buffer provided by the caller. The caller must allocate the Symbol buffer properly and
            fill in the required parameters in the IMAGEHLP_SYMBOL64 structure before calling <c>SymGetSymFromAddr64</c>.
            </para>
            <para>
            All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will
            likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more
            than one thread to this function.
            </para>
            <para>
            This function supersedes the <c>SymGetSymFromAddr</c> function. For more information, see Updated Platform Support.
            <c>SymGetSymFromAddr</c> is defined as follows in Dbghelp.h.
            </para>
            <para>
            <code>#if !defined(_IMAGEHLP_SOURCE_) &amp;&amp; defined(_IMAGEHLP64) #define SymGetSymFromAddr SymGetSymFromAddr64 #else BOOL IMAGEAPI SymGetSymFromAddr( __in HANDLE hProcess, __in DWORD dwAddr, __out_opt PDWORD pdwDisplacement, __inout PIMAGEHLP_SYMBOL Symbol ); #endif</code>
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.DbgHelp.SymGetSymFromName(Vanara.PInvoke.HPROCESS,System.String,Vanara.PInvoke.DbgHelp.SafeIMAGEHLP_SYMBOL)">
            <summary>
            <para>Locates a symbol for the specified name.</para>
            <para><c>Note</c> This function is provided only for compatibility. Applications should use SymFromName.</para>
            </summary>
            <param name="hProcess">A handle to the process that was originally passed to the SymInitialize function.</param>
            <param name="Name">The symbol name for which a symbol is to be located.</param>
            <param name="Symbol">A pointer to an IMAGEHLP_SYMBOL64 structure.</param>
            <returns>
            <para>If the function succeeds, the return value is <c>TRUE</c>.</para>
            <para>If the function fails, the return value is <c>FALSE</c>. To retrieve extended error information, call GetLastError.</para>
            </returns>
            <remarks>
            <para>
            The <c>SymGetSymFromName64</c> function is used to locate a symbol for a specified name. The name can contain a module prefix
            that isolates the symbol search to a single module's symbol table.
            </para>
            <para>
            The module prefix is in the form of "module!". The "!" character is the delimiter between the module name and the symbol name.
            If there is no module prefix, then the search is performed on each module's symbol table in a linear manner, beginning with the
            first module that is loaded.
            </para>
            <para>
            Using the module prefix is preferable for two reasons. First, the symbol search occurs much faster. Second, when deferred symbol
            loading is turned on, the search causes symbols to be loaded for each module that is searched. When the symbol is found, the
            symbol information is copied into the Symbol buffer provided by the caller. The caller must allocate the Symbol buffer properly
            and fill in the required parameters in the IMAGEHLP_SYMBOL64 structure before calling <c>SymGetSymFromName64</c>.
            </para>
            <para>
            All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will
            likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more
            than one thread to this function.
            </para>
            <para>
            This function supersedes the <c>SymGetSymFromName</c> function. For more information, see Updated Platform Support.
            <c>SymGetSymFromName</c> is defined as follows in Dbghelp.h.
            </para>
            <para>
            <code>#if !defined(_IMAGEHLP_SOURCE_) &amp;&amp; defined(_IMAGEHLP64) #define SymGetSymFromName SymGetSymFromName64 #else BOOL IMAGEAPI SymGetSymFromName( __in HANDLE hProcess, __in PCSTR Name, __inout PIMAGEHLP_SYMBOL Symbol ); #endif</code>
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.DbgHelp.SymGetSymFromName64(Vanara.PInvoke.HPROCESS,System.String,Vanara.PInvoke.DbgHelp.SafeIMAGEHLP_SYMBOL64)">
            <summary>
            <para>Locates a symbol for the specified name.</para>
            <para><c>Note</c> This function is provided only for compatibility. Applications should use SymFromName.</para>
            </summary>
            <param name="hProcess">A handle to the process that was originally passed to the SymInitialize function.</param>
            <param name="Name">The symbol name for which a symbol is to be located.</param>
            <param name="Symbol">A pointer to an IMAGEHLP_SYMBOL64 structure.</param>
            <returns>
            <para>If the function succeeds, the return value is <c>TRUE</c>.</para>
            <para>If the function fails, the return value is <c>FALSE</c>. To retrieve extended error information, call GetLastError.</para>
            </returns>
            <remarks>
            <para>
            The <c>SymGetSymFromName64</c> function is used to locate a symbol for a specified name. The name can contain a module prefix
            that isolates the symbol search to a single module's symbol table.
            </para>
            <para>
            The module prefix is in the form of "module!". The "!" character is the delimiter between the module name and the symbol name.
            If there is no module prefix, then the search is performed on each module's symbol table in a linear manner, beginning with the
            first module that is loaded.
            </para>
            <para>
            Using the module prefix is preferable for two reasons. First, the symbol search occurs much faster. Second, when deferred symbol
            loading is turned on, the search causes symbols to be loaded for each module that is searched. When the symbol is found, the
            symbol information is copied into the Symbol buffer provided by the caller. The caller must allocate the Symbol buffer properly
            and fill in the required parameters in the IMAGEHLP_SYMBOL64 structure before calling <c>SymGetSymFromName64</c>.
            </para>
            <para>
            All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will
            likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more
            than one thread to this function.
            </para>
            <para>
            This function supersedes the <c>SymGetSymFromName</c> function. For more information, see Updated Platform Support.
            <c>SymGetSymFromName</c> is defined as follows in Dbghelp.h.
            </para>
            <para>
            <code>#if !defined(_IMAGEHLP_SOURCE_) &amp;&amp; defined(_IMAGEHLP64) #define SymGetSymFromName SymGetSymFromName64 #else BOOL IMAGEAPI SymGetSymFromName( __in HANDLE hProcess, __in PCSTR Name, __inout PIMAGEHLP_SYMBOL Symbol ); #endif</code>
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.DbgHelp.SymGetSymNext(Vanara.PInvoke.HPROCESS,Vanara.PInvoke.DbgHelp.SafeIMAGEHLP_SYMBOL)">
            <summary>
            <para>Retrieves the symbol information for the next symbol.</para>
            <para><c>Note</c> This function is provided only for compatibility. Applications should use SymNext.</para>
            </summary>
            <param name="hProcess">A handle to the process that was originally passed to the SymInitialize function.</param>
            <param name="Symbol">A pointer to an IMAGEHLP_SYMBOL64 structure.</param>
            <returns>
            <para>If the function succeeds, the return value is <c>TRUE</c>.</para>
            <para>If the function fails, the return value is <c>FALSE</c>. To retrieve extended error information, call GetLastError.</para>
            </returns>
            <remarks>
            <para>
            The <c>SymGetSymNext64</c> function requires that the IMAGEHLP_SYMBOL64 structure have valid data, presumably obtained from a
            call to the SymGetSymFromAddr64 or SymGetSymFromName64 function. This structure is filled with the symbol information for the
            next symbol in sequence by virtual address.
            </para>
            <para>
            All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will
            likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more
            than one thread to this function.
            </para>
            <para>
            To call the Unicode version of this function, define <c>DBGHELP_TRANSLATE_TCHAR</c>. <c>SymGetSymNextW64</c> is defined as
            follows in DbgHelp.h.
            </para>
            <para>
            <code>BOOL IMAGEAPI SymGetSymNextW64( __in HANDLE hProcess, __inout PIMAGEHLP_SYMBOLW64 Symbol );</code>
            </para>
            <para>
            This function supersedes the <c>SymGetSymNext</c> function. For more information, see Updated Platform Support.
            <c>SymGetSymNext</c> is defined as follows in DbgHelp.h.
            </para>
            <para>
            <code>#if !defined(_IMAGEHLP_SOURCE_) &amp;&amp; defined(_IMAGEHLP64) #define SymGetSymNext SymGetSymNext64 #define SymGetSymNextW SymGetSymNextW64 #else BOOL IMAGEAPI SymGetSymNext( __in HANDLE hProcess, __inout PIMAGEHLP_SYMBOL Symbol ); BOOL IMAGEAPI SymGetSymNextW( __in HANDLE hProcess, __inout PIMAGEHLP_SYMBOLW Symbol ); #endif</code>
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.DbgHelp.SymGetSymNext64(Vanara.PInvoke.HPROCESS,Vanara.PInvoke.DbgHelp.SafeIMAGEHLP_SYMBOL64)">
            <summary>
            <para>Retrieves the symbol information for the next symbol.</para>
            <para><c>Note</c> This function is provided only for compatibility. Applications should use SymNext.</para>
            </summary>
            <param name="hProcess">A handle to the process that was originally passed to the SymInitialize function.</param>
            <param name="Symbol">A pointer to an IMAGEHLP_SYMBOL64 structure.</param>
            <returns>
            <para>If the function succeeds, the return value is <c>TRUE</c>.</para>
            <para>If the function fails, the return value is <c>FALSE</c>. To retrieve extended error information, call GetLastError.</para>
            </returns>
            <remarks>
            <para>
            The <c>SymGetSymNext64</c> function requires that the IMAGEHLP_SYMBOL64 structure have valid data, presumably obtained from a
            call to the SymGetSymFromAddr64 or SymGetSymFromName64 function. This structure is filled with the symbol information for the
            next symbol in sequence by virtual address.
            </para>
            <para>
            All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will
            likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more
            than one thread to this function.
            </para>
            <para>
            To call the Unicode version of this function, define <c>DBGHELP_TRANSLATE_TCHAR</c>. <c>SymGetSymNextW64</c> is defined as
            follows in DbgHelp.h.
            </para>
            <para>
            <code>BOOL IMAGEAPI SymGetSymNextW64( __in HANDLE hProcess, __inout PIMAGEHLP_SYMBOLW64 Symbol );</code>
            </para>
            <para>
            This function supersedes the <c>SymGetSymNext</c> function. For more information, see Updated Platform Support.
            <c>SymGetSymNext</c> is defined as follows in DbgHelp.h.
            </para>
            <para>
            <code>#if !defined(_IMAGEHLP_SOURCE_) &amp;&amp; defined(_IMAGEHLP64) #define SymGetSymNext SymGetSymNext64 #define SymGetSymNextW SymGetSymNextW64 #else BOOL IMAGEAPI SymGetSymNext( __in HANDLE hProcess, __inout PIMAGEHLP_SYMBOL Symbol ); BOOL IMAGEAPI SymGetSymNextW( __in HANDLE hProcess, __inout PIMAGEHLP_SYMBOLW Symbol ); #endif</code>
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.DbgHelp.SymGetSymNextW64(Vanara.PInvoke.HPROCESS,Vanara.PInvoke.DbgHelp.SafeIMAGEHLP_SYMBOL64)">
            <summary>
            <para>Retrieves the symbol information for the next symbol.</para>
            <para><c>Note</c> This function is provided only for compatibility. Applications should use SymNext.</para>
            </summary>
            <param name="hProcess">A handle to the process that was originally passed to the SymInitialize function.</param>
            <param name="Symbol">A pointer to an IMAGEHLP_SYMBOL64 structure.</param>
            <returns>
            <para>If the function succeeds, the return value is <c>TRUE</c>.</para>
            <para>If the function fails, the return value is <c>FALSE</c>. To retrieve extended error information, call GetLastError.</para>
            </returns>
            <remarks>
            <para>
            The <c>SymGetSymNext64</c> function requires that the IMAGEHLP_SYMBOL64 structure have valid data, presumably obtained from a
            call to the SymGetSymFromAddr64 or SymGetSymFromName64 function. This structure is filled with the symbol information for the
            next symbol in sequence by virtual address.
            </para>
            <para>
            All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will
            likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more
            than one thread to this function.
            </para>
            <para>
            To call the Unicode version of this function, define <c>DBGHELP_TRANSLATE_TCHAR</c>. <c>SymGetSymNextW64</c> is defined as
            follows in DbgHelp.h.
            </para>
            <para>
            <code>BOOL IMAGEAPI SymGetSymNextW64( __in HANDLE hProcess, __inout PIMAGEHLP_SYMBOLW64 Symbol );</code>
            </para>
            <para>
            This function supersedes the <c>SymGetSymNext</c> function. For more information, see Updated Platform Support.
            <c>SymGetSymNext</c> is defined as follows in DbgHelp.h.
            </para>
            <para>
            <code>#if !defined(_IMAGEHLP_SOURCE_) &amp;&amp; defined(_IMAGEHLP64) #define SymGetSymNext SymGetSymNext64 #define SymGetSymNextW SymGetSymNextW64 #else BOOL IMAGEAPI SymGetSymNext( __in HANDLE hProcess, __inout PIMAGEHLP_SYMBOL Symbol ); BOOL IMAGEAPI SymGetSymNextW( __in HANDLE hProcess, __inout PIMAGEHLP_SYMBOLW Symbol ); #endif</code>
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.DbgHelp.SymGetSymPrev(Vanara.PInvoke.HPROCESS,Vanara.PInvoke.DbgHelp.SafeIMAGEHLP_SYMBOL)">
            <summary>
            <para>Retrieves the symbol information for the previous symbol.</para>
            <para><c>Note</c> This function is provided only for compatibility. Applications should use SymPrev.</para>
            </summary>
            <param name="hProcess">A handle to the process that was originally passed to the SymInitialize function.</param>
            <param name="Symbol">A pointer to an IMAGEHLP_SYMBOL64 structure.</param>
            <returns>
            <para>If the function succeeds, the return value is <c>TRUE</c>.</para>
            <para>If the function fails, the return value is <c>FALSE</c>. To retrieve extended error information, call GetLastError.</para>
            </returns>
            <remarks>
            <para>
            The <c>SymGetSymPrev64</c> function requires the IMAGEHLP_SYMBOL64 structure to have valid data, presumably obtained from a call
            to the SymGetSymFromAddr64 or SymGetSymFromName64 function. This structure is filled in with the symbol information for the
            previous symbol in sequence by virtual address.
            </para>
            <para>
            All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will
            likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more
            than one thread to this function.
            </para>
            <para>
            To call the Unicode version of this function, define DBGHELP_TRANSLATE_TCHAR. <c>SymGetSymPrevW64</c> is defined as follows in DbgHelp.h.
            </para>
            <para>
            <code>BOOL IMAGEAPI SymGetSymPrevW64( __in HANDLE hProcess, __inout PIMAGEHLP_SYMBOLW64 Symbol );</code>
            </para>
            <para>
            This function supersedes the <c>SymGetSymPrev</c> function. For more information, see Updated Platform Support.
            <c>SymGetSymPrev</c> is defined as follows in Dbghelp.h.
            </para>
            <para>
            <code>#if !defined(_IMAGEHLP_SOURCE_) &amp;&amp; defined(_IMAGEHLP64) #define SymGetSymPrev SymGetSymPrev64 #define SymGetSymPrevW SymGetSymPrevW64 #else BOOL IMAGEAPI SymGetSymPrev( __in HANDLE hProcess, __inout PIMAGEHLP_SYMBOL Symbol ); BOOL IMAGEAPI SymGetSymPrevW( __in HANDLE hProcess, __inout PIMAGEHLP_SYMBOLW Symbol ); #endif</code>
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.DbgHelp.SymGetSymPrev64(Vanara.PInvoke.HPROCESS,Vanara.PInvoke.DbgHelp.SafeIMAGEHLP_SYMBOL64)">
            <summary>
            <para>Retrieves the symbol information for the previous symbol.</para>
            <para><c>Note</c> This function is provided only for compatibility. Applications should use SymPrev.</para>
            </summary>
            <param name="hProcess">A handle to the process that was originally passed to the SymInitialize function.</param>
            <param name="Symbol">A pointer to an IMAGEHLP_SYMBOL64 structure.</param>
            <returns>
            <para>If the function succeeds, the return value is <c>TRUE</c>.</para>
            <para>If the function fails, the return value is <c>FALSE</c>. To retrieve extended error information, call GetLastError.</para>
            </returns>
            <remarks>
            <para>
            The <c>SymGetSymPrev64</c> function requires the IMAGEHLP_SYMBOL64 structure to have valid data, presumably obtained from a call
            to the SymGetSymFromAddr64 or SymGetSymFromName64 function. This structure is filled in with the symbol information for the
            previous symbol in sequence by virtual address.
            </para>
            <para>
            All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will
            likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more
            than one thread to this function.
            </para>
            <para>
            To call the Unicode version of this function, define DBGHELP_TRANSLATE_TCHAR. <c>SymGetSymPrevW64</c> is defined as follows in DbgHelp.h.
            </para>
            <para>
            <code>BOOL IMAGEAPI SymGetSymPrevW64( __in HANDLE hProcess, __inout PIMAGEHLP_SYMBOLW64 Symbol );</code>
            </para>
            <para>
            This function supersedes the <c>SymGetSymPrev</c> function. For more information, see Updated Platform Support.
            <c>SymGetSymPrev</c> is defined as follows in Dbghelp.h.
            </para>
            <para>
            <code>#if !defined(_IMAGEHLP_SOURCE_) &amp;&amp; defined(_IMAGEHLP64) #define SymGetSymPrev SymGetSymPrev64 #define SymGetSymPrevW SymGetSymPrevW64 #else BOOL IMAGEAPI SymGetSymPrev( __in HANDLE hProcess, __inout PIMAGEHLP_SYMBOL Symbol ); BOOL IMAGEAPI SymGetSymPrevW( __in HANDLE hProcess, __inout PIMAGEHLP_SYMBOLW Symbol ); #endif</code>
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.DbgHelp.SymGetSymPrevW64(Vanara.PInvoke.HPROCESS,Vanara.PInvoke.DbgHelp.SafeIMAGEHLP_SYMBOL64)">
            <summary>
            <para>Retrieves the symbol information for the previous symbol.</para>
            <para><c>Note</c> This function is provided only for compatibility. Applications should use SymPrev.</para>
            </summary>
            <param name="hProcess">A handle to the process that was originally passed to the SymInitialize function.</param>
            <param name="Symbol">A pointer to an IMAGEHLP_SYMBOL64 structure.</param>
            <returns>
            <para>If the function succeeds, the return value is <c>TRUE</c>.</para>
            <para>If the function fails, the return value is <c>FALSE</c>. To retrieve extended error information, call GetLastError.</para>
            </returns>
            <remarks>
            <para>
            The <c>SymGetSymPrev64</c> function requires the IMAGEHLP_SYMBOL64 structure to have valid data, presumably obtained from a call
            to the SymGetSymFromAddr64 or SymGetSymFromName64 function. This structure is filled in with the symbol information for the
            previous symbol in sequence by virtual address.
            </para>
            <para>
            All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will
            likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more
            than one thread to this function.
            </para>
            <para>
            To call the Unicode version of this function, define DBGHELP_TRANSLATE_TCHAR. <c>SymGetSymPrevW64</c> is defined as follows in DbgHelp.h.
            </para>
            <para>
            <code>BOOL IMAGEAPI SymGetSymPrevW64( __in HANDLE hProcess, __inout PIMAGEHLP_SYMBOLW64 Symbol );</code>
            </para>
            <para>
            This function supersedes the <c>SymGetSymPrev</c> function. For more information, see Updated Platform Support.
            <c>SymGetSymPrev</c> is defined as follows in Dbghelp.h.
            </para>
            <para>
            <code>#if !defined(_IMAGEHLP_SOURCE_) &amp;&amp; defined(_IMAGEHLP64) #define SymGetSymPrev SymGetSymPrev64 #define SymGetSymPrevW SymGetSymPrevW64 #else BOOL IMAGEAPI SymGetSymPrev( __in HANDLE hProcess, __inout PIMAGEHLP_SYMBOL Symbol ); BOOL IMAGEAPI SymGetSymPrevW( __in HANDLE hProcess, __inout PIMAGEHLP_SYMBOLW Symbol ); #endif</code>
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.DbgHelp.SymGetTypeFromName(Vanara.PInvoke.HPROCESS,System.UInt64,System.String,Vanara.PInvoke.DbgHelp.SYMBOL_INFO@)">
            <summary>Retrieves a type index for the specified type name.</summary>
            <param name="hProcess">A handle to a process. This handle must have been previously passed to the SymInitialize function.</param>
            <param name="BaseOfDll">The base address of the module.</param>
            <param name="Name">The name of the type.</param>
            <param name="Symbol">A pointer to a SYMBOL_INFO structure. The <c>TypeIndex</c> member contains the type index.</param>
            <returns>
            <para>If the function succeeds, the return value is <c>TRUE</c>.</para>
            <para>If the function fails, the return value is <c>FALSE</c>. To retrieve extended error information, call GetLastError.</para>
            </returns>
            <remarks>
            <para>To retrieve information about the type, pass the type index to the SymGetTypeInfo function.</para>
            <para>
            All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will
            likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more
            than one thread to this function.
            </para>
            <para>To call the Unicode version of this function, define DBGHELP_TRANSLATE_TCHAR.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.DbgHelp.SymGetTypeInfo(Vanara.PInvoke.HPROCESS,System.UInt64,System.UInt32,Vanara.PInvoke.DbgHelp.IMAGEHLP_SYMBOL_TYPE_INFO,System.IntPtr)">
            <summary>Retrieves type information for the specified type index. For larger queries, use the SymGetTypeInfoEx function.</summary>
            <param name="hProcess">A handle to a process. This handle must have been previously passed to the SymInitialize function.</param>
            <param name="ModBase">The base address of the module.</param>
            <param name="TypeId">
            The type index. (A number of functions return a type index in the <c>TypeIndex</c> member of the SYMBOL_INFO structure.)
            </param>
            <param name="GetType">
            The information type. This parameter can be one of more of the values from the IMAGEHLP_SYMBOL_TYPE_INFO enumeration type.
            </param>
            <param name="pInfo">The data. The format of the data depends on the value of the GetType parameter.</param>
            <returns>
            <para>If the function succeeds, the return value is <c>TRUE</c>.</para>
            <para>If the function fails, the return value is <c>FALSE</c>. To retrieve extended error information, call GetLastError.</para>
            </returns>
            <remarks>
            <para>For more details on the type information, see the documentation for the PDB format.</para>
            <para>
            All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will
            likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more
            than one thread to this function.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.DbgHelp.SymGetTypeInfoEx(Vanara.PInvoke.HPROCESS,System.UInt64,Vanara.PInvoke.DbgHelp.IMAGEHLP_GET_TYPE_INFO_PARAMS@)">
            <summary>Retrieves multiple pieces of type information.</summary>
            <param name="hProcess">A handle to a process. This handle must have been previously passed to the SymInitialize function.</param>
            <param name="ModBase">The base address of the module.</param>
            <param name="Params">
            A pointer to an IMAGEHLP_GET_TYPE_INFO_PARAMS structure that specifies input and output information for the query.
            </param>
            <returns>
            <para>If the function succeeds, the return value is <c>TRUE</c>.</para>
            <para>If the function fails, the return value is <c>FALSE</c>. To retrieve extended error information, call GetLastError.</para>
            </returns>
            <remarks>
            All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will
            likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more
            than one thread to this function.
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.DbgHelp.SymInitialize(Vanara.PInvoke.HPROCESS,System.String,System.Boolean)">
            <summary>Initializes the symbol handler for a process.</summary>
            <param name="hProcess">
            <para>
            A handle that identifies the caller. This value should be unique and nonzero, but need not be a process handle. However, if you
            do use a process handle, be sure to use the correct handle. If the application is a debugger, use the process handle for the
            process being debugged. Do not use the handle returned by GetCurrentProcess when debugging another process, because calling
            functions like SymLoadModuleEx can have unexpected results.
            </para>
            <para>This parameter cannot be <c>NULL</c>.</para>
            </param>
            <param name="UserSearchPath">
            <para>
            The path, or series of paths separated by a semicolon (;), that is used to search for symbol files. If this parameter is
            <c>NULL</c>, the library attempts to form a symbol path from the following sources:
            </para>
            <list type="bullet">
            <item>
            <term>The current working directory of the application</term>
            </item>
            <item>
            <term>The _NT_SYMBOL_PATH environment variable</term>
            </item>
            <item>
            <term>The _NT_ALTERNATE_SYMBOL_PATH environment variable</term>
            </item>
            </list>
            <para>Note that the search path can also be set using the</para>
            <para>SymSetSearchPath</para>
            <para>function.</para>
            </param>
            <param name="fInvadeProcess">
            If this value is <c>TRUE</c>, enumerates the loaded modules for the process and effectively calls the SymLoadModule64 function
            for each module.
            </param>
            <returns>
            <para>If the function succeeds, the return value is <c>TRUE</c>.</para>
            <para>If the function fails, the return value is <c>FALSE</c>. To retrieve extended error information, call GetLastError.</para>
            </returns>
            <remarks>
            <para>
            The <c>SymInitialize</c> function is used to initialize the symbol handler for a process. In the context of the symbol handler,
            a process is a convenient object to use when collecting symbol information. Usually, symbol handlers are used by debuggers and
            other tools that need to load symbols for a process being debugged.
            </para>
            <para>
            The handle passed to <c>SymInitialize</c> must be the same value passed to all other symbol handler functions called by the
            process. It is the handle that the functions use to identify the caller and locate the correct symbol information. When you have
            finished using the symbol information, call the SymCleanup function to deallocate all resources associated with the process for
            which symbols are loaded.
            </para>
            <para>
            The search for symbols files is performed recursively for all paths specified in the UserSearchPath parameter. Therefore, if you
            specify the root directory in a search, the whole drive is searched, which can take significant time. Note that the directory
            that contains the executable file for the process is not automatically part of the search path. To include this directory in the
            search path, call the GetModuleFileNameEx function, then add the path returned to UserSearchPath.
            </para>
            <para>
            A process that calls <c>SymInitialize</c> should not call it again unless it calls SymCleanup first. If the call to
            <c>SymInitialize</c> set fInvadeProcess to <c>TRUE</c> and you simply need to reload the module list, use the
            SymRefreshModuleList function.
            </para>
            <para>
            All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will
            likely result in unexpected behavior or memory corruption. To avoid this, call <c>SymInitialize</c> only when your process
            starts and SymCleanup only when your process ends. It is not necessary for each thread in the process to call these functions.
            </para>
            <para>To call the Unicode version of this function, define DBGHELP_TRANSLATE_TCHAR.</para>
            <para>Examples</para>
            <para>For an example, see Initializing the Symbol Handler.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.DbgHelp.SymLoadModule(Vanara.PInvoke.HPROCESS,Vanara.PInvoke.HFILE,System.String,System.String,System.UInt32,System.UInt32)">
            <summary>
            <para>Loads the symbol table.</para>
            <para>This function has been superseded by the SymLoadModuleEx function.</para>
            </summary>
            <param name="hProcess">A handle to the process. This handle must have been previously passed to the SymInitialize function.</param>
            <param name="hFile">
            A handle to the file for the executable image. This argument is used mostly by debuggers, where the debugger passes the file
            handle obtained from a debugging event. A value of <c>NULL</c> indicates that hFile is not used.
            </param>
            <param name="ImageName">
            The name of the executable image. This name can contain a partial path, a full path, or no path at all. If the file cannot be
            located by the name provided, the symbol search path is used.
            </param>
            <param name="ModuleName">
            A shortcut name for the module. If the pointer value is <c>NULL</c>, the library creates a name using the base name of the
            symbol file.
            </param>
            <param name="BaseOfDll">
            <para>
            The load address of the module. If the value is zero, the library obtains the load address from the symbol file. The load
            address contained in the symbol file is not necessarily the actual load address. Debuggers and other applications having an
            actual load address should use the real load address when calling this function.
            </para>
            <para>If the image is a .pdb file, this parameter cannot be zero.</para>
            </param>
            <param name="SizeOfDll">
            <para>
            The size of the module, in bytes. If the value is zero, the library obtains the size from the symbol file. The size contained in
            the symbol file is not necessarily the actual size. Debuggers and other applications having an actual size should use the real
            size when calling this function.
            </para>
            <para>If the image is a .pdb file, this parameter cannot be zero.</para>
            </param>
            <returns>
            <para>If the function succeeds, the return value is the base address of the loaded module.</para>
            <para>If the function fails, the return value is zero. To retrieve extended error information, call GetLastError.</para>
            <para>If the module is already loaded, the return value is zero and GetLastError returns <c>ERROR_SUCCESS</c>.</para>
            </returns>
            <remarks>
            <para>
            The symbol handler creates an entry for the module and if the deferred symbol loading option is turned off, an attempt is made
            to load the symbols. If deferred symbol loading is enabled, the module is marked as deferred and the symbols are not loaded
            until a reference is made to a symbol in the module.
            </para>
            <para>To unload the symbol table, use the SymUnloadModule64 function.</para>
            <para>
            All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will
            likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more
            than one thread to this function.
            </para>
            <para>
            This function supersedes the <c>SymLoadModule</c> function. For more information, see Updated Platform Support.
            <c>SymLoadModule</c> is defined as follows in DbgHelp.h.
            </para>
            <para>
            <code>#if !defined(_IMAGEHLP_SOURCE_) &amp;&amp; defined(_IMAGEHLP64) #define SymLoadModule SymLoadModule64 #else DWORD IMAGEAPI SymLoadModule( __in HANDLE hProcess, __in_opt HANDLE hFile, __in_opt PCSTR ImageName, __in_opt PCSTR ModuleName, __in DWORD BaseOfDll, __in DWORD SizeOfDll ); #endif</code>
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.DbgHelp.SymLoadModule64(Vanara.PInvoke.HPROCESS,Vanara.PInvoke.HFILE,System.String,System.String,System.UInt64,System.UInt32)">
            <summary>
            <para>Loads the symbol table.</para>
            <para>This function has been superseded by the SymLoadModuleEx function.</para>
            </summary>
            <param name="hProcess">A handle to the process. This handle must have been previously passed to the SymInitialize function.</param>
            <param name="hFile">
            A handle to the file for the executable image. This argument is used mostly by debuggers, where the debugger passes the file
            handle obtained from a debugging event. A value of <c>NULL</c> indicates that hFile is not used.
            </param>
            <param name="ImageName">
            The name of the executable image. This name can contain a partial path, a full path, or no path at all. If the file cannot be
            located by the name provided, the symbol search path is used.
            </param>
            <param name="ModuleName">
            A shortcut name for the module. If the pointer value is <c>NULL</c>, the library creates a name using the base name of the
            symbol file.
            </param>
            <param name="BaseOfDll">
            <para>
            The load address of the module. If the value is zero, the library obtains the load address from the symbol file. The load
            address contained in the symbol file is not necessarily the actual load address. Debuggers and other applications having an
            actual load address should use the real load address when calling this function.
            </para>
            <para>If the image is a .pdb file, this parameter cannot be zero.</para>
            </param>
            <param name="SizeOfDll">
            <para>
            The size of the module, in bytes. If the value is zero, the library obtains the size from the symbol file. The size contained in
            the symbol file is not necessarily the actual size. Debuggers and other applications having an actual size should use the real
            size when calling this function.
            </para>
            <para>If the image is a .pdb file, this parameter cannot be zero.</para>
            </param>
            <returns>
            <para>If the function succeeds, the return value is the base address of the loaded module.</para>
            <para>If the function fails, the return value is zero. To retrieve extended error information, call GetLastError.</para>
            <para>If the module is already loaded, the return value is zero and GetLastError returns <c>ERROR_SUCCESS</c>.</para>
            </returns>
            <remarks>
            <para>
            The symbol handler creates an entry for the module and if the deferred symbol loading option is turned off, an attempt is made
            to load the symbols. If deferred symbol loading is enabled, the module is marked as deferred and the symbols are not loaded
            until a reference is made to a symbol in the module.
            </para>
            <para>To unload the symbol table, use the SymUnloadModule64 function.</para>
            <para>
            All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will
            likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more
            than one thread to this function.
            </para>
            <para>
            This function supersedes the <c>SymLoadModule</c> function. For more information, see Updated Platform Support.
            <c>SymLoadModule</c> is defined as follows in DbgHelp.h.
            </para>
            <para>
            <code>#if !defined(_IMAGEHLP_SOURCE_) &amp;&amp; defined(_IMAGEHLP64) #define SymLoadModule SymLoadModule64 #else DWORD IMAGEAPI SymLoadModule( __in HANDLE hProcess, __in_opt HANDLE hFile, __in_opt PCSTR ImageName, __in_opt PCSTR ModuleName, __in DWORD BaseOfDll, __in DWORD SizeOfDll ); #endif</code>
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.DbgHelp.SymLoadModuleEx(Vanara.PInvoke.HPROCESS,Vanara.PInvoke.HFILE,System.String,System.String,System.UInt64,System.UInt32,Vanara.PInvoke.DbgHelp.MODLOAD_DATA@,Vanara.PInvoke.DbgHelp.SLMFLAG)">
            <summary>Loads the symbol table for the specified module.</summary>
            <param name="hProcess">A handle to the process that was originally passed to the SymInitialize function.</param>
            <param name="hFile">
            A handle to the file for the executable image. This argument is used mostly by debuggers, where the debugger passes the file
            handle obtained from a debugging event. A value of <c>NULL</c> indicates that hFile is not used.
            </param>
            <param name="ImageName">
            The name of the executable image. This name can contain a partial path, a full path, or no path at all. If the file cannot be
            located by the name provided, the symbol search path is used.
            </param>
            <param name="ModuleName">
            A shortcut name for the module. If the pointer value is <c>NULL</c>, the library creates a name using the base name of the
            symbol file.
            </param>
            <param name="BaseOfDll">
            <para>
            The load address of the module. If the value is zero, the library obtains the load address from the symbol file. The load
            address contained in the symbol file is not necessarily the actual load address. Debuggers and other applications having an
            actual load address should use the real load address when calling this function.
            </para>
            <para>If the image is a .pdb file, this parameter cannot be zero.</para>
            </param>
            <param name="DllSize">
            <para>
            The size of the module, in bytes. If the value is zero, the library obtains the size from the symbol file. The size contained in
            the symbol file is not necessarily the actual size. Debuggers and other applications having an actual size should use the real
            size when calling this function.
            </para>
            <para>If the image is a .pdb file, this parameter cannot be zero.</para>
            </param>
            <param name="Data">
            A pointer to a MODLOAD_DATA structure that represents headers other than the standard PE header. This parameter is optional and
            can be <c>NULL</c>.
            </param>
            <param name="Flags">
            <para>
            This parameter can be zero or one or more of the following values. If this parameter is zero, the function loads the modules and
            the symbols for the module.
            </para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>SLMFLAG_NO_SYMBOLS 0x4</term>
            <term>Loads the module but not the symbols for the module.</term>
            </item>
            <item>
            <term>SLMFLAG_VIRTUAL 0x1</term>
            <term>
            Creates a virtual module named ModuleName at the address specified in BaseOfDll. To add symbols to this module, call the
            SymAddSymbol function.
            </term>
            </item>
            </list>
            </param>
            <returns>
            <para>If the function succeeds, the return value is the base address of the loaded module.</para>
            <para>If the function fails, the return value is zero. To retrieve extended error information, call GetLastError.</para>
            <para>If the module is already loaded, the return value is zero and GetLastError returns ERROR_SUCCESS.</para>
            </returns>
            <remarks>
            <para>
            The symbol handler creates an entry for the module and if the deferred symbol loading option is turned off, an attempt is made
            to load the symbols. If deferred symbol loading is enabled, the module is marked as deferred and the symbols are not loaded
            until a reference is made to a symbol in the module. Therefore, you should always call the SymGetModuleInfo64 function after
            calling <c>SymLoadModuleEx</c>.
            </para>
            <para>To unload the symbol table, use the SymUnloadModule64 function.</para>
            <para>
            All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will
            likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more
            than one thread to this function.
            </para>
            <para>To call the Unicode version of this function, define DBGHELP_TRANSLATE_TCHAR.</para>
            <para>Examples</para>
            <para>For an example, see Loading a Symbol Module.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.DbgHelp.SymLoadModuleEx(Vanara.PInvoke.HPROCESS,Vanara.PInvoke.HFILE,System.String,System.String,System.UInt64,System.UInt32,System.IntPtr,Vanara.PInvoke.DbgHelp.SLMFLAG)">
            <summary>Loads the symbol table for the specified module.</summary>
            <param name="hProcess">A handle to the process that was originally passed to the SymInitialize function.</param>
            <param name="hFile">
            A handle to the file for the executable image. This argument is used mostly by debuggers, where the debugger passes the file
            handle obtained from a debugging event. A value of <c>NULL</c> indicates that hFile is not used.
            </param>
            <param name="ImageName">
            The name of the executable image. This name can contain a partial path, a full path, or no path at all. If the file cannot be
            located by the name provided, the symbol search path is used.
            </param>
            <param name="ModuleName">
            A shortcut name for the module. If the pointer value is <c>NULL</c>, the library creates a name using the base name of the
            symbol file.
            </param>
            <param name="BaseOfDll">
            <para>
            The load address of the module. If the value is zero, the library obtains the load address from the symbol file. The load
            address contained in the symbol file is not necessarily the actual load address. Debuggers and other applications having an
            actual load address should use the real load address when calling this function.
            </para>
            <para>If the image is a .pdb file, this parameter cannot be zero.</para>
            </param>
            <param name="DllSize">
            <para>
            The size of the module, in bytes. If the value is zero, the library obtains the size from the symbol file. The size contained in
            the symbol file is not necessarily the actual size. Debuggers and other applications having an actual size should use the real
            size when calling this function.
            </para>
            <para>If the image is a .pdb file, this parameter cannot be zero.</para>
            </param>
            <param name="Data">
            A pointer to a MODLOAD_DATA structure that represents headers other than the standard PE header. This parameter is optional and
            can be <c>NULL</c>.
            </param>
            <param name="Flags">
            <para>
            This parameter can be zero or one or more of the following values. If this parameter is zero, the function loads the modules and
            the symbols for the module.
            </para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>SLMFLAG_NO_SYMBOLS 0x4</term>
            <term>Loads the module but not the symbols for the module.</term>
            </item>
            <item>
            <term>SLMFLAG_VIRTUAL 0x1</term>
            <term>
            Creates a virtual module named ModuleName at the address specified in BaseOfDll. To add symbols to this module, call the
            SymAddSymbol function.
            </term>
            </item>
            </list>
            </param>
            <returns>
            <para>If the function succeeds, the return value is the base address of the loaded module.</para>
            <para>If the function fails, the return value is zero. To retrieve extended error information, call GetLastError.</para>
            <para>If the module is already loaded, the return value is zero and GetLastError returns ERROR_SUCCESS.</para>
            </returns>
            <remarks>
            <para>
            The symbol handler creates an entry for the module and if the deferred symbol loading option is turned off, an attempt is made
            to load the symbols. If deferred symbol loading is enabled, the module is marked as deferred and the symbols are not loaded
            until a reference is made to a symbol in the module. Therefore, you should always call the SymGetModuleInfo64 function after
            calling <c>SymLoadModuleEx</c>.
            </para>
            <para>To unload the symbol table, use the SymUnloadModule64 function.</para>
            <para>
            All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will
            likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more
            than one thread to this function.
            </para>
            <para>To call the Unicode version of this function, define DBGHELP_TRANSLATE_TCHAR.</para>
            <para>Examples</para>
            <para>For an example, see Loading a Symbol Module.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.DbgHelp.SymMatchFileName(System.String,System.String,Vanara.InteropServices.StrPtrAuto@,Vanara.InteropServices.StrPtrAuto@)">
            <summary>Compares a string to a file name and path.</summary>
            <param name="FileName">The file name to be compared to the Match parameter.</param>
            <param name="Match">The string to be compared to the FileName parameter.</param>
            <param name="FileNameStop">
            A pointer to a string buffer that receives a pointer to the location in FileName where matching stopped. For a complete match,
            this value can be one character before FileName. This value can also be <c>NULL</c>.
            </param>
            <param name="MatchStop">
            A pointer to a string buffer that receives a pointer to the location in Match where matching stopped. For a complete match, this
            value may be one character before Match. This value may be <c>NULL</c>.
            </param>
            <returns>
            <para>If the function succeeds, the return value is <c>TRUE</c>.</para>
            <para>If the function fails, the return value is <c>FALSE</c>. To retrieve extended error information, call GetLastError.</para>
            </returns>
            <remarks>
            <para>
            Because the match string can be a suffix of the complete file name, this function can be used to match a plain file name to a
            fully qualified file name.
            </para>
            <para>
            Matching begins from the end of both strings and proceeds backward. Matching is case-insensitive and equates a backslash ('')
            with a forward slash ('/').
            </para>
            <para>
            All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will
            likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more
            than one thread to this function.
            </para>
            <para>To call the Unicode version of this function, define DBGHELP_TRANSLATE_TCHAR.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.DbgHelp.SymMatchString(System.String,System.String,System.Boolean)">
            <summary>Compares the specified string to the specified wildcard expression.</summary>
            <param name="string">The string, such as a symbol name, to be compared to the expression parameter.</param>
            <param name="expression">
            The wildcard expression to compare to the string parameter. The wildcard expression supports the inclusion of the * and ?
            characters. * matches any string and ? matches any single character.
            </param>
            <param name="fCase">A variable that indicates whether or not the comparison is to be case sensitive.</param>
            <returns>
            <para>If the function succeeds, the return value is <c>TRUE</c>.</para>
            <para>If the function fails, the return value is <c>FALSE</c>. To retrieve extended error information, call GetLastError.</para>
            </returns>
            <remarks>
            All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will
            likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more
            than one thread to this function.
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.DbgHelp.SymNext(Vanara.PInvoke.HPROCESS,Vanara.PInvoke.DbgHelp.SYMBOL_INFO@)">
            <summary>Retrieves symbol information for the next symbol.</summary>
            <param name="hProcess">A handle to a process. This handle must have been previously passed to the SymInitialize function.</param>
            <param name="si">
            A pointer to a SYMBOL_INFO structure that provides information about the current symbol. Upon return, the structure contains
            information about the next symbol.
            </param>
            <returns>
            <para>If the function succeeds, the return value is <c>TRUE</c>.</para>
            <para>If the function fails, the return value is <c>FALSE</c>. To retrieve extended error information, call GetLastError.</para>
            </returns>
            <remarks>
            <para>
            This function requires that the SYMBOL_INFO structure have valid data for the current symbol. The next symbol is the symbol with
            the virtual address that is next in the sequence.
            </para>
            <para>
            All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will
            likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more
            than one thread to this function.
            </para>
            <para>To call the Unicode version of this function, define DBGHELP_TRANSLATE_TCHAR.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.DbgHelp.SymPrev(Vanara.PInvoke.HPROCESS,Vanara.PInvoke.DbgHelp.SYMBOL_INFO@)">
            <summary>Retrieves symbol information for the previous symbol.</summary>
            <param name="hProcess">A handle to a process. This handle must have been previously passed to the SymInitialize function.</param>
            <param name="si">
            A pointer to a SYMBOL_INFO structure that provides information about the current symbol. Upon return, the structure contains
            information about the previous symbol.
            </param>
            <returns>
            <para>If the function succeeds, the return value is <c>TRUE</c>.</para>
            <para>If the function fails, the return value is <c>FALSE</c>. To retrieve extended error information, call GetLastError.</para>
            </returns>
            <remarks>
            <para>
            This function requires that the SYMBOL_INFO structure have valid data for the current symbol. The previous symbol is the symbol
            with a virtual address that immediately precedes this symbol.
            </para>
            <para>
            All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will
            likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more
            than one thread to this function.
            </para>
            <para>To call the Unicode version of this function, define DBGHELP_TRANSLATE_TCHAR.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.DbgHelp.SymQueryInlineTrace(Vanara.PInvoke.HPROCESS,System.UInt64,System.UInt32,System.UInt64,System.UInt64,System.UInt32@,System.UInt32@)">
            <summary>Queries an inline trace.</summary>
            <param name="hProcess">A handle to a process. This handle must have been previously passed to the SymInitialize function.</param>
            <param name="StartAddress">The start address.</param>
            <param name="StartContext">Contains the context of the start of block.</param>
            <param name="StartRetAddress">Contains the return address of the start of the current block/</param>
            <param name="CurAddress">Contains the current address.</param>
            <param name="CurContext">Address of a <c>DWORD</c> that receives the current context.</param>
            <param name="CurFrameIndex">
            <para>If the function succeeds, the return value is <c>TRUE</c>.</para>
            <para>If the function fails, the return value is <c>FALSE</c>. To retrieve extended error information, call GetLastError.</para>
            </param>
            <returns>None</returns>
            <remarks>
            Either the StartAddress or StartRetAddress parameters must be within the same function scope as the CurAddress parameter. The
            former indicates a step-over within the same function and the latter indicates a step-over from StartAddress.
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.DbgHelp.SymRefreshModuleList(Vanara.PInvoke.HPROCESS)">
            <summary>Refreshes the module list for the process.</summary>
            <param name="hProcess">A handle to a process. This handle must have been previously passed to the SymInitialize function.</param>
            <returns>
            <para>If the function succeeds, the return value is <c>TRUE</c>.</para>
            <para>If the function fails, the return value is <c>FALSE</c>. To retrieve extended error information, call GetLastError.</para>
            </returns>
            <remarks>
            <para>
            This function enumerates the loaded modules for the process and effectively calls the SymLoadModule64 function for each module.
            This same process is performed by SymInitialize if fInvadeProcess is <c>TRUE</c>.
            </para>
            <para>
            All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will
            likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more
            than one thread to this function.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.DbgHelp.SymRegisterCallback(Vanara.PInvoke.HPROCESS,Vanara.PInvoke.DbgHelp.PSYMBOL_REGISTERED_CALLBACK,System.IntPtr)">
            <summary>Registers a callback function for use by the symbol handler.</summary>
            <param name="hProcess">A handle to the process that was originally passed to the SymInitialize function.</param>
            <param name="CallbackFunction">A SymRegisterCallbackProc64 callback function.</param>
            <param name="UserContext">
            A user-defined value or <c>NULL</c>. This value is simply passed to the callback function. Normally, this parameter is used by
            an application to pass a pointer to a data structure that lets the callback function establish some context.
            </param>
            <returns>
            <para>If the function succeeds, the return value is <c>TRUE</c>.</para>
            <para>If the function fails, the return value is <c>FALSE</c>. To retrieve extended error information, call GetLastError.</para>
            </returns>
            <remarks>
            <para>
            The <c>SymRegisterCallback64</c> function lets an application register a callback function for use by the symbol handler. The
            symbol handler calls the registered callback function when there is status or progress information for the application.
            </para>
            <para>
            All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will
            likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more
            than one thread to this function.
            </para>
            <para>
            To call the Unicode version of this function, define DBGHELP_TRANSLATE_TCHAR. <c>SymRegisterCallbackW64</c> is defined as
            follows in Dbghelp.h.
            </para>
            <para>
            <code>BOOL IMAGEAPI SymRegisterCallbackW64( __in HANDLE hProcess, __in PSYMBOL_REGISTERED_CALLBACK64 CallbackFunction, __in ULONG64 UserContext ); #ifdef DBGHELP_TRANSLATE_TCHAR #define SymRegisterCallback64 SymRegisterCallbackW64 #endif</code>
            </para>
            <para>
            This function supersedes the <c>SymRegisterCallback</c> function. For more information, see Updated Platform Support.
            <c>SymRegisterCallback</c> is defined as follows in Dbghelp.h.
            </para>
            <para>
            <code>#if !defined(_IMAGEHLP_SOURCE_) &amp;&amp; defined(_IMAGEHLP64) #define SymRegisterCallback SymRegisterCallback64 #else BOOL IMAGEAPI SymRegisterCallback( __in HANDLE hProcess, __in PSYMBOL_REGISTERED_CALLBACK CallbackFunction, __in_opt PVOID UserContext ); #endif</code>
            </para>
            <para>For a more extensive example, read Getting Notifications.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.DbgHelp.SymRegisterCallback64(Vanara.PInvoke.HPROCESS,Vanara.PInvoke.DbgHelp.PSYMBOL_REGISTERED_CALLBACK64,System.UInt64)">
            <summary>Registers a callback function for use by the symbol handler.</summary>
            <param name="hProcess">A handle to the process that was originally passed to the SymInitialize function.</param>
            <param name="CallbackFunction">A SymRegisterCallbackProc64 callback function.</param>
            <param name="UserContext">
            A user-defined value or <c>NULL</c>. This value is simply passed to the callback function. Normally, this parameter is used by
            an application to pass a pointer to a data structure that lets the callback function establish some context.
            </param>
            <returns>
            <para>If the function succeeds, the return value is <c>TRUE</c>.</para>
            <para>If the function fails, the return value is <c>FALSE</c>. To retrieve extended error information, call GetLastError.</para>
            </returns>
            <remarks>
            <para>
            The <c>SymRegisterCallback64</c> function lets an application register a callback function for use by the symbol handler. The
            symbol handler calls the registered callback function when there is status or progress information for the application.
            </para>
            <para>
            All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will
            likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more
            than one thread to this function.
            </para>
            <para>
            To call the Unicode version of this function, define DBGHELP_TRANSLATE_TCHAR. <c>SymRegisterCallbackW64</c> is defined as
            follows in Dbghelp.h.
            </para>
            <para>
            <code>BOOL IMAGEAPI SymRegisterCallbackW64( __in HANDLE hProcess, __in PSYMBOL_REGISTERED_CALLBACK64 CallbackFunction, __in ULONG64 UserContext ); #ifdef DBGHELP_TRANSLATE_TCHAR #define SymRegisterCallback64 SymRegisterCallbackW64 #endif</code>
            </para>
            <para>
            This function supersedes the <c>SymRegisterCallback</c> function. For more information, see Updated Platform Support.
            <c>SymRegisterCallback</c> is defined as follows in Dbghelp.h.
            </para>
            <para>
            <code>#if !defined(_IMAGEHLP_SOURCE_) &amp;&amp; defined(_IMAGEHLP64) #define SymRegisterCallback SymRegisterCallback64 #else BOOL IMAGEAPI SymRegisterCallback( __in HANDLE hProcess, __in PSYMBOL_REGISTERED_CALLBACK CallbackFunction, __in_opt PVOID UserContext ); #endif</code>
            </para>
            <para>For a more extensive example, read Getting Notifications.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.DbgHelp.SymRegisterCallbackW64(Vanara.PInvoke.HPROCESS,Vanara.PInvoke.DbgHelp.PSYMBOL_REGISTERED_CALLBACK64,System.UInt64)">
            <summary>Registers a callback function for use by the symbol handler.</summary>
            <param name="hProcess">A handle to the process that was originally passed to the SymInitialize function.</param>
            <param name="CallbackFunction">A SymRegisterCallbackProc64 callback function.</param>
            <param name="UserContext">
            A user-defined value or <c>NULL</c>. This value is simply passed to the callback function. Normally, this parameter is used by
            an application to pass a pointer to a data structure that lets the callback function establish some context.
            </param>
            <returns>
            <para>If the function succeeds, the return value is <c>TRUE</c>.</para>
            <para>If the function fails, the return value is <c>FALSE</c>. To retrieve extended error information, call GetLastError.</para>
            </returns>
            <remarks>
            <para>
            The <c>SymRegisterCallback64</c> function lets an application register a callback function for use by the symbol handler. The
            symbol handler calls the registered callback function when there is status or progress information for the application.
            </para>
            <para>
            All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will
            likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more
            than one thread to this function.
            </para>
            <para>
            To call the Unicode version of this function, define DBGHELP_TRANSLATE_TCHAR. <c>SymRegisterCallbackW64</c> is defined as
            follows in Dbghelp.h.
            </para>
            <para>
            <code>BOOL IMAGEAPI SymRegisterCallbackW64( __in HANDLE hProcess, __in PSYMBOL_REGISTERED_CALLBACK64 CallbackFunction, __in ULONG64 UserContext ); #ifdef DBGHELP_TRANSLATE_TCHAR #define SymRegisterCallback64 SymRegisterCallbackW64 #endif</code>
            </para>
            <para>
            This function supersedes the <c>SymRegisterCallback</c> function. For more information, see Updated Platform Support.
            <c>SymRegisterCallback</c> is defined as follows in Dbghelp.h.
            </para>
            <para>
            <code>#if !defined(_IMAGEHLP_SOURCE_) &amp;&amp; defined(_IMAGEHLP64) #define SymRegisterCallback SymRegisterCallback64 #else BOOL IMAGEAPI SymRegisterCallback( __in HANDLE hProcess, __in PSYMBOL_REGISTERED_CALLBACK CallbackFunction, __in_opt PVOID UserContext ); #endif</code>
            </para>
            <para>For a more extensive example, read Getting Notifications.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.DbgHelp.SymRegisterFunctionEntryCallback(Vanara.PInvoke.HPROCESS,Vanara.PInvoke.DbgHelp.PSYMBOL_FUNCENTRY_CALLBACK,System.IntPtr)">
            <summary>Registers a callback function for use by the stack walking procedure on Alpha computers.</summary>
            <param name="hProcess">A handle to the process that was originally passed to the StackWalk64 function.</param>
            <param name="CallbackFunction">A SymRegisterFunctionEntryCallbackProc64 callback function.</param>
            <param name="UserContext">
            A user-defined value or <c>NULL</c>. This value is simply passed to the callback function. Normally, this parameter is used by
            an application to pass a pointer to a data structure that lets the callback function establish some context.
            </param>
            <returns>
            <para>If the function succeeds, the return value is <c>TRUE</c>.</para>
            <para>If the function fails, the return value is <c>FALSE</c>. To retrieve extended error information, call GetLastError.</para>
            </returns>
            <remarks>
            <para>
            The <c>SymRegisterFunctionEntryCallback64</c> function lets an application register a callback function for use by the stack
            walking procedure. The stack walking procedure calls the registered callback function when it is unable to locate a function
            table entry for an address. In most cases, the stack walking procedure locates the function table entries in the function table
            of the image containing the address. However, in situations where the function table entries are not in the image, this callback
            allows the debugger to provide the function table entry from another source. For example, run-time generated code on Alpha
            computers can define dynamic function tables to support exception handling and stack tracing.
            </para>
            <para>
            All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will
            likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more
            than one thread to this function.
            </para>
            <para>
            This function supersedes the <c>SymRegisterFunctionEntryCallback</c> function. For more information, see Updated Platform
            Support. <c>SymRegisterFunctionEntryCallback</c> is defined as follows in Dbghelp.h.
            </para>
            <para>
            <code>#if !defined(_IMAGEHLP_SOURCE_) &amp;&amp; defined(_IMAGEHLP64) #define SymRegisterFunctionEntryCallback SymRegisterFunctionEntryCallback64 #else BOOL IMAGEAPI SymRegisterFunctionEntryCallback( __in HANDLE hProcess, __in PSYMBOL_FUNCENTRY_CALLBACK CallbackFunction, __in_opt PVOID UserContext ); #endif</code>
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.DbgHelp.SymRegisterFunctionEntryCallback64(Vanara.PInvoke.HPROCESS,Vanara.PInvoke.DbgHelp.PSYMBOL_FUNCENTRY_CALLBACK64,System.UInt64)">
            <summary>Registers a callback function for use by the stack walking procedure on Alpha computers.</summary>
            <param name="hProcess">A handle to the process that was originally passed to the StackWalk64 function.</param>
            <param name="CallbackFunction">A SymRegisterFunctionEntryCallbackProc64 callback function.</param>
            <param name="UserContext">
            A user-defined value or <c>NULL</c>. This value is simply passed to the callback function. Normally, this parameter is used by
            an application to pass a pointer to a data structure that lets the callback function establish some context.
            </param>
            <returns>
            <para>If the function succeeds, the return value is <c>TRUE</c>.</para>
            <para>If the function fails, the return value is <c>FALSE</c>. To retrieve extended error information, call GetLastError.</para>
            </returns>
            <remarks>
            <para>
            The <c>SymRegisterFunctionEntryCallback64</c> function lets an application register a callback function for use by the stack
            walking procedure. The stack walking procedure calls the registered callback function when it is unable to locate a function
            table entry for an address. In most cases, the stack walking procedure locates the function table entries in the function table
            of the image containing the address. However, in situations where the function table entries are not in the image, this callback
            allows the debugger to provide the function table entry from another source. For example, run-time generated code on Alpha
            computers can define dynamic function tables to support exception handling and stack tracing.
            </para>
            <para>
            All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will
            likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more
            than one thread to this function.
            </para>
            <para>
            This function supersedes the <c>SymRegisterFunctionEntryCallback</c> function. For more information, see Updated Platform
            Support. <c>SymRegisterFunctionEntryCallback</c> is defined as follows in Dbghelp.h.
            </para>
            <para>
            <code>#if !defined(_IMAGEHLP_SOURCE_) &amp;&amp; defined(_IMAGEHLP64) #define SymRegisterFunctionEntryCallback SymRegisterFunctionEntryCallback64 #else BOOL IMAGEAPI SymRegisterFunctionEntryCallback( __in HANDLE hProcess, __in PSYMBOL_FUNCENTRY_CALLBACK CallbackFunction, __in_opt PVOID UserContext ); #endif</code>
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.DbgHelp.SymSearch(Vanara.PInvoke.HPROCESS,System.UInt64,System.UInt32,System.UInt32,System.String,System.UInt64,Vanara.PInvoke.DbgHelp.PSYM_ENUMERATESYMBOLS_CALLBACK,System.IntPtr,Vanara.PInvoke.DbgHelp.SYMSEARCH)">
            <summary>Searches for PDB symbols that meet the specified criteria.</summary>
            <param name="hProcess">A handle to a process. This handle must have been previously passed to the SymInitialize function.</param>
            <param name="BaseOfDll">
            The base address of the module. If this value is zero and Mask contains an exclamation point (!), the function looks across
            modules. If this value is zero and Mask does not contain an exclamation point, the function uses the scope established by the
            SymSetContext function.
            </param>
            <param name="Index">A unique value for the symbol.</param>
            <param name="SymTag">
            The PDB classification. These values are defined in Dbghelp.h in the <c>SymTagEnum</c> enumeration type. For descriptions, see
            the PDB documentation.
            </param>
            <param name="Mask">
            A wildcard expression that indicates the names of the symbols to be enumerated. To specify a module name, use the !mod syntax.
            </param>
            <param name="Address">The address of the symbol.</param>
            <param name="EnumSymbolsCallback">A SymEnumSymbolsProc callback function that receives the symbol information.</param>
            <param name="UserContext">
            A user-defined value that is passed to the callback function, or <c>NULL</c>. This parameter is typically used by an application
            to pass a pointer to a data structure that provides context for the callback function.
            </param>
            <param name="Options">
            <para>The options that control the behavior of this function.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>SYMSEARCH_ALLITEMS 0x08</term>
            <term>Include all symbols and other data in the .pdb files. DbgHelp 6.6 and earlier: This value is not supported.</term>
            </item>
            <item>
            <term>SYMSEARCH_GLOBALSONLY 0x04</term>
            <term>Search only for global symbols.</term>
            </item>
            <item>
            <term>SYMSEARCH_MASKOBJS 0x01</term>
            <term>For internal use only.</term>
            </item>
            <item>
            <term>SYMSEARCH_RECURSE 0x02</term>
            <term>Recurse from the top to find all symbols.</term>
            </item>
            </list>
            </param>
            <returns>
            <para>If the function succeeds, the return value is <c>TRUE</c>.</para>
            <para>If the function fails, the return value is <c>FALSE</c>. To retrieve extended error information, call GetLastError.</para>
            </returns>
            <remarks>
            <para>
            All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will
            likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more
            than one thread to this function.
            </para>
            <para>To call the Unicode version of this function, define DBGHELP_TRANSLATE_TCHAR.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.DbgHelp.SymSetContext(Vanara.PInvoke.HPROCESS,Vanara.PInvoke.DbgHelp.IMAGEHLP_STACK_FRAME@,System.IntPtr)">
            <summary>Sets context information used by the SymEnumSymbols function. This function only works with PDB symbols.</summary>
            <param name="hProcess">A handle to a process. This handle must have been previously passed to the SymInitialize function.</param>
            <param name="StackFrame">A pointer to an IMAGEHLP_STACK_FRAME structure that contains frame information.</param>
            <param name="Context">This parameter is ignored.</param>
            <returns>
            <para>If the function succeeds, the return value is <c>TRUE</c>.</para>
            <para>If the function fails, the return value is <c>FALSE</c>. To retrieve extended error information, call GetLastError.</para>
            </returns>
            <remarks>
            <para>
            If you call <c>SymSetContext</c> to set the context to its current value, the function fails but GetLastError returns <c>ERROR_SUCCESS</c>.
            </para>
            <para>
            All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will
            likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more
            than one thread to this function.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.DbgHelp.SymSetExtendedOption(Vanara.PInvoke.DbgHelp.IMAGEHLP_EXTENDED_OPTIONS,System.Boolean)">
            <summary>Turns the specified extended symbol option on or off.</summary>
            <param name="option">
            <para>The extended symbol option to turn on or off. The following are valid values.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>SYMOPT_EX_DISABLEACCESSTIMEUPDATE 0</term>
            <term>
            When set to TRUE, turns off explicitly updating the last access time of a symbol that is loaded. By default, DbgHelp updates the
            last access time of a symbol file that is consumed so that a symbol cache can be maintained by using a least recently used mechanism.
            </term>
            </item>
            </list>
            </param>
            <param name="value">The value to set for the specified option, either TRUE or FALSE.</param>
            <returns>The previous value of the specified extended option.</returns>
        </member>
        <member name="M:Vanara.PInvoke.DbgHelp.SymSetHomeDirectory(Vanara.PInvoke.HPROCESS,System.String)">
            <summary>Sets the home directory used by Dbghelp.</summary>
            <param name="hProcess">A handle to a process. This handle must have been previously passed to the SymInitialize function.</param>
            <param name="dir">
            The home directory. This directory must be writable, otherwise the home directory is the common application directory specified
            with CSIDL_COMMON_APPDATA. If this parameter is <c>NULL</c>, the function uses the default directory.
            </param>
            <returns>
            <para>If the function succeeds, the return value is a pointer to the dir parameter.</para>
            <para>If the function fails, the return value is <c>NULL</c>. To retrieve extended error information, call GetLastError.</para>
            </returns>
            <remarks>
            <para>
            The default home directory is the directory in which Dbghelp.dll resides. Dbghelp uses this directory as a basis for other
            directories, such as the default downstream store directory (the sym subdirectory of the home directory).
            </para>
            <para>
            The home directory used for the default symbol store and the source server cache location is stored in the DBGHELP_HOMEDIR
            environment variable.
            </para>
            <para>
            All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will
            likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more
            than one thread to this function.
            </para>
            <para>To call the Unicode version of this function, define DBGHELP_TRANSLATE_TCHAR.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.DbgHelp.SymSetOptions(Vanara.PInvoke.DbgHelp.SYMOPT)">
            <summary>Sets the options mask.</summary>
            <param name="SymOptions">
            <para>
            The symbol options. Zero is a valid value and indicates that all options are turned off. The options values are combined using
            the OR operator to form a valid options value. The following are valid values.
            </para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>SYMOPT_ALLOW_ABSOLUTE_SYMBOLS 0x00000800</term>
            <term>
            Enables the use of symbols that are stored with absolute addresses. Most symbols are stored as RVAs from the base of the module.
            DbgHelp translates them to absolute addresses. There are symbols that are stored as an absolute address. These have very
            specialized purposes and are typically not used. DbgHelp 5.1 and earlier: This value is not supported.
            </term>
            </item>
            <item>
            <term>SYMOPT_ALLOW_ZERO_ADDRESS 0x01000000</term>
            <term>Enables the use of symbols that do not have an address. By default, DbgHelp filters out symbols that do not have an address.</term>
            </item>
            <item>
            <term>SYMOPT_AUTO_PUBLICS 0x00010000</term>
            <term>
            Do not search the public symbols when searching for symbols by address, or when enumerating symbols, unless they were not found
            in the global symbols or within the current scope. This option has no effect with SYMOPT_PUBLICS_ONLY. DbgHelp 5.1 and earlier:
            This value is not supported.
            </term>
            </item>
            <item>
            <term>SYMOPT_CASE_INSENSITIVE 0x00000001</term>
            <term>All symbol searches are insensitive to case.</term>
            </item>
            <item>
            <term>SYMOPT_DEBUG 0x80000000</term>
            <term>Pass debug output through OutputDebugString or the SymRegisterCallbackProc64 callback function.</term>
            </item>
            <item>
            <term>SYMOPT_DEFERRED_LOADS 0x00000004</term>
            <term>
            Symbols are not loaded until a reference is made requiring the symbols be loaded. This is the fastest, most efficient way to use
            the symbol handler.
            </term>
            </item>
            <item>
            <term>SYMOPT_DISABLE_SYMSRV_AUTODETECT 0x02000000</term>
            <term>
            Disables the auto-detection of symbol server stores in the symbol path, even without the "SRV*" designation, maintaining
            compatibility with previous behavior. DbgHelp 6.6 and earlier: This value is not supported.
            </term>
            </item>
            <item>
            <term>SYMOPT_EXACT_SYMBOLS 0x00000400</term>
            <term>Do not load an unmatched .pdb file. Do not load export symbols if all else fails.</term>
            </item>
            <item>
            <term>SYMOPT_FAIL_CRITICAL_ERRORS 0x00000200</term>
            <term>
            Do not display system dialog boxes when there is a media failure such as no media in a drive. Instead, the failure happens silently.
            </term>
            </item>
            <item>
            <term>SYMOPT_FAVOR_COMPRESSED 0x00800000</term>
            <term>
            If there is both an uncompressed and a compressed file available, favor the compressed file. This option is good for slow connections.
            </term>
            </item>
            <item>
            <term>SYMOPT_FLAT_DIRECTORY 0x00400000</term>
            <term>Symbols are stored in the root directory of the default downstream store. DbgHelp 6.1 and earlier: This value is not supported.</term>
            </item>
            <item>
            <term>SYMOPT_IGNORE_CVREC 0x00000080</term>
            <term>Ignore path information in the CodeView record of the image header when loading a .pdb file.</term>
            </item>
            <item>
            <term>SYMOPT_IGNORE_IMAGEDIR 0x00200000</term>
            <term>Ignore the image directory. DbgHelp 6.1 and earlier: This value is not supported.</term>
            </item>
            <item>
            <term>SYMOPT_IGNORE_NT_SYMPATH 0x00001000</term>
            <term>
            Do not use the path specified by _NT_SYMBOL_PATH if the user calls SymSetSearchPath without a valid path. DbgHelp 5.1: This
            value is not supported.
            </term>
            </item>
            <item>
            <term>SYMOPT_INCLUDE_32BIT_MODULES 0x00002000</term>
            <term>When debugging on 64-bit Windows, include any 32-bit modules.</term>
            </item>
            <item>
            <term>SYMOPT_LOAD_ANYTHING 0x00000040</term>
            <term>Disable checks to ensure a file (.exe, .dbg., or .pdb) is the correct file. Instead, load the first file located.</term>
            </item>
            <item>
            <term>SYMOPT_LOAD_LINES 0x00000010</term>
            <term>Loads line number information.</term>
            </item>
            <item>
            <term>SYMOPT_NO_CPP 0x00000008</term>
            <term>
            All C++ decorated symbols containing the symbol separator "::" are replaced by "__". This option exists for debuggers that
            cannot handle parsing real C++ symbol names.
            </term>
            </item>
            <item>
            <term>SYMOPT_NO_IMAGE_SEARCH 0x00020000</term>
            <term>
            Do not search the image for the symbol path when loading the symbols for a module if the module header cannot be read. DbgHelp
            5.1: This value is not supported.
            </term>
            </item>
            <item>
            <term>SYMOPT_NO_PROMPTS 0x00080000</term>
            <term>Prevents prompting for validation from the symbol server.</term>
            </item>
            <item>
            <term>SYMOPT_NO_PUBLICS 0x00008000</term>
            <term>
            Do not search the publics table for symbols. This option should have little effect because there are copies of the public
            symbols in the globals table. DbgHelp 5.1: This value is not supported.
            </term>
            </item>
            <item>
            <term>SYMOPT_NO_UNQUALIFIED_LOADS 0x00000100</term>
            <term>
            Prevents symbols from being loaded when the caller examines symbols across multiple modules. Examine only the module whose
            symbols have already been loaded.
            </term>
            </item>
            <item>
            <term>SYMOPT_OVERWRITE 0x00100000</term>
            <term>Overwrite the downlevel store from the symbol store. DbgHelp 6.1 and earlier: This value is not supported.</term>
            </item>
            <item>
            <term>SYMOPT_PUBLICS_ONLY 0x00004000</term>
            <term>
            Do not use private symbols. The version of DbgHelp that shipped with earlier Windows release supported only public symbols; this
            option provides compatibility with this limitation. DbgHelp 5.1: This value is not supported.
            </term>
            </item>
            <item>
            <term>SYMOPT_SECURE 0x00040000</term>
            <term>
            DbgHelp will not load any symbol server other than SymSrv. SymSrv will not use the downstream store specified in
            _NT_SYMBOL_PATH. After this flag has been set, it cannot be cleared. DbgHelp 6.0 and 6.1: This flag can be cleared. DbgHelp 5.1:
            This value is not supported.
            </term>
            </item>
            <item>
            <term>SYMOPT_UNDNAME 0x00000002</term>
            <term>
            All symbols are presented in undecorated form. This option has no effect on global or local symbols because they are stored
            undecorated. This option applies only to public symbols.
            </term>
            </item>
            </list>
            </param>
            <returns>The function returns the current options mask.</returns>
            <remarks>
            <para>
            The options value can be changed any number of times while the library is in use by an application. The option change affects
            all future calls to the symbol handler.
            </para>
            <para>To get the current options mask, call the SymGetOptions function.</para>
            <para>
            All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will
            likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more
            than one thread to this function.
            </para>
            <para>Examples</para>
            <para>For an example, see Initializing the Symbol Handler.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.DbgHelp.SymSetParentWindow(Vanara.PInvoke.HWND)">
            <summary>Sets the window that the caller will use to display a user interface.</summary>
            <param name="hwnd">A handle to the window.</param>
            <returns>
            <para>If the function succeeds, the return value is <c>TRUE</c>.</para>
            <para>If the function fails, the return value is <c>FALSE</c>. To retrieve extended error information, call GetLastError.</para>
            </returns>
            <remarks>
            All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will
            likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more
            than one thread to this function.
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.DbgHelp.SymSetScopeFromAddr(Vanara.PInvoke.HPROCESS,System.UInt64)">
            <summary>Sets the local scope to the symbol that matches the specified address.</summary>
            <param name="hProcess">A handle to a process. This handle must have been previously passed to the SymInitialize function.</param>
            <param name="Address">The address.</param>
            <returns>
            <para>If the function succeeds, the return value is <c>TRUE</c>.</para>
            <para>If the function fails, the return value is <c>FALSE</c>. To retrieve extended error information, call GetLastError.</para>
            </returns>
            <remarks>
            All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will
            likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more
            than one thread to this function.
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.DbgHelp.SymSetScopeFromIndex(Vanara.PInvoke.HPROCESS,System.UInt64,System.UInt32)">
            <summary>Sets the local scope to the symbol that matches the specified index.</summary>
            <param name="hProcess">A handle to a process. This handle must have been previously passed to the SymInitialize function.</param>
            <param name="BaseOfDll">The base address of the module.</param>
            <param name="Index">The unique value for the symbol.</param>
            <returns>
            <para>If the function succeeds, the return value is <c>TRUE</c>.</para>
            <para>If the function fails, the return value is <c>FALSE</c>. To retrieve extended error information, call GetLastError.</para>
            </returns>
            <remarks>
            All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will
            likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more
            than one thread to this function.
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.DbgHelp.SymSetScopeFromInlineContext(Vanara.PInvoke.HPROCESS,System.UInt64,System.UInt32)">
            <summary>Sets the local scope to the symbol that matches the specified address and inline context.</summary>
            <param name="hProcess">A handle to a process. This handle must have been previously passed to the SymInitialize function.</param>
            <param name="Address">The address.</param>
            <param name="InlineContext">The inline context.</param>
            <returns>
            <para>If the function succeeds, the return value is <c>TRUE</c>.</para>
            <para>If the function fails, the return value is <c>FALSE</c>. To retrieve extended error information, call GetLastError.</para>
            </returns>
        </member>
        <member name="M:Vanara.PInvoke.DbgHelp.SymSetSearchPath(Vanara.PInvoke.HPROCESS,System.String)">
            <summary>Sets the search path for the specified process.</summary>
            <param name="hProcess">A handle to the process that was originally passed to the SymInitialize function.</param>
            <param name="SearchPath">The symbol search path. The string can contain multiple paths separated by semicolons.</param>
            <returns>
            <para>If the function succeeds, the return value is <c>TRUE</c>.</para>
            <para>If the function fails, the return value is <c>FALSE</c>. To retrieve extended error information, call GetLastError.</para>
            </returns>
            <remarks>
            <para>
            The symbol search path can be changed any number of times while the library is in use by an application. The change affects all
            future calls to the symbol handler.
            </para>
            <para>To get the current search path, call the SymGetSearchPath function.</para>
            <para>
            All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will
            likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more
            than one thread to this function.
            </para>
            <para>To call the Unicode version of this function, define DBGHELP_TRANSLATE_TCHAR.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.DbgHelp.SymSrvDeltaName(Vanara.PInvoke.HPROCESS,System.String,System.String,System.String,System.String)">
            <summary>
            Generates the name for a file that describes the relationship between two different versions of the same symbol or image file.
            Using this feature prevents applications from having to regenerate such information every time they analyze two files.
            </summary>
            <param name="hProcess">A handle to a process. This handle must have been previously passed to the SymInitialize function.</param>
            <param name="SymPath">
            The symbol path. The function uses only the symbol stores described in standard syntax for symbol stores. All other paths are
            ignored. If this parameter is <c>NULL</c>, the function uses the symbol path set using the SymInitialize or SymSetSearchPath function.
            </param>
            <param name="Type">The extension for the generated file name.</param>
            <param name="File1">The path of the first version of the symbol or image file.</param>
            <param name="File2">The path of the second version of the symbol or image file.</param>
            <returns>
            <para>If the function succeeds, the return value is the resulting file name.</para>
            <para>If the function fails, the return value is <c>NULL</c>. To retrieve extended error information, call GetLastError.</para>
            </returns>
            <remarks>
            <para>
            This function opens the two specified files, reads the indexing information from the header, and passes this information to the
            symbol server so it can create the file name. If you specify the Type parameter as "xml", the name is the index of File1,
            followed by a dash, followed by the index of File2, followed by an .xml extension. For example:
            </para>
            <para>3F3D5C755000-3F3D647621000.xml</para>
            <para>
            All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will
            likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more
            than one thread to this function.
            </para>
            <para>To call the Unicode version of this function, define DBGHELP_TRANSLATE_TCHAR.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.DbgHelp.SymSrvGetFileIndexes(System.String,System.Guid@,System.UInt32@,System.UInt32@,System.UInt32)">
            <summary>
            Retrieves the indexes for the specified .pdb, .dbg, or image file that would be used to store the file. The combination of these
            values uniquely identifies the file in the symbol server. They can be used when calling the SymFindFileInPath function to search
            for a file in a symbol store.
            </summary>
            <param name="File">The name of the file.</param>
            <param name="Id">The first of three identifying parameters.</param>
            <param name="Val1">The second of three identifying parameters.</param>
            <param name="Val2">The third of three identifying parameters.</param>
            <param name="Flags">This parameter is reserved for future use.</param>
            <returns>
            <para>If the function succeeds, the return value is nonzero.</para>
            <para>If the function fails, the return value is zero. To retrieve extended error information, call GetLastError.</para>
            </returns>
            <remarks>
            <para>
            All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will
            likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more
            than one thread to this function.
            </para>
            <para>To call the Unicode version of this function, define DBGHELP_TRANSLATE_TCHAR.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.DbgHelp.SymSrvGetFileIndexInfo(System.String,Vanara.PInvoke.DbgHelp.SYMSRV_INDEX_INFO@,System.UInt32)">
            <summary>Retrieves the index information for the specified .pdb, .dbg, or image file.</summary>
            <param name="File">The name of the file.</param>
            <param name="Info">A SYMSRV_INDEX_INFO structure that receives the index information.</param>
            <param name="Flags">This parameter is reserved for future use.</param>
            <returns>
            <para>If the function succeeds, the return value is <c>TRUE</c>.</para>
            <para>If the function fails, the return value is <c>FALSE</c>. To retrieve extended error information, call GetLastError.</para>
            </returns>
            <remarks>
            <para>
            This function is not for general use. Those writing utilities for the management of files in symbol server stores may use to
            this function to predict the relative path the symbol server will look for a file. It is used by srctool.exe to actually
            populate symbol server stores. It may also be of use to those looking to find the parameters to feed the SymFindFileInPath function.
            </para>
            <para>
            All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will
            likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more
            than one thread to this function.
            </para>
            <para>To call the Unicode version of this function, define DBGHELP_TRANSLATE_TCHAR.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.DbgHelp.SymSrvGetFileIndexString(Vanara.PInvoke.HPROCESS,System.String,System.String,System.Text.StringBuilder,Vanara.PInvoke.SizeT,System.UInt32)">
            <summary>Retrieves the index string for the specified .pdb, .dbg, or image file.</summary>
            <param name="hProcess">A handle to a process. This handle must have been previously passed to the SymInitialize function.</param>
            <param name="SrvPath">The path to the symbol server.</param>
            <param name="File">The name of the file.</param>
            <param name="Index">A pointer to a buffer that receives the index string.</param>
            <param name="Size">The size of the Index buffer, in characters.</param>
            <param name="Flags">This parameter is reserved for future use.</param>
            <returns>
            <para>If the function succeeds, the return value is <c>TRUE</c>.</para>
            <para>If the function fails, the return value is <c>FALSE</c>. To retrieve extended error information, call GetLastError.</para>
            </returns>
            <remarks>
            <para>
            This function is not for general use. Those writing utilities for the management of files in symbol server stores may use to
            this function to predict the relative path the symbol server will look for a file. It is used by srctool.exe to actually
            populate symbol server stores.
            </para>
            <para>
            All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will
            likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more
            than one thread to this function.
            </para>
            <para>To call the Unicode version of this function, define DBGHELP_TRANSLATE_TCHAR.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.DbgHelp.SymSrvGetSupplement(Vanara.PInvoke.HPROCESS,System.String,System.String,System.String)">
            <summary>Retrieves the specified file from the supplement for a symbol store.</summary>
            <param name="hProcess">A handle to a process. This handle must have been previously passed to the SymInitialize function.</param>
            <param name="SymPath">
            The symbol path. The function uses only the symbol stores described in standard syntax for symbol stores. All other paths are
            ignored. If this parameter is <c>NULL</c>, the function uses the symbol path set using the SymInitialize or SymSetSearchPath function.
            </param>
            <param name="Node">The symbol file associated with the supplemental file.</param>
            <param name="File">The name of the file.</param>
            <returns>
            <para>If the function succeeds, the return value is the fully qualified path for the supplemental file.</para>
            <para>If the function fails, the return value is <c>NULL</c>. To retrieve extended error information, call GetLastError.</para>
            </returns>
            <remarks>
            <para>For more information on supplemental files, see SymSrvStoreSupplement.</para>
            <para>
            This function returns a pointer to a buffer that may be reused by another function. Therefore, be sure to copy the data returned
            to another buffer immediately.
            </para>
            <para>
            All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will
            likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more
            than one thread to this function.
            </para>
            <para>To call the Unicode version of this function, define DBGHELP_TRANSLATE_TCHAR.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.DbgHelp.SymSrvIsStore(Vanara.PInvoke.HPROCESS,System.String)">
            <summary>Determines whether the specified path points to a symbol store.</summary>
            <param name="hProcess">
            The handle of a process that you previously passed to the SymInitialize function. If this parameter is set to <c>NULL</c>, the
            function determines only whether the store exists; otherwise, the function determines whether the store exists and contains a
            process entry for the specified process handle.
            </param>
            <param name="path">
            The path to a symbol store. The path can specify the default symbol store (for example, SRV*), point to an HTTP or HTTPS symbol
            server, or specify a UNC, absolute, or relative path to the store.
            </param>
            <returns>
            If the path specifies a symbol store, the function returns <c>TRUE</c>. Otherwise, it returns <c>FALSE</c>. To get extended
            error information, call the GetLastError function.
            </returns>
            <remarks>
            <para>
            If the path points to the default symbol store (for example, SRV*) or to an HTTP or HTTPS symbol server, the function assumes
            the store exists.
            </para>
            <para>
            If there is a proxy computer between the client computer and the server, the version of the SymSrv.dll on the proxy cannot be
            less than the version that is on the client.
            </para>
            <para>
            All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will
            likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more
            than one thread to this function.
            </para>
            <para>To call the Unicode version of this function, define DBGHELP_TRANSLATE_TCHAR.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.DbgHelp.SymSrvStoreFile(Vanara.PInvoke.HPROCESS,System.String,System.String,Vanara.PInvoke.DbgHelp.SYMSTOREOPT)">
            <summary>Stores a file in the specified symbol store.</summary>
            <param name="hProcess">A handle to a process. This handle must have been previously passed to the SymInitialize function.</param>
            <param name="SrvPath">The symbol store.</param>
            <param name="File">The name of the file.</param>
            <param name="Flags">
            <para>The flags that control the function. This parameter can be one of the following values.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>SYMSTOREOPT_COMPRESS 0x01</term>
            <term>Compress the file.</term>
            </item>
            <item>
            <term>SYMSTOREOPT_OVERWRITE 0x02</term>
            <term>Overwrite the file if it exists.</term>
            </item>
            <item>
            <term>SYMSTOREOPT_PASS_IF_EXISTS 0x40</term>
            <term>Do not report an error if the file already exists in the symbol store.</term>
            </item>
            <item>
            <term>SYMSTOREOPT_POINTER 0x08</term>
            <term>Store in File.ptr.</term>
            </item>
            <item>
            <term>SYMSTOREOPT_RETURNINDEX 0x04</term>
            <term>Return the index only.</term>
            </item>
            </list>
            </param>
            <returns>
            <para>
            If the function succeeds, the return value is a pointer to a null-terminated string that specifies the full-qualified path to
            the stored file.
            </para>
            <para>If the function fails, the return value is <c>NULL</c>. To retrieve extended error information, call GetLastError.</para>
            </returns>
            <remarks>
            <para>
            All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will
            likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more
            than one thread to this function.
            </para>
            <para>
            This function returns a pointer to a buffer that may be reused by another function. Therefore, be sure to copy the data returned
            to another buffer immediately.
            </para>
            <para>To call the Unicode version of this function, define DBGHELP_TRANSLATE_TCHAR.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.DbgHelp.SymSrvStoreSupplement(Vanara.PInvoke.HPROCESS,System.String,System.String,System.String,Vanara.PInvoke.DbgHelp.SYMSTOREOPT)">
            <summary>
            Stores a file in the specified supplement to a symbol store. The file is typically associated with a file in the symbol server.
            </summary>
            <param name="hProcess">A handle to a process. This handle must have been previously passed to the SymInitialize function.</param>
            <param name="SrvPath">TBD</param>
            <param name="Node">The symbol file associated with the supplemental file.</param>
            <param name="File">The name of the file.</param>
            <param name="Flags">
            If this parameter is <c>SYMSTOREOPT_COMPRESS</c>, the file is compressed in the symbol store. Currently, there are no other
            supported values.
            </param>
            <returns>
            <para>If the function succeeds, the return value is the fully qualified path for the supplemental file.</para>
            <para>If the function fails, the return value is <c>NULL</c>. To retrieve extended error information, call GetLastError.</para>
            </returns>
            <remarks>
            <para>An important use for this function is to store delta files. For more information, see SymSrvDeltaName.</para>
            <para>
            This function returns a pointer to a buffer that may be reused by another function. Therefore, be sure to copy the data returned
            to another buffer immediately.
            </para>
            <para>
            The symbol server stores supplemental files with the same extension in a common directory. For example, Sup1.xml would be stored
            in the following directory: SymPath\supplement&lt;i&gt;Node\xml.
            </para>
            <para>
            The administrator of a store can prevent users from writing supplemental files by creating a read-only file in the root of the
            store named Supplement. Alternatively, the administrator can create the supplement directory and use ACLs to control access.
            </para>
            <para>
            All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will
            likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more
            than one thread to this function.
            </para>
            <para>To call the Unicode version of this function, define DBGHELP_TRANSLATE_TCHAR.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.DbgHelp.SymUnDName(Vanara.PInvoke.DbgHelp.SafeIMAGEHLP_SYMBOL,System.Text.StringBuilder,System.UInt32)">
            <summary>
            <para>Undecorates a decorated C++ symbol name.</para>
            <para>Applications can also use the UnDecorateSymbolName function.</para>
            </summary>
            <param name="sym">A pointer to an IMAGEHLP_SYMBOL64 structure that specifies the symbol to be undecorated.</param>
            <param name="UnDecName">A pointer to a buffer that receives the undecorated name.</param>
            <param name="UnDecNameLength">The size of the UnDecName buffer, in characters.</param>
            <returns>
            <para>If the function succeeds, the return value is <c>TRUE</c>.</para>
            <para>If the function fails, the return value is <c>FALSE</c>. To retrieve extended error information, call GetLastError.</para>
            </returns>
            <remarks>
            <para>
            All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will
            likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more
            than one thread to this function.
            </para>
            <para>
            This function supersedes the <c>SymUnDName</c> function. For more information, see Updated Platform Support. <c>SymUnDName</c>
            is defined as follows in Dbghelp.h.
            </para>
            <para>
            <code>#if !defined(_IMAGEHLP_SOURCE_) &amp;&amp; defined(_IMAGEHLP64) #define SymUnDName SymUnDName64 #else BOOL IMAGEAPI SymUnDName( __in PIMAGEHLP_SYMBOL sym, __out_ecount(UnDecNameLength) PSTR UnDecName, __in DWORD UnDecNameLength ); #endif</code>
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.DbgHelp.SymUnDName64(Vanara.PInvoke.DbgHelp.SafeIMAGEHLP_SYMBOL64,System.Text.StringBuilder,System.UInt32)">
            <summary>
            <para>Undecorates a decorated C++ symbol name.</para>
            <para>Applications can also use the UnDecorateSymbolName function.</para>
            </summary>
            <param name="sym">A pointer to an IMAGEHLP_SYMBOL64 structure that specifies the symbol to be undecorated.</param>
            <param name="UnDecName">A pointer to a buffer that receives the undecorated name.</param>
            <param name="UnDecNameLength">The size of the UnDecName buffer, in characters.</param>
            <returns>
            <para>If the function succeeds, the return value is <c>TRUE</c>.</para>
            <para>If the function fails, the return value is <c>FALSE</c>. To retrieve extended error information, call GetLastError.</para>
            </returns>
            <remarks>
            <para>
            All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will
            likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more
            than one thread to this function.
            </para>
            <para>
            This function supersedes the <c>SymUnDName</c> function. For more information, see Updated Platform Support. <c>SymUnDName</c>
            is defined as follows in Dbghelp.h.
            </para>
            <para>
            <code>#if !defined(_IMAGEHLP_SOURCE_) &amp;&amp; defined(_IMAGEHLP64) #define SymUnDName SymUnDName64 #else BOOL IMAGEAPI SymUnDName( __in PIMAGEHLP_SYMBOL sym, __out_ecount(UnDecNameLength) PSTR UnDecName, __in DWORD UnDecNameLength ); #endif</code>
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.DbgHelp.SymUnloadModule(Vanara.PInvoke.HPROCESS,System.UInt32)">
            <summary>Unloads the symbol table.</summary>
            <param name="hProcess">A handle to the process that was originally passed to the SymInitialize function.</param>
            <param name="BaseOfDll">The base address of the module that is to be unloaded.</param>
            <returns>
            <para>If the function succeeds, the return value is <c>TRUE</c>.</para>
            <para>If the function fails, the return value is <c>FALSE</c>. To retrieve extended error information, call GetLastError.</para>
            </returns>
            <remarks>
            <para>
            All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will
            likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more
            than one thread to this function.
            </para>
            <para>
            This function supersedes the <c>SymUnloadedModule</c> function. For more information, see Updated Platform Support.
            <c>SymUnloadedModule</c> is defined as follows in Dbghelp.h.
            </para>
            <para>
            <code>#if !defined(_IMAGEHLP_SOURCE_) &amp;&amp; defined(_IMAGEHLP64) #define SymUnloadModule SymUnloadModule64 #else BOOL IMAGEAPI SymUnloadModule( __in HANDLE hProcess, __in DWORD BaseOfDll ); #endif</code>
            </para>
            <para>Examples</para>
            <para>For an example, see Unloading a Symbol Module.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.DbgHelp.SymUnloadModule64(Vanara.PInvoke.HPROCESS,System.UInt64)">
            <summary>Unloads the symbol table.</summary>
            <param name="hProcess">A handle to the process that was originally passed to the SymInitialize function.</param>
            <param name="BaseOfDll">The base address of the module that is to be unloaded.</param>
            <returns>
            <para>If the function succeeds, the return value is <c>TRUE</c>.</para>
            <para>If the function fails, the return value is <c>FALSE</c>. To retrieve extended error information, call GetLastError.</para>
            </returns>
            <remarks>
            <para>
            All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will
            likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more
            than one thread to this function.
            </para>
            <para>
            This function supersedes the <c>SymUnloadedModule</c> function. For more information, see Updated Platform Support.
            <c>SymUnloadedModule</c> is defined as follows in Dbghelp.h.
            </para>
            <para>
            <code>#if !defined(_IMAGEHLP_SOURCE_) &amp;&amp; defined(_IMAGEHLP64) #define SymUnloadModule SymUnloadModule64 #else BOOL IMAGEAPI SymUnloadModule( __in HANDLE hProcess, __in DWORD BaseOfDll ); #endif</code>
            </para>
            <para>Examples</para>
            <para>For an example, see Unloading a Symbol Module.</para>
            </remarks>
        </member>
        <member name="T:Vanara.PInvoke.DbgHelp.ProcessSymbolHandler">
            <summary>
            A managed life-cycle symbol handler for a process which calls <see cref="M:Vanara.PInvoke.DbgHelp.SymInitialize(Vanara.PInvoke.HPROCESS,System.String,System.Boolean)"/> at construction and <see
            cref="M:Vanara.PInvoke.DbgHelp.SymCleanup(Vanara.PInvoke.HPROCESS)"/> at disposal.
            </summary>
        </member>
        <member name="M:Vanara.PInvoke.DbgHelp.ProcessSymbolHandler.#ctor(Vanara.PInvoke.HPROCESS,System.String,System.Boolean)">
            <summary>Initializes the symbol handler for a process.</summary>
            <param name="hProcess">
            <para>
            A handle that identifies the caller. This value should be unique and nonzero, but need not be a process handle. However, if
            you do use a process handle, be sure to use the correct handle. If the application is a debugger, use the process handle for
            the process being debugged. Do not use the handle returned by GetCurrentProcess when debugging another process, because
            calling functions like SymLoadModuleEx can have unexpected results.
            </para>
            <para>This parameter cannot be <see cref="P:Vanara.PInvoke.HPROCESS.NULL"/>.</para>
            </param>
            <param name="UserSearchPath">
            <para>
            The path, or series of paths separated by a semicolon (;), that is used to search for symbol files. If this parameter is
            <see langword="null"/>, the library attempts to form a symbol path from the following sources:
            </para>
            <list type="bullet">
            <item>
            <term>The current working directory of the application</term>
            </item>
            <item>
            <term>The _NT_SYMBOL_PATH environment variable</term>
            </item>
            <item>
            <term>The _NT_ALTERNATE_SYMBOL_PATH environment variable</term>
            </item>
            </list>
            <para>Note that the search path can also be set using the <see cref="M:Vanara.PInvoke.DbgHelp.SymSetSearchPath(Vanara.PInvoke.HPROCESS,System.String)"/> function.</para>
            </param>
            <param name="fInvadeProcess">
            If this value is <see langword="true"/>, enumerates the loaded modules for the process and effectively calls the
            SymLoadModule64 function for each module.
            </param>
        </member>
        <member name="M:Vanara.PInvoke.DbgHelp.ProcessSymbolHandler.#ctor(Vanara.PInvoke.HPROCESS,Vanara.PInvoke.DbgHelp.SYMOPT,System.String,System.Boolean)">
            <summary>Initializes the symbol handler for a process.</summary>
            <param name="hProcess">
            <para>
            A handle that identifies the caller. This value should be unique and nonzero, but need not be a process handle. However, if you
            do use a process handle, be sure to use the correct handle. If the application is a debugger, use the process handle for the
            process being debugged. Do not use the handle returned by GetCurrentProcess when debugging another process, because calling
            functions like SymLoadModuleEx can have unexpected results.
            </para>
            <para>This parameter cannot be <see cref="P:Vanara.PInvoke.HPROCESS.NULL"/>.</para>
            </param>
            <param name="opts">
            The symbol options. Zero is a valid value and indicates that all options are turned off. The options values are combined using
            the OR operator to form a valid options value.
            </param>
            <param name="UserSearchPath">
            <para>
            The path, or series of paths separated by a semicolon (;), that is used to search for symbol files. If this parameter is <see
            langword="null"/>, the library attempts to form a symbol path from the following sources:
            </para>
            <list type="bullet">
            <item>
            <term>The current working directory of the application</term>
            </item>
            <item>
            <term>The _NT_SYMBOL_PATH environment variable</term>
            </item>
            <item>
            <term>The _NT_ALTERNATE_SYMBOL_PATH environment variable</term>
            </item>
            </list>
            <para>Note that the search path can also be set using the <see cref="M:Vanara.PInvoke.DbgHelp.SymSetSearchPath(Vanara.PInvoke.HPROCESS,System.String)"/> function.</para>
            </param>
            <param name="fInvadeProcess">
            If this value is <see langword="true"/>, enumerates the loaded modules for the process and effectively calls the SymLoadModule64
            function for each module.
            </param>
        </member>
        <member name="M:Vanara.PInvoke.DbgHelp.ProcessSymbolHandler.#ctor(System.String)">
            <summary>Initializes a new instance of the <see cref="T:Vanara.PInvoke.DbgHelp.ProcessSymbolHandler"/> class.</summary>
            <param name="imagePath">
            The name of the executable image. This name can contain a partial path, a full path, or no path at all. If the file cannot be
            located by the name provided, the symbol search path is used.
            </param>
        </member>
        <member name="M:Vanara.PInvoke.DbgHelp.ProcessSymbolHandler.op_Implicit(Vanara.PInvoke.DbgHelp.ProcessSymbolHandler)~Vanara.PInvoke.HPROCESS">
            <summary>Performs an implicit conversion from <see cref="T:Vanara.PInvoke.DbgHelp.ProcessSymbolHandler"/> to <see cref="T:Vanara.PInvoke.HPROCESS"/>.</summary>
            <param name="h">The <see cref="T:Vanara.PInvoke.DbgHelp.ProcessSymbolHandler"/> instance.</param>
            <returns>The resulting <see cref="T:Vanara.PInvoke.HPROCESS"/> instance from the conversion.</returns>
        </member>
        <member name="M:Vanara.PInvoke.DbgHelp.ProcessSymbolHandler.Dispose">
            <summary>Deallocates all resources associated with this process handle.</summary>
        </member>
        <member name="M:Vanara.PInvoke.DbgHelp.ProcessSymbolHandler.RefreshModuleList">
            <summary>Refreshes the module list for the process.</summary>
        </member>
        <member name="T:Vanara.PInvoke.DbgHelp.MINIDUMP_CALLBACK_ROUTINE">
            <summary>
            <para>An application-defined callback function used with MiniDumpWriteDump. It receives extended minidump information.</para>
            <para>
            The <c>MINIDUMP_CALLBACK_ROUTINE</c> type defines a pointer to this callback function. <c>MiniDumpCallback</c> is a placeholder
            for the application-defined function name.
            </para>
            </summary>
            <param name="CallbackParam">An application-defined parameter value.</param>
            <param name="CallbackInput">A pointer to a MINIDUMP_CALLBACK_INPUT structure that specifies extended minidump information.</param>
            <param name="CallbackOutput">
            A pointer to a MINIDUMP_CALLBACK_OUTPUT structure that receives application-defined information from the callback function.
            </param>
            <returns>If the function succeeds, return <c>TRUE</c>; otherwise, return <c>FALSE</c>.</returns>
        </member>
        <member name="T:Vanara.PInvoke.DbgHelp.MINIDUMP_CALLBACK_TYPE">
            <summary>
            Identifies the type of information returned by the MiniDumpCallback function. Not all memory failures will cause a callback; for
            example if the failure is within a stack then the failure is considered to be unrecoverable and the minidump will fail.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.MINIDUMP_CALLBACK_TYPE.ModuleCallback">
            <summary>The callback function returns module information.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.MINIDUMP_CALLBACK_TYPE.ThreadCallback">
            <summary>The callback function returns thread information.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.MINIDUMP_CALLBACK_TYPE.ThreadExCallback">
            <summary>The callback function returns extended thread information.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.MINIDUMP_CALLBACK_TYPE.IncludeThreadCallback">
            <summary>
            The callback function indicates which threads are to be included. It is called as the minidump library is enumerating the
            threads in a process, rather than after the information gathered, as it is with ThreadCallback or ThreadExCallback. It is
            called for each thread. If the callback function returns FALSE, the current thread is excluded. This allows the caller to
            obtain information for a subset of the threads in a process, without suspending threads that are not of interest.
            Alternately, you can modify the ThreadWriteFlags member of the MINIDUMP_CALLBACK_OUTPUT structure and return TRUE to avoid
            gathering unnecessary information for the thread.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.MINIDUMP_CALLBACK_TYPE.IncludeModuleCallback">
            <summary>
            The callback function indicates which modules are to be included. The callback function is called as the minidump library is
            enumerating the modules in a process, rather than after the information is gathered, as it is with ModuleCallback. It is
            called for each module. If the callback function returns FALSE, the current module is excluded. Alternatively, you can
            modify the ModuleWriteFlags member of the MINIDUMP_CALLBACK_OUTPUT structure and return TRUE to avoid gathering unnecessary
            information for the module.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.MINIDUMP_CALLBACK_TYPE.MemoryCallback">
            <summary>
            The callback function returns a region of memory to be included in the dump. The callback is called only for dumps generated
            without the MiniDumpWithFullMemory flag. If the callback function returns FALSE or a region of size 0, the callback will not
            be called again. DbgHelp 6.1 and earlier: This value is not supported.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.MINIDUMP_CALLBACK_TYPE.CancelCallback">
            <summary>The callback function returns cancellation information. DbgHelp 6.1 and earlier: This value is not supported.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.MINIDUMP_CALLBACK_TYPE.WriteKernelMinidumpCallback">
            <summary>
            The user-mode minidump has been successfully completed. To initiate a kernel-mode minidump, the callback should return TRUE
            and set the Handle member of the MINIDUMP_CALLBACK_OUTPUT structure. DbgHelp 6.1 and earlier: This value is not supported.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.MINIDUMP_CALLBACK_TYPE.KernelMinidumpStatusCallback">
            <summary>
            The callback function returns status information for the kernel minidump. DbgHelp 6.1 and earlier: This value is not supported.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.MINIDUMP_CALLBACK_TYPE.RemoveMemoryCallback">
            <summary>
            The callback function returns a region of memory to be excluded from the dump. The callback is called only for dumps
            generated without the MiniDumpWithFullMemory flag. If the callback function returns FALSE or a region of size 0, the
            callback will not be called again. DbgHelp 6.3 and earlier: This value is not supported.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.MINIDUMP_CALLBACK_TYPE.IncludeVmRegionCallback">
            <summary>
            The callback function returns information about the virtual memory region. It is called twice for each region during the
            full-memory writing pass. The VmRegion member of the MINIDUMP_CALLBACK_OUTPUT structure contains the current memory region.
            You can modify the base address and size of the region, as long as the new region remains a subset of the original region;
            changes to other members are ignored. If the callback returns TRUE and sets the Continue member of MINIDUMP_CALLBACK_OUTPUT
            to TRUE, the minidump library will use the region specified by VmRegion as the region to be written. If the callback returns
            FALSE or if Continue is FALSE, the callback will not be called for additional memory regions. DbgHelp 6.4 and earlier: This
            value is not supported.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.MINIDUMP_CALLBACK_TYPE.IoStartCallback">
            <summary>
            The callback function indicates that the caller will be providing an alternate I/O routine. If the callback returns TRUE and
            sets the Status member of MINIDUMP_CALLBACK_OUTPUT to S_FALSE, the minidump library will send all I/O through callbacks. The
            caller will receive an IoWriteAllCallback callback for each piece of data. DbgHelp 6.4 and earlier: This value is not supported.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.MINIDUMP_CALLBACK_TYPE.IoWriteAllCallback">
            <summary>
            The callback must write all requested bytes or fail. The Io member of the MINIDUMP_CALLBACK_INPUT structure contains the
            request. If the write operation fails, the callback should return FALSE. If the write operation succeeds, the callback
            should return TRUE and set the Status member of MINIDUMP_CALLBACK_OUTPUT to S_OK. The caller will receive an
            IoFinishCallback callback when the I/O has completed. DbgHelp 6.4 and earlier: This value is not supported.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.MINIDUMP_CALLBACK_TYPE.IoFinishCallback">
            <summary>
            The callback returns I/O completion information. If the callback returns FALSE or does not set the Status member of
            MINIDUMP_CALLBACK_OUTPUT to S_OK, the minidump library assumes the minidump write operation has failed. DbgHelp 6.4 and
            earlier: This value is not supported.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.MINIDUMP_CALLBACK_TYPE.ReadMemoryFailureCallback">
            <summary>
            There has been a failure to read memory. If the callback returns TRUE and sets the Status member of MINIDUMP_CALLBACK_OUTPUT
            to S_OK, the memory failure is ignored and the block is omitted from the minidump. Otherwise, this failure results in a
            failure to write to the minidump. DbgHelp 6.4 and earlier: This value is not supported.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.MINIDUMP_CALLBACK_TYPE.SecondaryFlagsCallback">
            <summary>The callback returns secondary information. DbgHelp 6.5 and earlier: This value is not supported.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.MINIDUMP_CALLBACK_TYPE.IsProcessSnapshotCallback">
            <summary>
            The callback function indicates whether the target is a process or a snapshot.DbgHelp 6.2 and earlier: This value is not supported.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.MINIDUMP_CALLBACK_TYPE.VmStartCallback">
            <summary>
            The callback function indicates whether the callee supports and accepts virtual memory callbacks, such as VmQueryCallback,
            VmPreReadCallback, and VmPostReadCallback. A return value of S_FALSE means that virtual memory callbacks are supported. A
            value of S_OK means that virtual memory callbacks are not supported.DbgHelp 6.2 and earlier: This value is not supported.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.MINIDUMP_CALLBACK_TYPE.VmQueryCallback">
            <summary>
            The callback function is invoked for snapshot targets to collect virtual address memory information from the target.The
            callback is only called if VmStartCallback returned a value of S_FALSE.DbgHelp 6.2 and earlier: This value is not supported.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.MINIDUMP_CALLBACK_TYPE.VmPreReadCallback">
            <summary>
            The callback function is sent for every ReadVirtual operation. These reads are not limited to the memory blocks that are
            added to the dump. The engine also accesses the Process Environment Block (PEB), the Thread Environment Block (TEB), the
            loader data, the unloaded module traces, and other blocks. Even if those blocks do not end up in the dump, they are read
            from the target, and virtual memory callbacks are initiated for each. The callback is only called if VmStartCallback
            returned S_FALSE.DbgHelp 6.2 and earlier: This value is not supported.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.MINIDUMP_CALLBACK_TYPE.VmPostReadCallback">
            <summary>
            The callback function allows the callee to alter the buffer contents with data from other sources, such as a cache, or
            perform obfuscation. The buffer at this point is fully or partially filled by VmPreReadCallback and by ReadProcessMemory.
            The callback is only called if VmStartCallback returned S_FALSE.DbgHelp 6.2 and earlier: This value is not supported.
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.DbgHelp.MINIDUMP_HANDLE_OBJECT_INFORMATION_TYPE">
            <summary>Identifies the type of object-specific information.</summary>
            <remarks>
            The information represented by each of these values can vary by operating system and procesor architecture. Per-handle
            object-specific information is automatically gathered when minidump type is MiniDumpWithHandleData. For more information, see MINIDUMP_TYPE.
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.MINIDUMP_HANDLE_OBJECT_INFORMATION_TYPE.MiniHandleObjectInformationNone">
            <summary>There is no object-specific information for this handle type.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.MINIDUMP_HANDLE_OBJECT_INFORMATION_TYPE.MiniThreadInformation1">
            <summary>The information is specific to thread objects.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.MINIDUMP_HANDLE_OBJECT_INFORMATION_TYPE.MiniMutantInformation1">
            <summary>The information is specific to mutant objects.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.MINIDUMP_HANDLE_OBJECT_INFORMATION_TYPE.MiniMutantInformation2">
            <summary>The information is specific to mutant objects.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.MINIDUMP_HANDLE_OBJECT_INFORMATION_TYPE.MiniProcessInformation1">
            <summary>The information is specific to process objects.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.MINIDUMP_HANDLE_OBJECT_INFORMATION_TYPE.MiniProcessInformation2">
            <summary>The information is specific to process objects.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.MINIDUMP_HANDLE_OBJECT_INFORMATION_TYPE.MiniEventInformation1">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.MINIDUMP_HANDLE_OBJECT_INFORMATION_TYPE.MiniSectionInformation1">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.MINIDUMP_HANDLE_OBJECT_INFORMATION_TYPE.MiniSemaphoreInformation1">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.MINIDUMP_HANDLE_OBJECT_INFORMATION_TYPE.MiniHandleObjectInformationTypeMax">
            <summary/>
        </member>
        <member name="T:Vanara.PInvoke.DbgHelp.MINIDUMP_SECONDARY_FLAGS">
            <summary>Specifies the secondary flags for the minidump.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.MINIDUMP_SECONDARY_FLAGS.MiniSecondaryWithoutPowerInfo">
            <summary>
            The minidump information does not retrieve the processor power information contained in the MINIDUMP_MISC_INFO_2 structure.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.MINIDUMP_SECONDARY_FLAGS.MiniSecondaryValidFlags">
            <summary/>
        </member>
        <member name="T:Vanara.PInvoke.DbgHelp.MINIDUMP_STREAM_TYPE">
            <summary>Represents the type of a minidump data stream.</summary>
            <remarks>
            <para>In this context, a data stream is a set of data in a minidump file.</para>
            <para>
            The <c>StreamType</c> member of the MINIDUMP_DIRECTORY structure can be one of these types. Additional types may be added in the
            future, so if a program reading the minidump header encounters a stream type it does not recognize, it should ignore the stream altogether.
            </para>
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.MINIDUMP_STREAM_TYPE.UnusedStream">
            <summary>Reserved. Do not use this enumeration value.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.MINIDUMP_STREAM_TYPE.ReservedStream0">
            <summary>Reserved. Do not use this enumeration value.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.MINIDUMP_STREAM_TYPE.ReservedStream1">
            <summary>Reserved. Do not use this enumeration value.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.MINIDUMP_STREAM_TYPE.ThreadListStream">
            <summary>The stream contains thread information. For more information, see MINIDUMP_THREAD_LIST.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.MINIDUMP_STREAM_TYPE.ModuleListStream">
            <summary>The stream contains module information. For more information, see MINIDUMP_MODULE_LIST.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.MINIDUMP_STREAM_TYPE.MemoryListStream">
            <summary>The stream contains memory allocation information. For more information, see MINIDUMP_MEMORY_LIST.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.MINIDUMP_STREAM_TYPE.ExceptionStream">
            <summary>The stream contains exception information. For more information, see MINIDUMP_EXCEPTION_STREAM.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.MINIDUMP_STREAM_TYPE.SystemInfoStream">
            <summary>The stream contains general system information. For more information, see MINIDUMP_SYSTEM_INFO.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.MINIDUMP_STREAM_TYPE.ThreadExListStream">
            <summary>The stream contains extended thread information. For more information, see MINIDUMP_THREAD_EX_LIST.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.MINIDUMP_STREAM_TYPE.Memory64ListStream">
            <summary>The stream contains memory allocation information. For more information, see MINIDUMP_MEMORY64_LIST.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.MINIDUMP_STREAM_TYPE.CommentStreamA">
            <summary>The stream contains an ANSI string used for documentation purposes.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.MINIDUMP_STREAM_TYPE.CommentStreamW">
            <summary>The stream contains a Unicode string used for documentation purposes.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.MINIDUMP_STREAM_TYPE.HandleDataStream">
            <summary>
            The stream contains high-level information about the active operating system handles. For more information, see MINIDUMP_HANDLE_DATA_STREAM.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.MINIDUMP_STREAM_TYPE.FunctionTableStream">
            <summary>The stream contains function table information. For more information, see MINIDUMP_FUNCTION_TABLE_STREAM.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.MINIDUMP_STREAM_TYPE.UnloadedModuleListStream">
            <summary>
            The stream contains module information for the unloaded modules. For more information, see
            MINIDUMP_UNLOADED_MODULE_LIST.DbgHelp 5.1: This value is not supported.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.MINIDUMP_STREAM_TYPE.MiscInfoStream">
            <summary>
            The stream contains miscellaneous information. For more information, see MINIDUMP_MISC_INFO or MINIDUMP_MISC_INFO_2.DbgHelp
            5.1: This value is not supported.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.MINIDUMP_STREAM_TYPE.MemoryInfoListStream">
            <summary>
            The stream contains memory region description information. It corresponds to the information that would be returned for the
            process from the VirtualQuery function. For more information, see MINIDUMP_MEMORY_INFO_LIST.DbgHelp 6.1 and earlier: This
            value is not supported.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.MINIDUMP_STREAM_TYPE.ThreadInfoListStream">
            <summary>
            The stream contains thread state information. For more information, see MINIDUMP_THREAD_INFO_LIST.DbgHelp 6.1 and earlier:
            This value is not supported.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.MINIDUMP_STREAM_TYPE.HandleOperationListStream">
            <summary>
            This stream contains operation list information. For more information, see MINIDUMP_HANDLE_OPERATION_LIST.DbgHelp 6.4 and
            earlier: This value is not supported.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.MINIDUMP_STREAM_TYPE.TokenStream">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.MINIDUMP_STREAM_TYPE.JavaScriptDataStream">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.MINIDUMP_STREAM_TYPE.SystemMemoryInfoStream">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.MINIDUMP_STREAM_TYPE.ProcessVmCountersStream">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.MINIDUMP_STREAM_TYPE.IptTraceStream">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.MINIDUMP_STREAM_TYPE.ThreadNamesStream">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.MINIDUMP_STREAM_TYPE.ceStreamNull">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.MINIDUMP_STREAM_TYPE.ceStreamSystemInfo">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.MINIDUMP_STREAM_TYPE.ceStreamException">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.MINIDUMP_STREAM_TYPE.ceStreamModuleList">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.MINIDUMP_STREAM_TYPE.ceStreamProcessList">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.MINIDUMP_STREAM_TYPE.ceStreamThreadList">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.MINIDUMP_STREAM_TYPE.ceStreamThreadContextList">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.MINIDUMP_STREAM_TYPE.ceStreamThreadCallStackList">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.MINIDUMP_STREAM_TYPE.ceStreamMemoryVirtualList">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.MINIDUMP_STREAM_TYPE.ceStreamMemoryPhysicalList">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.MINIDUMP_STREAM_TYPE.ceStreamBucketParameters">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.MINIDUMP_STREAM_TYPE.ceStreamProcessModuleMap">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.MINIDUMP_STREAM_TYPE.ceStreamDiagnosisList">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.MINIDUMP_STREAM_TYPE.LastReservedStream">
            <summary>
            Any value greater than this value will not be used by the system and can be used to represent application-defined data
            streams. For more information, see MINIDUMP_USER_STREAM.
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.DbgHelp.MINIDUMP_THREAD_INFO_FLAG">
            <summary>The flags that indicate the thread state.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.MINIDUMP_THREAD_INFO_FLAG.MINIDUMP_THREAD_INFO_ERROR_THREAD">
            <summary>A placeholder thread due to an error accessing the thread. No thread information exists beyond the thread identifier.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.MINIDUMP_THREAD_INFO_FLAG.MINIDUMP_THREAD_INFO_EXITED_THREAD">
            <summary>The thread has exited (not running any code) at the time of the dump.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.MINIDUMP_THREAD_INFO_FLAG.MINIDUMP_THREAD_INFO_INVALID_CONTEXT">
            <summary>Thread context could not be retrieved.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.MINIDUMP_THREAD_INFO_FLAG.MINIDUMP_THREAD_INFO_INVALID_INFO">
            <summary>Thread information could not be retrieved.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.MINIDUMP_THREAD_INFO_FLAG.MINIDUMP_THREAD_INFO_INVALID_TEB">
            <summary>TEB information could not be retrieved.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.MINIDUMP_THREAD_INFO_FLAG.MINIDUMP_THREAD_INFO_WRITING_THREAD">
            <summary>This is the thread that called MiniDumpWriteDump.</summary>
        </member>
        <member name="T:Vanara.PInvoke.DbgHelp.MINIDUMP_TYPE">
            <summary>
            <para>Identifies the type of information that will be written to the minidump file by the MiniDumpWriteDump function.</para>
            <para><c>Important</c></para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.MINIDUMP_TYPE.MiniDumpNormal">
            <summary>Include just the information necessary to capture stack traces for all existing threads in a process.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.MINIDUMP_TYPE.MiniDumpWithDataSegs">
            <summary>
            Include the data sections from all loaded modules. This results in the inclusion of global variables, which can make the
            minidump file significantly larger. For per-module control, use the ModuleWriteDataSeg enumeration value from MODULE_WRITE_FLAGS.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.MINIDUMP_TYPE.MiniDumpWithFullMemory">
            <summary>
            Include all accessible memory in the process. The raw memory data is included at the end, so that the initial structures can
            be mapped directly without the raw memory information. This option can result in a very large file.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.MINIDUMP_TYPE.MiniDumpWithHandleData">
            <summary>Include high-level information about the operating system handles that are active when the minidump is made.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.MINIDUMP_TYPE.MiniDumpFilterMemory">
            <summary>
            Stack and backing store memory written to the minidump file should be filtered to remove all but the pointer values
            necessary to reconstruct a stack trace.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.MINIDUMP_TYPE.MiniDumpScanMemory">
            <summary>
            Stack and backing store memory should be scanned for pointer references to modules in the module list. If a module is
            referenced by stack or backing store memory, the ModuleWriteFlags member of the MINIDUMP_CALLBACK_OUTPUT structure is set to ModuleReferencedByMemory.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.MINIDUMP_TYPE.MiniDumpWithUnloadedModules">
            <summary>
            Include information from the list of modules that were recently unloaded, if this information is maintained by the operating
            system. Windows Server 2003 and Windows XP: The operating system does not maintain information for unloaded modules until
            Windows Server 2003 with SP1 and Windows XP with SP2.DbgHelp 5.1: This value is not supported.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.MINIDUMP_TYPE.MiniDumpWithIndirectlyReferencedMemory">
            <summary>
            Include pages with data referenced by locals or other stack memory. This option can increase the size of the minidump file
            significantly. DbgHelp 5.1: This value is not supported.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.MINIDUMP_TYPE.MiniDumpFilterModulePaths">
            <summary>
            Filter module paths for information such as user names or important directories. This option may prevent the system from
            locating the image file and should be used only in special situations. DbgHelp 5.1: This value is not supported.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.MINIDUMP_TYPE.MiniDumpWithProcessThreadData">
            <summary>
            Include complete per-process and per-thread information from the operating system. DbgHelp 5.1: This value is not supported.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.MINIDUMP_TYPE.MiniDumpWithPrivateReadWriteMemory">
            <summary>Scan the virtual address space for PAGE_READWRITE memory to be included. DbgHelp 5.1: This value is not supported.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.MINIDUMP_TYPE.MiniDumpWithoutOptionalData">
            <summary>
            Reduce the data that is dumped by eliminating memory regions that are not essential to meet criteria specified for the dump.
            This can avoid dumping memory that may contain data that is private to the user. However, it is not a guarantee that no
            private information will be present. DbgHelp 6.1 and earlier: This value is not supported.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.MINIDUMP_TYPE.MiniDumpWithFullMemoryInfo">
            <summary>
            Include memory region information. For more information, see MINIDUMP_MEMORY_INFO_LIST. DbgHelp 6.1 and earlier: This value
            is not supported.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.MINIDUMP_TYPE.MiniDumpWithThreadInfo">
            <summary>
            Include thread state information. For more information, see MINIDUMP_THREAD_INFO_LIST. DbgHelp 6.1 and earlier: This value
            is not supported.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.MINIDUMP_TYPE.MiniDumpWithCodeSegs">
            <summary>
            Include all code and code-related sections from loaded modules to capture executable content. For per-module control, use
            the ModuleWriteCodeSegs enumeration value from MODULE_WRITE_FLAGS. DbgHelp 6.1 and earlier: This value is not supported.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.MINIDUMP_TYPE.MiniDumpWithoutAuxiliaryState">
            <summary>Turns off secondary auxiliary-supported memory gathering.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.MINIDUMP_TYPE.MiniDumpWithFullAuxiliaryState">
            <summary>
            Requests that auxiliary data providers include their state in the dump image; the state data that is included is provider
            dependent. This option can result in a large dump image.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.MINIDUMP_TYPE.MiniDumpWithPrivateWriteCopyMemory">
            <summary>
            Scans the virtual address space for PAGE_WRITECOPY memory to be included. Prior to DbgHelp 6.1: This value is not supported.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.MINIDUMP_TYPE.MiniDumpIgnoreInaccessibleMemory">
            <summary>
            If you specify MiniDumpWithFullMemory, the MiniDumpWriteDump function will fail if the function cannot read the memory
            regions; however, if you include MiniDumpIgnoreInaccessibleMemory, the MiniDumpWriteDump function will ignore the memory
            read failures and continue to generate the dump. Note that the inaccessible memory regions are not included in the
            dump.Prior to DbgHelp 6.1: This value is not supported.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.MINIDUMP_TYPE.MiniDumpWithTokenInformation">
            <summary>
            Adds security token related data. This will make the "!token" extension work when processing a user-mode dump. Prior to
            DbgHelp 6.1: This value is not supported.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.MINIDUMP_TYPE.MiniDumpWithModuleHeaders">
            <summary>Adds module header related data. Prior to DbgHelp 6.1: This value is not supported.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.MINIDUMP_TYPE.MiniDumpFilterTriage">
            <summary>Adds filter triage related data. Prior to DbgHelp 6.1: This value is not supported.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.MINIDUMP_TYPE.MiniDumpWithAvxXStateContext">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.MINIDUMP_TYPE.MiniDumpWithIptTrace">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.MINIDUMP_TYPE.MiniDumpValidTypeFlags">
            <summary>Indicates which flags are valid.</summary>
        </member>
        <member name="T:Vanara.PInvoke.DbgHelp.MODULE_WRITE_FLAGS">
            <summary>Identifies the type of module information that will be written to the minidump file by the MiniDumpWriteDump function.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.MODULE_WRITE_FLAGS.ModuleWriteModule">
            <summary>Only module information will be written to the minidump file.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.MODULE_WRITE_FLAGS.ModuleWriteDataSeg">
            <summary>
            Module and data segment information will be written to the minidump file. This value will only be set if the
            MiniDumpWithDataSegs enumeration value from MINIDUMP_TYPE is set.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.MODULE_WRITE_FLAGS.ModuleWriteMiscRecord">
            <summary>Module, data segment, and miscellaneous record information will be written to the minidump file.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.MODULE_WRITE_FLAGS.ModuleWriteCvRecord">
            <summary>
            CodeView information will be written to the minidump file. Some debuggers need the CodeView information to properly locate symbols.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.MODULE_WRITE_FLAGS.ModuleReferencedByMemory">
            <summary>
            Indicates that a module was referenced by a pointer on the stack or backing store of a thread in the minidump. This value is
            valid only if the DumpType parameter of the MiniDumpWriteDump function includes MiniDumpScanMemory.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.MODULE_WRITE_FLAGS.ModuleWriteTlsData">
            <summary>
            Per-module automatic TLS data is written to the minidump file. (Note that automatic TLS data is created using
            __declspec(thread) while TlsAlloc creates dynamic TLS data). This value is valid only if the DumpType parameter of the
            MiniDumpWriteDump function includes MiniDumpWithProcessThreadData.DbgHelp 6.1 and earlier: This value is not supported.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.MODULE_WRITE_FLAGS.ModuleWriteCodeSegs">
            <summary>
            Code segment information will be written to the minidump file. This value will only be set if the MiniDumpWithCodeSegs
            enumeration value from MINIDUMP_TYPE is set.DbgHelp 6.1 and earlier: This value is not supported.
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.DbgHelp.THREAD_WRITE_FLAGS">
            <summary>Identifies the type of thread information that will be written to the minidump file by the MiniDumpWriteDump function.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.THREAD_WRITE_FLAGS.ThreadWriteThread">
            <summary>Only basic thread information will be written to the minidump file.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.THREAD_WRITE_FLAGS.ThreadWriteStack">
            <summary>Basic thread and thread stack information will be written to the minidump file.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.THREAD_WRITE_FLAGS.ThreadWriteContext">
            <summary>The entire thread context will be written to the minidump file.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.THREAD_WRITE_FLAGS.ThreadWriteBackingStore">
            <summary>Intel Itanium: The backing store memory of every thread will be written to the minidump file.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.THREAD_WRITE_FLAGS.ThreadWriteInstructionWindow">
            <summary>
            A small amount of memory surrounding each thread's instruction pointer will be written to the minidump file. This allows
            instructions near a thread's instruction pointer to be disassembled even if an executable image matching the module cannot
            be found.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.THREAD_WRITE_FLAGS.ThreadWriteThreadData">
            <summary>
            When the minidump type includes MiniDumpWithProcessThreadData, this flag is set. The callback function can clear this flag
            to control which threads provide complete thread data in the minidump file.DbgHelp 5.1: This value is not supported.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.THREAD_WRITE_FLAGS.ThreadWriteThreadInfo">
            <summary>
            When the minidump type includes MiniDumpWithThreadInfo, this flag is set. The callback function can clear this flag to
            control which threads provide thread state information in the minidump file. For more information, see
            MINIDUMP_THREAD_INFO.DbgHelp 6.1 and earlier: This value is not supported.
            </summary>
        </member>
        <member name="M:Vanara.PInvoke.DbgHelp.MiniDumpReadDumpStream(System.IntPtr,System.UInt32,System.IntPtr@,System.IntPtr@,System.UInt32@)">
            <summary>Reads a stream from a user-mode minidump file.</summary>
            <param name="BaseOfDump">
            A pointer to the base of the mapped minidump file. The file should have been mapped into memory using the MapViewOfFile function.
            </param>
            <param name="StreamNumber">
            The type of data to be read from the minidump file. This member can be one of the values in the MINIDUMP_STREAM_TYPE enumeration.
            </param>
            <param name="Dir">A pointer to a MINIDUMP_DIRECTORY structure.</param>
            <param name="StreamPointer">
            A pointer to the beginning of the minidump stream. The format of this stream depends on the value of StreamNumber. For more
            information, see MINIDUMP_STREAM_TYPE.
            </param>
            <param name="StreamSize">The size of the stream pointed to by StreamPointer, in bytes.</param>
            <returns>If the function succeeds, the return value is <c>TRUE</c>; otherwise, the return value is <c>FALSE</c>.</returns>
            <remarks>In this context, a data stream is a block of data written to a minidump file.</remarks>
        </member>
        <member name="M:Vanara.PInvoke.DbgHelp.MiniDumpWriteDump(Vanara.PInvoke.HPROCESS,System.UInt32,Vanara.PInvoke.HFILE,Vanara.PInvoke.DbgHelp.MINIDUMP_TYPE,Vanara.PInvoke.DbgHelp.MINIDUMP_EXCEPTION_INFORMATION@,Vanara.PInvoke.DbgHelp.MINIDUMP_USER_STREAM_INFORMATION@,Vanara.PInvoke.DbgHelp.MINIDUMP_CALLBACK_INFORMATION@)">
            <summary>Writes user-mode minidump information to the specified file.</summary>
            <param name="hProcess">
            <para>A handle to the process for which the information is to be generated.</para>
            <para>
            This handle must have <c>PROCESS_QUERY_INFORMATION</c> and <c>PROCESS_VM_READ</c> access to the process. If handle information
            is to be collected then <c>PROCESS_DUP_HANDLE</c> access is also required. For more information, see Process Security and Access
            Rights. The caller must also be able to get <c>THREAD_ALL_ACCESS</c> access to the threads in the process. For more information,
            see Thread Security and Access Rights.
            </para>
            </param>
            <param name="ProcessId">The identifier of the process for which the information is to be generated.</param>
            <param name="hFile">A handle to the file in which the information is to be written.</param>
            <param name="DumpType">
            The type of information to be generated. This parameter can be one or more of the values from the MINIDUMP_TYPE enumeration.
            </param>
            <param name="ExceptionParam">
            A pointer to a MINIDUMP_EXCEPTION_INFORMATION structure describing the client exception that caused the minidump to be
            generated. If the value of this parameter is <c>NULL</c>, no exception information is included in the minidump file.
            </param>
            <param name="UserStreamParam">
            A pointer to a MINIDUMP_USER_STREAM_INFORMATION structure. If the value of this parameter is <c>NULL</c>, no user-defined
            information is included in the minidump file.
            </param>
            <param name="CallbackParam">
            A pointer to a MINIDUMP_CALLBACK_INFORMATION structure that specifies a callback routine which is to receive extended minidump
            information. If the value of this parameter is <c>NULL</c>, no callbacks are performed.
            </param>
            <returns>
            <para>
            If the function succeeds, the return value is <c>TRUE</c>; otherwise, the return value is <c>FALSE</c>. To retrieve extended
            error information, call GetLastError. Note that the last error will be an <c>HRESULT</c> value.
            </para>
            <para>If the operation is canceled, the last error code is
            <code>HRESULT_FROM_WIN32(ERROR_CANCELLED)</code>
            .
            </para>
            </returns>
            <remarks>
            <para>
            The MiniDumpCallback function receives extended minidump information from <c>MiniDumpWriteDump</c>. It also provides a way for
            the caller to determine the granularity of information written to the minidump file, as the callback function can filter the
            default information.
            </para>
            <para>
            <c>MiniDumpWriteDump</c> should be called from a separate process if at all possible, rather than from within the target process
            being dumped. This is especially true when the target process is already not stable. For example, if it just crashed. A loader
            deadlock is one of many potential side effects of calling <c>MiniDumpWriteDump</c> from within the target process.
            </para>
            <para>
            <c>MiniDumpWriteDump</c> may not produce a valid stack trace for the calling thread. To work around this problem, you must
            capture the state of the calling thread before calling <c>MiniDumpWriteDump</c> and use it as the ExceptionParam parameter. One
            way to do this is to force an exception inside a <c>__try</c>/ <c>__except</c> block and use the EXCEPTION_POINTERS information
            provided by GetExceptionInformation. Alternatively, you can call the function from a new worker thread and filter this worker
            thread from the dump.
            </para>
            <para>
            All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will
            likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more
            than one thread to this function.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.DbgHelp.MiniDumpWriteDump(Vanara.PInvoke.HPROCESS,System.UInt32,Vanara.PInvoke.HFILE,Vanara.PInvoke.DbgHelp.MINIDUMP_TYPE,Vanara.PInvoke.DbgHelp.MINIDUMP_EXCEPTION_INFORMATION@,System.IntPtr,System.IntPtr)">
            <summary>Writes user-mode minidump information to the specified file.</summary>
            <param name="hProcess">
            <para>A handle to the process for which the information is to be generated.</para>
            <para>
            This handle must have <c>PROCESS_QUERY_INFORMATION</c> and <c>PROCESS_VM_READ</c> access to the process. If handle information
            is to be collected then <c>PROCESS_DUP_HANDLE</c> access is also required. For more information, see Process Security and Access
            Rights. The caller must also be able to get <c>THREAD_ALL_ACCESS</c> access to the threads in the process. For more information,
            see Thread Security and Access Rights.
            </para>
            </param>
            <param name="ProcessId">The identifier of the process for which the information is to be generated.</param>
            <param name="hFile">A handle to the file in which the information is to be written.</param>
            <param name="DumpType">
            The type of information to be generated. This parameter can be one or more of the values from the MINIDUMP_TYPE enumeration.
            </param>
            <param name="ExceptionParam">
            A pointer to a MINIDUMP_EXCEPTION_INFORMATION structure describing the client exception that caused the minidump to be
            generated. If the value of this parameter is <c>NULL</c>, no exception information is included in the minidump file.
            </param>
            <param name="UserStreamParam">
            A pointer to a MINIDUMP_USER_STREAM_INFORMATION structure. If the value of this parameter is <c>NULL</c>, no user-defined
            information is included in the minidump file.
            </param>
            <param name="CallbackParam">
            A pointer to a MINIDUMP_CALLBACK_INFORMATION structure that specifies a callback routine which is to receive extended minidump
            information. If the value of this parameter is <c>NULL</c>, no callbacks are performed.
            </param>
            <returns>
            <para>
            If the function succeeds, the return value is <c>TRUE</c>; otherwise, the return value is <c>FALSE</c>. To retrieve extended
            error information, call GetLastError. Note that the last error will be an <c>HRESULT</c> value.
            </para>
            <para>If the operation is canceled, the last error code is
            <code>HRESULT_FROM_WIN32(ERROR_CANCELLED)</code>
            .
            </para>
            </returns>
            <remarks>
            <para>
            The MiniDumpCallback function receives extended minidump information from <c>MiniDumpWriteDump</c>. It also provides a way for
            the caller to determine the granularity of information written to the minidump file, as the callback function can filter the
            default information.
            </para>
            <para>
            <c>MiniDumpWriteDump</c> should be called from a separate process if at all possible, rather than from within the target process
            being dumped. This is especially true when the target process is already not stable. For example, if it just crashed. A loader
            deadlock is one of many potential side effects of calling <c>MiniDumpWriteDump</c> from within the target process.
            </para>
            <para>
            <c>MiniDumpWriteDump</c> may not produce a valid stack trace for the calling thread. To work around this problem, you must
            capture the state of the calling thread before calling <c>MiniDumpWriteDump</c> and use it as the ExceptionParam parameter. One
            way to do this is to force an exception inside a <c>__try</c>/ <c>__except</c> block and use the EXCEPTION_POINTERS information
            provided by GetExceptionInformation. Alternatively, you can call the function from a new worker thread and filter this worker
            thread from the dump.
            </para>
            <para>
            All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will
            likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more
            than one thread to this function.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.DbgHelp.MiniDumpWriteDump(Vanara.PInvoke.HPROCESS,System.UInt32,Vanara.PInvoke.HFILE,Vanara.PInvoke.DbgHelp.MINIDUMP_TYPE,System.IntPtr,System.IntPtr,System.IntPtr)">
            <summary>Writes user-mode minidump information to the specified file.</summary>
            <param name="hProcess">
            <para>A handle to the process for which the information is to be generated.</para>
            <para>
            This handle must have <c>PROCESS_QUERY_INFORMATION</c> and <c>PROCESS_VM_READ</c> access to the process. If handle information
            is to be collected then <c>PROCESS_DUP_HANDLE</c> access is also required. For more information, see Process Security and Access
            Rights. The caller must also be able to get <c>THREAD_ALL_ACCESS</c> access to the threads in the process. For more information,
            see Thread Security and Access Rights.
            </para>
            </param>
            <param name="ProcessId">The identifier of the process for which the information is to be generated.</param>
            <param name="hFile">A handle to the file in which the information is to be written.</param>
            <param name="DumpType">
            The type of information to be generated. This parameter can be one or more of the values from the MINIDUMP_TYPE enumeration.
            </param>
            <param name="ExceptionParam">
            A pointer to a MINIDUMP_EXCEPTION_INFORMATION structure describing the client exception that caused the minidump to be
            generated. If the value of this parameter is <c>NULL</c>, no exception information is included in the minidump file.
            </param>
            <param name="UserStreamParam">
            A pointer to a MINIDUMP_USER_STREAM_INFORMATION structure. If the value of this parameter is <c>NULL</c>, no user-defined
            information is included in the minidump file.
            </param>
            <param name="CallbackParam">
            A pointer to a MINIDUMP_CALLBACK_INFORMATION structure that specifies a callback routine which is to receive extended minidump
            information. If the value of this parameter is <c>NULL</c>, no callbacks are performed.
            </param>
            <returns>
            <para>
            If the function succeeds, the return value is <c>TRUE</c>; otherwise, the return value is <c>FALSE</c>. To retrieve extended
            error information, call GetLastError. Note that the last error will be an <c>HRESULT</c> value.
            </para>
            <para>If the operation is canceled, the last error code is
            <code>HRESULT_FROM_WIN32(ERROR_CANCELLED)</code>
            .
            </para>
            </returns>
            <remarks>
            <para>
            The MiniDumpCallback function receives extended minidump information from <c>MiniDumpWriteDump</c>. It also provides a way for
            the caller to determine the granularity of information written to the minidump file, as the callback function can filter the
            default information.
            </para>
            <para>
            <c>MiniDumpWriteDump</c> should be called from a separate process if at all possible, rather than from within the target process
            being dumped. This is especially true when the target process is already not stable. For example, if it just crashed. A loader
            deadlock is one of many potential side effects of calling <c>MiniDumpWriteDump</c> from within the target process.
            </para>
            <para>
            <c>MiniDumpWriteDump</c> may not produce a valid stack trace for the calling thread. To work around this problem, you must
            capture the state of the calling thread before calling <c>MiniDumpWriteDump</c> and use it as the ExceptionParam parameter. One
            way to do this is to force an exception inside a <c>__try</c>/ <c>__except</c> block and use the EXCEPTION_POINTERS information
            provided by GetExceptionInformation. Alternatively, you can call the function from a new worker thread and filter this worker
            thread from the dump.
            </para>
            <para>
            All DbgHelp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will
            likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more
            than one thread to this function.
            </para>
            </remarks>
        </member>
        <member name="T:Vanara.PInvoke.DbgHelp.CONTEXT">
            <summary/>
        </member>
        <member name="T:Vanara.PInvoke.DbgHelp.CPU_INFORMATION">
            <summary></summary>
        </member>
        <member name="T:Vanara.PInvoke.DbgHelp.CPU_INFORMATION.X86CPUINFO">
            <summary>X86 platforms use CPUID function to obtain processor information.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.CPU_INFORMATION.X86CPUINFO.VendorId">
            <summary>CPUID Subfunction 0, register EAX (VendorId [0]), EBX (VendorId [1]) and ECX (VendorId [2]).</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.CPU_INFORMATION.X86CPUINFO.VersionInformation">
            <summary>CPUID Subfunction 1, register EAX</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.CPU_INFORMATION.X86CPUINFO.FeatureInformation">
            <summary>CPUID Subfunction 1, register EDX</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.CPU_INFORMATION.X86CPUINFO.AMDExtendedCpuFeatures">
            <summary>CPUID, Subfunction 80000001, register EBX. This will only be obtained if the vendor id is "AuthenticAMD".</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.CPU_INFORMATION.X86CpuInfo">
            <summary>X86 platforms use CPUID function to obtain processor information.</summary>
        </member>
        <member name="T:Vanara.PInvoke.DbgHelp.CPU_INFORMATION.OTHERCPUINFO">
            <summary>Non-x86 platforms use processor feature flags.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.CPU_INFORMATION.OTHERCPUINFO.ProcessorFeatures">
            <summary>Non-x86 platforms use processor feature flags.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.CPU_INFORMATION.OtherCpuInfo">
            <summary>Non-x86 platforms use processor feature flags.</summary>
        </member>
        <member name="T:Vanara.PInvoke.DbgHelp.MINIDUMP_CALLBACK_INFORMATION">
            <summary>Contains a pointer to an optional callback function that can be used by the MiniDumpWriteDump function.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.MINIDUMP_CALLBACK_INFORMATION.CallbackRoutine">
            <summary>A pointer to the MiniDumpCallback callback function.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.MINIDUMP_CALLBACK_INFORMATION.CallbackParam">
            <summary>The application-defined data for <c>CallbackRoutine</c>.</summary>
        </member>
        <member name="T:Vanara.PInvoke.DbgHelp.MINIDUMP_CALLBACK_INPUT">
            <summary>Contains information used by the MiniDumpCallback function.</summary>
            <remarks>
            If <c>CallbackType</c> is <c>CancelCallback</c> or <c>MemoryCallback</c>, the <c>ProcessId</c>, <c>ProcessHandle</c>, and
            <c>CallbackType</c> members are valid but no other input is specified.
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.MINIDUMP_CALLBACK_INPUT.ProcessId">
            <summary>
            <para>The identifier of the process that contains callback function.</para>
            <para>This member is not used if <c>CallbackType</c> is <c>IoStartCallback</c>.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.MINIDUMP_CALLBACK_INPUT.ProcessHandle">
            <summary>
            <para>A handle to the process that contains the callback function.</para>
            <para>This member is not used if <c>CallbackType</c> is <c>IoStartCallback</c>.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.MINIDUMP_CALLBACK_INPUT.CallbackType">
            <summary>The type of callback function. This member can be one of the values in the MINIDUMP_CALLBACK_TYPE enumeration.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.MINIDUMP_CALLBACK_INPUT.Union">
            <summary>Internal union.</summary>
        </member>
        <member name="P:Vanara.PInvoke.DbgHelp.MINIDUMP_CALLBACK_INPUT.Status">
            <summary>
            If <c>CallbackType</c> is <c>KernelMinidumpStatusCallback</c>, the union is an <c>HRESULT</c> value that indicates the
            status of the kernel minidump write attempt.
            </summary>
        </member>
        <member name="P:Vanara.PInvoke.DbgHelp.MINIDUMP_CALLBACK_INPUT.Thread">
            <summary>If <c>CallbackType</c> is <c>ThreadCallback</c>, the union is a MINIDUMP_THREAD_CALLBACK structure.</summary>
        </member>
        <member name="P:Vanara.PInvoke.DbgHelp.MINIDUMP_CALLBACK_INPUT.ThreadEx">
            <summary>If <c>CallbackType</c> is <c>ThreadExCallback</c>, the union is a MINIDUMP_THREAD_EX_CALLBACK structure.</summary>
        </member>
        <member name="P:Vanara.PInvoke.DbgHelp.MINIDUMP_CALLBACK_INPUT.Module">
            <summary>If <c>CallbackType</c> is <c>ModuleCallback</c>, the union is a MINIDUMP_MODULE_CALLBACK structure.</summary>
        </member>
        <member name="P:Vanara.PInvoke.DbgHelp.MINIDUMP_CALLBACK_INPUT.IncludeThread">
            <summary>
            <para>If <c>CallbackType</c> is <c>IncludeThreadCallback</c>, the union is a MINIDUMP_INCLUDE_THREAD_CALLBACK structure.</para>
            <para><c>DbgHelp 6.2 and earlier:</c> This member is not available.</para>
            </summary>
        </member>
        <member name="P:Vanara.PInvoke.DbgHelp.MINIDUMP_CALLBACK_INPUT.IncludeModule">
            <summary>
            <para>If <c>CallbackType</c> is <c>IncludeModuleCallback</c>, the union is a MINIDUMP_INCLUDE_MODULE_CALLBACK structure.</para>
            <para><c>DbgHelp 6.2 and earlier:</c> This member is not available.</para>
            </summary>
        </member>
        <member name="P:Vanara.PInvoke.DbgHelp.MINIDUMP_CALLBACK_INPUT.Io">
            <summary>
            <para>
            If <c>CallbackType</c> is <c>IoStartCallback</c>, <c>IoWriteAllCallback</c>, or <c>IoFinishCallback</c>, the union is a
            MINIDUMP_IO_CALLBACK structure.
            </para>
            <para><c>DbgHelp 6.4 and earlier:</c> This member is not available.</para>
            </summary>
        </member>
        <member name="P:Vanara.PInvoke.DbgHelp.MINIDUMP_CALLBACK_INPUT.ReadMemoryFailure">
            <summary>
            <para>
            If <c>CallbackType</c> is <c>ReadMemoryFailureCallback</c>, the union is a MINIDUMP_READ_MEMORY_FAILURE_CALLBACK structure.
            </para>
            <para><c>DbgHelp 6.4 and earlier:</c> This member is not available.</para>
            </summary>
        </member>
        <member name="P:Vanara.PInvoke.DbgHelp.MINIDUMP_CALLBACK_INPUT.SecondaryFlags">
            <summary>
            <para>Contains a value from the MINIDUMP_SECONDARY_FLAGS enumeration type.</para>
            <para><c>DbgHelp 6.5 and earlier:</c> This member is not available.</para>
            </summary>
        </member>
        <member name="P:Vanara.PInvoke.DbgHelp.MINIDUMP_CALLBACK_INPUT.VmQuery">
            <summary/>
        </member>
        <member name="P:Vanara.PInvoke.DbgHelp.MINIDUMP_CALLBACK_INPUT.VmPreRead">
            <summary/>
        </member>
        <member name="P:Vanara.PInvoke.DbgHelp.MINIDUMP_CALLBACK_INPUT.VmPostRead">
            <summary/>
        </member>
        <member name="T:Vanara.PInvoke.DbgHelp.MINIDUMP_CALLBACK_INPUT.UNION">
            <summary>Internal union.</summary>
        </member>
        <member name="T:Vanara.PInvoke.DbgHelp.MINIDUMP_CALLBACK_OUTPUT">
            <summary>Contains information returned by the MiniDumpCallback function.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.MINIDUMP_CALLBACK_OUTPUT.ModuleWriteFlags">
            <summary>
            <para>
            The module write operation flags. This member can be one or more of the values in the MODULE_WRITE_FLAGS enumeration. The
            flags are set to their default values on entry to the callback.
            </para>
            <para>This member is ignored unless the callback type is <c>IncludeModuleCallback</c> or <c>ModuleCallback</c>.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.MINIDUMP_CALLBACK_OUTPUT.ThreadWriteFlags">
            <summary>
            <para>
            The thread write operation flags. This member can be one or more of the values in the THREAD_WRITE_FLAGS enumeration. The
            flags are set to their default values on entry to the callback.
            </para>
            <para>This member is ignored unless the callback type is <c>IncludeThreadCallback</c>, <c>ThreadCallback</c>, or <c>ThreadExCallback</c>.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.MINIDUMP_CALLBACK_OUTPUT.SecondaryFlags">
            <summary>
            <para>Contains a value from the MINIDUMP_SECONDARY_FLAGS enumeration type.</para>
            <para><c>DbgHelp 6.5 and earlier:</c> This member is not available.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.MINIDUMP_CALLBACK_OUTPUT.MemoryBase">
            <summary>
            <para>The base address of the memory region to be included in the dump.</para>
            <para>This member is ignored unless the callback type is <c>MemoryCallback</c> or <c>RemoveMemoryCallback</c>.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.MINIDUMP_CALLBACK_OUTPUT.MemorySize">
            <summary>
            <para>The size of the memory region to be included in the dump, in bytes.</para>
            <para>This member is ignored unless the callback type is <c>MemoryCallback</c> or <c>RemoveMemoryCallback</c>.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.MINIDUMP_CALLBACK_OUTPUT.CheckCancel">
            <summary>
            <para>
            Controls whether the callback function should receive cancel callbacks. If this member is <c>TRUE</c>, the cancel callbacks
            will continue. Otherwise, they will not.
            </para>
            <para>This member is ignored unless the callback type is <c>CancelCallback</c>.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.MINIDUMP_CALLBACK_OUTPUT.Cancel">
            <summary>
            <para>
            Controls whether the dump should be canceled. If the callback function returns <c>TRUE</c> and <c>Cancel</c> is <c>TRUE</c>,
            the dump will be canceled. In this case, the MiniDumpWriteDump function fails and the dump is not valid.
            </para>
            <para>This member is ignored unless the callback type is <c>CancelCallback</c>.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.MINIDUMP_CALLBACK_OUTPUT.Handle">
            <summary>
            <para>A handle to the file to which a kernel minidump will be written.</para>
            <para>This member is ignored unless the callback type is <c>WriteKernelMinidumpCallback</c>.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.MINIDUMP_CALLBACK_OUTPUT.VmRegion">
            <summary>
            <para>
            A MINIDUMP_MEMORY_INFO structure that describes the virtual memory region. The region base and size must be aligned on a
            page boundary. The region size can be set to 0 to filter out the region.
            </para>
            <para>This member is ignored unless the callback type is <c>IncludeVmRegionCallback</c>.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.MINIDUMP_CALLBACK_OUTPUT.Continue">
            <summary>
            <para>
            Controls whether the dump should be continued. If the callback function returns <c>TRUE</c> and <c>Continue</c> is
            <c>TRUE</c>, the dump will be continued. Otherwise, the MiniDumpWriteDump function fails and the dump is not valid.
            </para>
            <para>This member is ignored unless the callback type is <c>IncludeVmRegionCallback</c>.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.MINIDUMP_CALLBACK_OUTPUT.VmQueryStatus">
            <summary/>
        </member>
        <member name="P:Vanara.PInvoke.DbgHelp.MINIDUMP_CALLBACK_OUTPUT.VmQueryResult">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.MINIDUMP_CALLBACK_OUTPUT.VmReadStatus">
            <summary/>
        </member>
        <member name="P:Vanara.PInvoke.DbgHelp.MINIDUMP_CALLBACK_OUTPUT.VmReadBytesCompleted">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.MINIDUMP_CALLBACK_OUTPUT.Status">
            <summary>
            <para>The status of the operation.</para>
            <para>
            This member is ignored unless the callback type is <c>ReadMemoryFailureCallback</c>, <c>IoStartCallback</c>,
            <c>IoWriteAllCallback</c>, or <c>IoFinishCallback</c>.
            </para>
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.DbgHelp.MINIDUMP_DIRECTORY">
            <summary>Contains the information needed to access a specific data stream in a minidump file.</summary>
            <remarks>In this context, a data stream is a block of data within a minidump file.</remarks>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.MINIDUMP_DIRECTORY.StreamType">
            <summary>The type of data stream. This member can be one of the values in the MINIDUMP_STREAM_TYPE enumeration.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.MINIDUMP_DIRECTORY.Location">
            <summary>A MINIDUMP_LOCATION_DESCRIPTOR structure that specifies the location of the data stream.</summary>
        </member>
        <member name="T:Vanara.PInvoke.DbgHelp.MINIDUMP_EXCEPTION">
            <summary>Contains exception information.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.MINIDUMP_EXCEPTION.ExceptionCode">
            <summary>
            <para>
            The reason the exception occurred. This is the code generated by a hardware exception, or the code specified in the
            RaiseException function for a software-generated exception. Following are the exception codes likely to occur due to common
            programming errors.
            </para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>EXCEPTION_ACCESS_VIOLATION</term>
            <term>The thread tried to read from or write to a virtual address for which it does not have the appropriate access.</term>
            </item>
            <item>
            <term>EXCEPTION_ARRAY_BOUNDS_EXCEEDED</term>
            <term>The thread tried to access an array element that is out of bounds and the underlying hardware supports bounds checking.</term>
            </item>
            <item>
            <term>EXCEPTION_BREAKPOINT</term>
            <term>A breakpoint was encountered.</term>
            </item>
            <item>
            <term>EXCEPTION_DATATYPE_MISALIGNMENT</term>
            <term>
            The thread tried to read or write data that is misaligned on hardware that does not provide alignment. For example, 16-bit
            values must be aligned on 2-byte boundaries; 32-bit values on 4-byte boundaries, and so on.
            </term>
            </item>
            <item>
            <term>EXCEPTION_FLT_DENORMAL_OPERAND</term>
            <term>
            One of the operands in a floating-point operation is denormal. A denormal value is one that is too small to represent as a
            standard floating-point value.
            </term>
            </item>
            <item>
            <term>EXCEPTION_FLT_DIVIDE_BY_ZERO</term>
            <term>The thread tried to divide a floating-point value by a floating-point divisor of zero.</term>
            </item>
            <item>
            <term>EXCEPTION_FLT_INEXACT_RESULT</term>
            <term>The result of a floating-point operation cannot be represented exactly as a decimal fraction.</term>
            </item>
            <item>
            <term>EXCEPTION_FLT_INVALID_OPERATION</term>
            <term>This exception represents any floating-point exception not included in this list.</term>
            </item>
            <item>
            <term>EXCEPTION_FLT_OVERFLOW</term>
            <term>The exponent of a floating-point operation is greater than the magnitude allowed by the corresponding type.</term>
            </item>
            <item>
            <term>EXCEPTION_FLT_STACK_CHECK</term>
            <term>The stack overflowed or underflowed as the result of a floating-point operation.</term>
            </item>
            <item>
            <term>EXCEPTION_FLT_UNDERFLOW</term>
            <term>The exponent of a floating-point operation is less than the magnitude allowed by the corresponding type.</term>
            </item>
            <item>
            <term>EXCEPTION_ILLEGAL_INSTRUCTION</term>
            <term>The thread tried to execute an invalid instruction.</term>
            </item>
            <item>
            <term>EXCEPTION_IN_PAGE_ERROR</term>
            <term>
            The thread tried to access a page that was not present, and the system was unable to load the page. For example, this
            exception might occur if a network connection is lost while running a program over the network.
            </term>
            </item>
            <item>
            <term>EXCEPTION_INT_DIVIDE_BY_ZERO</term>
            <term>The thread tried to divide an integer value by an integer divisor of zero.</term>
            </item>
            <item>
            <term>EXCEPTION_INT_OVERFLOW</term>
            <term>The result of an integer operation caused a carry out of the most significant bit of the result.</term>
            </item>
            <item>
            <term>EXCEPTION_INVALID_DISPOSITION</term>
            <term>
            An exception handler returned an invalid disposition to the exception dispatcher. Programmers using a high-level language
            such as C should never encounter this exception.
            </term>
            </item>
            <item>
            <term>EXCEPTION_NONCONTINUABLE_EXCEPTION</term>
            <term>The thread tried to continue execution after a noncontinuable exception occurred.</term>
            </item>
            <item>
            <term>EXCEPTION_PRIV_INSTRUCTION</term>
            <term>The thread tried to execute an instruction whose operation is not allowed in the current machine mode.</term>
            </item>
            <item>
            <term>EXCEPTION_SINGLE_STEP</term>
            <term>A trace trap or other single-instruction mechanism signaled that one instruction has been executed.</term>
            </item>
            <item>
            <term>EXCEPTION_STACK_OVERFLOW</term>
            <term>The thread used up its stack.</term>
            </item>
            </list>
            <para>
            Another exception code is likely to occur when debugging console processes. It does not arise because of a programming
            error. The DBG_CONTROL_C exception code occurs when CTRL+C is input to a console process that handles CTRL+C signals and is
            being debugged. This exception code is not meant to be handled by applications. It is raised only for the benefit of the
            debugger, and is raised only when a debugger is attached to the console process.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.MINIDUMP_EXCEPTION.ExceptionFlags">
            <summary>
            This member can be either zero, indicating a continuable exception, or EXCEPTION_NONCONTINUABLE, indicating a noncontinuable
            exception. Any attempt to continue execution after a noncontinuable exception causes the EXCEPTION_NONCONTINUABLE_EXCEPTION exception.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.MINIDUMP_EXCEPTION.ExceptionRecord">
            <summary>
            A pointer to an associated <c>MINIDUMP_EXCEPTION</c> structure. Exception records can be chained together to provide
            additional information when nested exceptions occur.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.MINIDUMP_EXCEPTION.ExceptionAddress">
            <summary>The address where the exception occurred.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.MINIDUMP_EXCEPTION.NumberParameters">
            <summary>
            The number of parameters associated with the exception. This is the number of defined elements in the
            <c>ExceptionInformation</c> array.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.MINIDUMP_EXCEPTION.unusedAlignment">
            <summary>Reserved for cross-platform structure member alignment. Do not set.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.MINIDUMP_EXCEPTION.ExceptionInformation">
            <summary>
            <para>
            An array of additional arguments that describe the exception. The RaiseException function can specify this array of
            arguments. For most exception codes, the array elements are undefined. For the following exception code, the array elements
            are defined as follows.
            </para>
            <list type="table">
            <listheader>
            <term>Exception code</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>EXCEPTION_ACCESS_VIOLATION</term>
            <term>
            The first element of the array contains a read/write flag that indicates the type of operation that caused the access
            violation. If this value is zero, the thread attempted to read the inaccessible data. If this value is 1, the thread
            attempted to write to an inaccessible address. The second array element specifies the virtual address of the inaccessible data.
            </term>
            </item>
            </list>
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.DbgHelp.MINIDUMP_EXCEPTION_INFORMATION">
            <summary>Contains the exception information written to the minidump file by the MiniDumpWriteDump function.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.MINIDUMP_EXCEPTION_INFORMATION.ThreadId">
            <summary>The identifier of the thread throwing the exception.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.MINIDUMP_EXCEPTION_INFORMATION.ExceptionPointers">
            <summary>
            A pointer to an EXCEPTION_POINTERS structure specifying a computer-independent description of the exception and the
            processor context at the time of the exception.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.MINIDUMP_EXCEPTION_INFORMATION.ClientPointers">
            <summary>
            Determines where to get the memory regions pointed to by the <c>ExceptionPointers</c> member. Set to <c>TRUE</c> if the
            memory resides in the process being debugged (the target process of the debugger). Otherwise, set to <c>FALSE</c> if the
            memory resides in the address space of the calling program (the debugger process). If you are accessing local memory (in the
            calling process) you should not set this member to <c>TRUE</c>.
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.DbgHelp.MINIDUMP_EXCEPTION_STREAM">
            <summary>Represents an exception information stream.</summary>
            <remarks>In this context, a data stream is a set of data in a minidump file.</remarks>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.MINIDUMP_EXCEPTION_STREAM.ThreadId">
            <summary>The identifier of the thread that caused the exception.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.MINIDUMP_EXCEPTION_STREAM.__alignment">
            <summary>A variable for alignment.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.MINIDUMP_EXCEPTION_STREAM.ExceptionRecord">
            <summary>A MINIDUMP_EXCEPTION structure.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.MINIDUMP_EXCEPTION_STREAM.ThreadContext">
            <summary>A MINIDUMP_LOCATION_DESCRIPTOR structure.</summary>
        </member>
        <member name="T:Vanara.PInvoke.DbgHelp.MINIDUMP_FUNCTION_TABLE_DESCRIPTOR">
            <summary>Represents a function table stream.</summary>
            <remarks>
            The first descriptor in the function table stream follows the header, MINIDUMP_FUNCTION_TABLE_STREAM. The generic descriptor is
            followed by a native system descriptor, then by <c>EntryCount</c> native system function entry structures.
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.MINIDUMP_FUNCTION_TABLE_DESCRIPTOR.MinimumAddress">
            <summary>The minimum address of functions described by the table.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.MINIDUMP_FUNCTION_TABLE_DESCRIPTOR.MaximumAddress">
            <summary>The maximum address of functions described by the table.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.MINIDUMP_FUNCTION_TABLE_DESCRIPTOR.BaseAddress">
            <summary>The base address to use when computing full virtual addresses from relative virtual addresses in function entries.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.MINIDUMP_FUNCTION_TABLE_DESCRIPTOR.EntryCount">
            <summary>The number of entries in the function table.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.MINIDUMP_FUNCTION_TABLE_DESCRIPTOR.SizeOfAlignPad">
            <summary>
            The size of alignment padding that follows the function entry data, in bytes. The function entry data in the stream is
            guaranteed to be aligned appropriately for access to the data members. If a minidump is directly mapped in memory, it is
            always possible to directly reference structure members in the stream.
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.DbgHelp.MINIDUMP_FUNCTION_TABLE_STREAM">
            <summary>Represents the header for the function table stream.</summary>
            <remarks>
            In this context, a data stream is a set of data in a minidump file. This header structure is followed by
            <c>NumberOfDescriptors</c> function tables. For each function table there is a MINIDUMP_FUNCTION_TABLE_DESCRIPTOR structure,
            then the raw system descriptor for the table, then the raw system function entry data. If necessary, alignment padding is placed
            between tables to properly align the initial structures.
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.MINIDUMP_FUNCTION_TABLE_STREAM.SizeOfHeader">
            <summary>
            The size of header information for the stream, in bytes. This value is
            <code>sizeof(MINIDUMP_FUNCTION_TABLE_STREAM)</code>
            .
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.MINIDUMP_FUNCTION_TABLE_STREAM.SizeOfDescriptor">
            <summary>
            The size of a descriptor in the stream, in bytes. This value is
            <code>sizeof(MINIDUMP_FUNCTION_TABLE_DESCRIPTOR)</code>
            .
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.MINIDUMP_FUNCTION_TABLE_STREAM.SizeOfNativeDescriptor">
            <summary>
            The size of a raw system descriptor in the stream, in bytes. This value depends on the particular platform and system
            version on which the minidump was generated.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.MINIDUMP_FUNCTION_TABLE_STREAM.SizeOfFunctionEntry">
            <summary>
            The size of a raw system function table entry, in bytes. This value depends on the particular platform and system version on
            which the minidump was generated.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.MINIDUMP_FUNCTION_TABLE_STREAM.NumberOfDescriptors">
            <summary>The number of descriptors in the stream.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.MINIDUMP_FUNCTION_TABLE_STREAM.SizeOfAlignPad">
            <summary>The size of alignment padding that follows the header, in bytes.</summary>
        </member>
        <member name="T:Vanara.PInvoke.DbgHelp.MINIDUMP_HANDLE_DATA_STREAM">
            <summary>Represents the header for a handle data stream.</summary>
            <remarks>
            In this context, a data stream is a set of data in a minidump file. This header structure is followed by
            <c>NumberOfDescriptors</c> MINIDUMP_HANDLE_DESCRIPTOR or MINIDUMP_HANDLE_DESCRIPTOR_2 structures.
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.MINIDUMP_HANDLE_DATA_STREAM.SizeOfHeader">
            <summary>
            The size of the header information for the stream, in bytes. This value is
            <code>sizeof(MINIDUMP_HANDLE_DATA_STREAM)</code>
            .
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.MINIDUMP_HANDLE_DATA_STREAM.SizeOfDescriptor">
            <summary>
            The size of a descriptor in the stream, in bytes. This value is
            <code>sizeof(MINIDUMP_HANDLE_DESCRIPTOR)</code>
            or
            <code>sizeof(MINIDUMP_HANDLE_DESCRIPTOR_2)</code>
            .
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.MINIDUMP_HANDLE_DATA_STREAM.NumberOfDescriptors">
            <summary>The number of descriptors in the stream.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.MINIDUMP_HANDLE_DATA_STREAM.Reserved">
            <summary>Reserved for future use; must be zero.</summary>
        </member>
        <member name="T:Vanara.PInvoke.DbgHelp.MINIDUMP_HANDLE_DESCRIPTOR">
            <summary>Contains the state of an individual system handle at the time the minidump was written.</summary>
            <remarks>The first descriptor in the handle data stream follows the header, MINIDUMP_HANDLE_DATA_STREAM.</remarks>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.MINIDUMP_HANDLE_DESCRIPTOR.Handle">
            <summary>The operating system handle value.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.MINIDUMP_HANDLE_DESCRIPTOR.TypeNameRva">
            <summary>An RVA to a MINIDUMP_STRING structure that specifies the object type of the handle. This member can be zero.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.MINIDUMP_HANDLE_DESCRIPTOR.ObjectNameRva">
            <summary>An RVA to a MINIDUMP_STRING structure that specifies the object name of the handle. This member can be zero.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.MINIDUMP_HANDLE_DESCRIPTOR.Attributes">
            <summary>The meaning of this member depends on the handle type and the operating system.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.MINIDUMP_HANDLE_DESCRIPTOR.GrantedAccess">
            <summary>The meaning of this member depends on the handle type and the operating system.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.MINIDUMP_HANDLE_DESCRIPTOR.HandleCount">
            <summary>The meaning of this member depends on the handle type and the operating system.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.MINIDUMP_HANDLE_DESCRIPTOR.PointerCount">
            <summary>The meaning of this member depends on the handle type and the operating system.</summary>
        </member>
        <member name="T:Vanara.PInvoke.DbgHelp.MINIDUMP_HANDLE_DESCRIPTOR_2">
            <summary>Describes the state of an individual system handle at the time the minidump was written.</summary>
            <remarks>The first descriptor in the handle data stream follows the header, MINIDUMP_HANDLE_DATA_STREAM.</remarks>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.MINIDUMP_HANDLE_DESCRIPTOR_2.Handle">
            <summary>The operating system handle value.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.MINIDUMP_HANDLE_DESCRIPTOR_2.TypeNameRva">
            <summary>An RVA to a MINIDUMP_STRING structure that specifies the object type of the handle. This member can be zero.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.MINIDUMP_HANDLE_DESCRIPTOR_2.ObjectNameRva">
            <summary>An RVA to a MINIDUMP_STRING structure that specifies the object name of the handle. This member can be 0.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.MINIDUMP_HANDLE_DESCRIPTOR_2.Attributes">
            <summary>The meaning of this member depends on the handle type and the operating system.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.MINIDUMP_HANDLE_DESCRIPTOR_2.GrantedAccess">
            <summary>The meaning of this member depends on the handle type and the operating system.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.MINIDUMP_HANDLE_DESCRIPTOR_2.HandleCount">
            <summary>The meaning of this member depends on the handle type and the operating system.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.MINIDUMP_HANDLE_DESCRIPTOR_2.PointerCount">
            <summary>The meaning of this member depends on the handle type and the operating system.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.MINIDUMP_HANDLE_DESCRIPTOR_2.ObjectInfoRva">
            <summary>
            An RVA to a MINIDUMP_HANDLE_OBJECT_INFORMATION structure that specifies object-specific information. This member can be 0 if
            there is no extra information.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.MINIDUMP_HANDLE_DESCRIPTOR_2.Reserved0">
            <summary>Reserved for future use; must be zero.</summary>
        </member>
        <member name="T:Vanara.PInvoke.DbgHelp.MINIDUMP_HANDLE_OBJECT_INFORMATION">
            <summary>Contains object-specific information for a handle.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.MINIDUMP_HANDLE_OBJECT_INFORMATION.NextInfoRva">
            <summary>
            An RVA to a <c>MINIDUMP_HANDLE_OBJECT_INFORMATION</c> structure that specifies additional object-specific information. This
            member is 0 if there are no more elements in the list.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.MINIDUMP_HANDLE_OBJECT_INFORMATION.InfoType">
            <summary>
            The object information type. This member is one of the values from the MINIDUMP_HANDLE_OBJECT_INFORMATION_TYPE enumeration.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.MINIDUMP_HANDLE_OBJECT_INFORMATION.SizeOfInfo">
            <summary>The size of the information that follows this member, in bytes.</summary>
        </member>
        <member name="T:Vanara.PInvoke.DbgHelp.MINIDUMP_HANDLE_OPERATION_LIST">
            <summary>Contains a list of handle operations.</summary>
            <remarks>For a definition of the <c>AVRF_HANDLE_OPERATION</c> structure, see the Avrfsdk.h header file.</remarks>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.MINIDUMP_HANDLE_OPERATION_LIST.SizeOfHeader">
            <summary>
            The size of the header data for the stream, in bytes. This is generally
            <code>sizeof(MINIDUMP_HANDLE_OPERATION_LIST)</code>
            .
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.MINIDUMP_HANDLE_OPERATION_LIST.SizeOfEntry">
            <summary>
            The size of each entry following the header, in bytes. This is generally
            <code>sizeof(AVRF_HANDLE_OPERATION)</code>
            .
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.MINIDUMP_HANDLE_OPERATION_LIST.NumberOfEntries">
            <summary>
            The number of entries in the stream. These are generally <c>AVRF_HANDLE_OPERATION</c> structures. The entries follow the header.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.MINIDUMP_HANDLE_OPERATION_LIST.Reserved">
            <summary>This member is reserved for future use.</summary>
        </member>
        <member name="T:Vanara.PInvoke.DbgHelp.MINIDUMP_HEADER">
            <summary>Contains header information for the minidump file.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.MINIDUMP_HEADER.Signature">
            <summary>The signature. Set this member to MINIDUMP_SIGNATURE.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.MINIDUMP_HEADER.Version">
            <summary>
            The version of the minidump format. The low-order word is MINIDUMP_VERSION. The high-order word is an internal value that is
            implementation specific.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.MINIDUMP_HEADER.NumberOfStreams">
            <summary>The number of streams in the minidump directory.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.MINIDUMP_HEADER.StreamDirectoryRva">
            <summary>The base RVA of the minidump directory. The directory is an array of MINIDUMP_DIRECTORY structures.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.MINIDUMP_HEADER.CheckSum">
            <summary>The checksum for the minidump file. This member can be zero.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.MINIDUMP_HEADER.TimeDateStamp">
            <summary>Time and date, in <c>time_t</c> format.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.MINIDUMP_HEADER.Flags">
            <summary>One or more values from the MINIDUMP_TYPE enumeration type.</summary>
        </member>
        <member name="T:Vanara.PInvoke.DbgHelp.MINIDUMP_INCLUDE_MODULE_CALLBACK">
            <summary>Contains information for the MiniDumpCallback function when the callback type is <c>IncludeModuleCallback</c>.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.MINIDUMP_INCLUDE_MODULE_CALLBACK.BaseOfImage">
            <summary>The base address of the executable image in memory.</summary>
        </member>
        <member name="T:Vanara.PInvoke.DbgHelp.MINIDUMP_INCLUDE_THREAD_CALLBACK">
            <summary>Contains information for the MiniDumpCallback function when the callback type is <c>IncludeThreadCallback</c>.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.MINIDUMP_INCLUDE_THREAD_CALLBACK.ThreadId">
            <summary>The identifier of the thread.</summary>
        </member>
        <member name="T:Vanara.PInvoke.DbgHelp.MINIDUMP_IO_CALLBACK">
            <summary>
            Contains I/O callback information. This structure is used by the MiniDumpCallbackfunction when the callback type is
            <c>IoStartCallback</c>, <c>IoWriteAllCallback</c>, or <c>IoFinishCallback</c>.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.MINIDUMP_IO_CALLBACK.Handle">
            <summary>The file handle passed to the MiniDumpWriteDump function.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.MINIDUMP_IO_CALLBACK.Offset">
            <summary>The offset for the write operation from the start of the minidump data. This member is used only with <c>IoWriteAllCallback</c>.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.MINIDUMP_IO_CALLBACK.Buffer">
            <summary>A pointer to a buffer that contains the data to be written. This member is used only with <c>IoWriteAllCallback</c>.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.MINIDUMP_IO_CALLBACK.BufferBytes">
            <summary>The size of the data buffer, in bytes. This member is used only with <c>IoWriteAllCallback</c>.</summary>
        </member>
        <member name="T:Vanara.PInvoke.DbgHelp.MINIDUMP_LOCATION_DESCRIPTOR">
            <summary>Contains information describing the location of a data stream within a minidump file.</summary>
            <remarks>
            <para>In this context, a data stream refers to a block of data within a minidump file.</para>
            <para>
            This structure uses 32-bit locations for RVAs in the first 4GB and 64-bit locations are used for larger RVAs. The
            <c>MINIDUMP_LOCATION_DESCRIPTOR64</c> structure is defined as follows.
            </para>
            <para>
            <code> typedef struct _MINIDUMP_LOCATION_DESCRIPTOR64 { ULONG64 DataSize; RVA64 Rva; } MINIDUMP_LOCATION_DESCRIPTOR64;</code>
            </para>
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.MINIDUMP_LOCATION_DESCRIPTOR.DataSize">
            <summary>The size of the data stream, in bytes.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.MINIDUMP_LOCATION_DESCRIPTOR.Rva">
            <summary>
            The relative virtual address (RVA) of the data. This is the byte offset of the data stream from the beginning of the
            minidump file.
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.DbgHelp.MINIDUMP_MEMORY_DESCRIPTOR">
            <summary>Describes a range of memory.</summary>
            <remarks>
            <para>
            <c>MINIDUMP_MEMORY_DESCRIPTOR64</c> is used for full-memory minidumps where all of the raw memory is sequential at the end of
            the minidump. There is no need for individual relative virtual addresses (RVAs), because the RVA is the base RVA plus the sum of
            the preceding data blocks. The <c>MINIDUMP_MEMORY_DESCRIPTOR64</c> structure is defined as follows.
            </para>
            <para>
            <code> typedef struct _MINIDUMP_MEMORY_DESCRIPTOR64 { ULONG64 StartOfMemoryRange; ULONG64 DataSize; } MINIDUMP_MEMORY_DESCRIPTOR64, *PMINIDUMP_MEMORY_DESCRIPTOR64;</code>
            </para>
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.MINIDUMP_MEMORY_DESCRIPTOR.StartOfMemoryRange">
            <summary>The starting address of the memory range.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.MINIDUMP_MEMORY_DESCRIPTOR.Memory">
            <summary>A MINIDUMP_LOCATION_DESCRIPTOR structure.</summary>
        </member>
        <member name="T:Vanara.PInvoke.DbgHelp.MINIDUMP_MEMORY_INFO">
            <summary>Describes a region of memory.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.MINIDUMP_MEMORY_INFO.BaseAddress">
            <summary>The base address of the region of pages.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.MINIDUMP_MEMORY_INFO.AllocationBase">
            <summary>The base address of a range of pages in this region. The page is contained within this memory region.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.MINIDUMP_MEMORY_INFO.AllocationProtect">
            <summary>
            The memory protection when the region was initially allocated. This member can be one of the memory protection options,
            along with PAGE_GUARD or PAGE_NOCACHE, as needed.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.MINIDUMP_MEMORY_INFO.__alignment1">
            <summary>A variable for alignment.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.MINIDUMP_MEMORY_INFO.RegionSize">
            <summary>The size of the region beginning at the base address in which all pages have identical attributes, in bytes.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.MINIDUMP_MEMORY_INFO.State">
            <summary>
            <para>The state of the pages in the region. This member can be one of the following values.</para>
            <list type="table">
            <listheader>
            <term>State</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>MEM_COMMIT 0x1000</term>
            <term>
            Indicates committed pages for which physical storage has been allocated, either in memory or in the paging file on disk.
            </term>
            </item>
            <item>
            <term>MEM_FREE 0x10000</term>
            <term>
            Indicates free pages not accessible to the calling process and available to be allocated. For free pages, the information in
            the AllocationBase, AllocationProtect, Protect, and Type members is undefined.
            </term>
            </item>
            <item>
            <term>MEM_RESERVE 0x2000</term>
            <term>
            Indicates reserved pages where a range of the process's virtual address space is reserved without any physical storage being
            allocated. For reserved pages, the information in the Protect member is undefined.
            </term>
            </item>
            </list>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.MINIDUMP_MEMORY_INFO.Protect">
            <summary>
            The access protection of the pages in the region. This member is one of the values listed for the <c>AllocationProtect</c> member.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.MINIDUMP_MEMORY_INFO.Type">
            <summary>
            <para>The type of pages in the region. The following types are defined.</para>
            <list type="table">
            <listheader>
            <term>Type</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>MEM_IMAGE 0x1000000</term>
            <term>Indicates that the memory pages within the region are mapped into the view of an image section.</term>
            </item>
            <item>
            <term>MEM_MAPPED 0x40000</term>
            <term>Indicates that the memory pages within the region are mapped into the view of a section.</term>
            </item>
            <item>
            <term>MEM_PRIVATE 0x20000</term>
            <term>Indicates that the memory pages within the region are private (that is, not shared by other processes).</term>
            </item>
            </list>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.MINIDUMP_MEMORY_INFO.__alignment2">
            <summary>A variable for alignment.</summary>
        </member>
        <member name="T:Vanara.PInvoke.DbgHelp.MINIDUMP_MEMORY_INFO_LIST">
            <summary>Contains a list of memory regions.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.MINIDUMP_MEMORY_INFO_LIST.SizeOfHeader">
            <summary>
            The size of the header data for the stream, in bytes. This is generally
            <code>sizeof(MINIDUMP_MEMORY_INFO_LIST)</code>
            .
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.MINIDUMP_MEMORY_INFO_LIST.SizeOfEntry">
            <summary>
            The size of each entry following the header, in bytes. This is generally
            <code>sizeof(MINIDUMP_MEMORY_INFO)</code>
            .
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.MINIDUMP_MEMORY_INFO_LIST.NumberOfEntries">
            <summary>
            The number of entries in the stream. These are generally MINIDUMP_MEMORY_INFO structures. The entries follow the header.
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.DbgHelp.MINIDUMP_MEMORY_LIST">
            <summary>Contains a list of memory ranges.</summary>
            <remarks>
            <para>The <c>MINIDUMP_MEMORY64_LIST</c> structure is defined as follows. It is used for full-memory minidumps.</para>
            <para>
            <code> typedef struct _MINIDUMP_MEMORY64_LIST { ULONG64 NumberOfMemoryRanges; RVA64 BaseRva; MINIDUMP_MEMORY_DESCRIPTOR64 MemoryRanges [0]; } MINIDUMP_MEMORY64_LIST, *PMINIDUMP_MEMORY64_LIST;</code>
            </para>
            <para>
            Note that <c>BaseRva</c> is the overall base RVA for the memory list. To locate the data for a particular descriptor, start at
            <c>BaseRva</c> and increment by the size of a descriptor until you reach the descriptor.
            </para>
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.MINIDUMP_MEMORY_LIST.NumberOfMemoryRanges">
            <summary>The number of structures in the <c>MemoryRanges</c> array.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.MINIDUMP_MEMORY_LIST.MemoryRanges">
            <summary>An array of MINIDUMP_MEMORY_DESCRIPTOR structures.</summary>
        </member>
        <member name="T:Vanara.PInvoke.DbgHelp.MINIDUMP_MISC_INFO">
            <summary>Contains a variety of information.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.MINIDUMP_MISC_INFO.SizeOfInfo">
            <summary>The size of the structure, in bytes.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.MINIDUMP_MISC_INFO.Flags1">
            <summary>
            <para>The flags that indicate the valid members of this structure. This member can be one or more of the following values.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>MINIDUMP_MISC1_PROCESS_ID 0x00000001</term>
            <term>ProcessId is used.</term>
            </item>
            <item>
            <term>MINIDUMP_MISC1_PROCESS_TIMES 0x00000002</term>
            <term>ProcessCreateTime, ProcessKernelTime, and ProcessUserTime are used.</term>
            </item>
            </list>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.MINIDUMP_MISC_INFO.ProcessId">
            <summary>The identifier of the process. If <c>Flags1</c> does not specify MINIDUMP_MISC1_PROCESS_ID, this member is unused.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.MINIDUMP_MISC_INFO.ProcessCreateTime">
            <summary>
            The creation time of the process, in <c>time_t</c> format. If <c>Flags1</c> does not specify MINIDUMP_MISC1_PROCESS_TIMES,
            this member is unused.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.MINIDUMP_MISC_INFO.ProcessUserTime">
            <summary>
            The time the process has executed in user mode, in seconds. The time that each of the threads of the process has executed in
            user mode is determined, then all these times are summed to obtain this value. If <c>Flags1</c> does not specify
            MINIDUMP_MISC1_PROCESS_TIMES, this member is unused.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.MINIDUMP_MISC_INFO.ProcessKernelTime">
            <summary>
            The time the process has executed in kernel mode, in seconds. The time that each of the threads of the process has executed
            in kernel mode is determined, then all these times are summed to obtain this value. If <c>Flags1</c> does not specify
            MINIDUMP_MISC1_PROCESS_TIMES, this member is unused.
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.DbgHelp.MINIDUMP_MISC_INFO_2">
            <summary>Represents information in the miscellaneous information stream.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.MINIDUMP_MISC_INFO_2.SizeOfInfo">
            <summary>The size of the structure, in bytes.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.MINIDUMP_MISC_INFO_2.Flags1">
            <summary>
            <para>The flags that indicate the valid members of this structure. This member can be one or more of the following values.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>MINIDUMP_MISC1_PROCESS_ID 0x00000001</term>
            <term>ProcessId is used.</term>
            </item>
            <item>
            <term>MINIDUMP_MISC1_PROCESS_TIMES 0x00000002</term>
            <term>ProcessCreateTime, ProcessKernelTime, and ProcessUserTime are used.</term>
            </item>
            <item>
            <term>MINIDUMP_MISC1_PROCESSOR_POWER_INFO 0x00000004</term>
            <term>
            ProcessorMaxMhz, ProcessorCurrentMhz, ProcessorMhzLimit, ProcessorMaxIdleState, and ProcessorCurrentIdleState are used.
            </term>
            </item>
            </list>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.MINIDUMP_MISC_INFO_2.ProcessId">
            <summary>
            The identifier of the process. If <c>Flags1</c> does not specify <c>MINIDUMP_MISC1_PROCESS_ID</c>, this member is unused.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.MINIDUMP_MISC_INFO_2.ProcessCreateTime">
            <summary>
            The creation time of the process, in <c>time_t</c> format. If <c>Flags1</c> does not specify
            <c>MINIDUMP_MISC1_PROCESS_TIMES</c>, this member is unused.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.MINIDUMP_MISC_INFO_2.ProcessUserTime">
            <summary>
            The time the process has executed in user mode, in seconds. The time that each of the threads of the process has executed in
            user mode is determined, then all these times are summed to obtain this value. If <c>Flags1</c> does not specify
            <c>MINIDUMP_MISC1_PROCESS_TIMES</c>, this member is unused.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.MINIDUMP_MISC_INFO_2.ProcessKernelTime">
            <summary>
            The time the process has executed in kernel mode, in seconds. The time that each of the threads of the process has executed
            in kernel mode is determined, then all these times are summed to obtain this value. If <c>Flags1</c> does not specify
            <c>MINIDUMP_MISC1_PROCESS_TIMES</c>, this member is unused.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.MINIDUMP_MISC_INFO_2.ProcessorMaxMhz">
            <summary>
            The maximum specified clock frequency of the system processor, in MHz. If <c>Flags1</c> does not specify
            <c>MINIDUMP_MISC1_PROCESSOR_POWER_INFO</c>, this member is unused.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.MINIDUMP_MISC_INFO_2.ProcessorCurrentMhz">
            <summary>
            The processor clock frequency, in MHz. This number is the maximum specified processor clock frequency multiplied by the
            current processor throttle. If <c>Flags1</c> does not specify <c>MINIDUMP_MISC1_PROCESSOR_POWER_INFO</c>, this member is unused.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.MINIDUMP_MISC_INFO_2.ProcessorMhzLimit">
            <summary>
            The limit on the processor clock frequency, in MHz. This number is the maximum specified processor clock frequency
            multiplied by the current processor thermal throttle limit. If <c>Flags1</c> does not specify
            <c>MINIDUMP_MISC1_PROCESSOR_POWER_INFO</c>, this member is unused.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.MINIDUMP_MISC_INFO_2.ProcessorMaxIdleState">
            <summary>
            The maximum idle state of the processor. If <c>Flags1</c> does not specify <c>MINIDUMP_MISC1_PROCESSOR_POWER_INFO</c>, this
            member is unused.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.MINIDUMP_MISC_INFO_2.ProcessorCurrentIdleState">
            <summary>
            The current idle state of the processor. If <c>Flags1</c> does not specify <c>MINIDUMP_MISC1_PROCESSOR_POWER_INFO</c>, this
            member is unused.
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.DbgHelp.MINIDUMP_MODULE">
            <summary>Contains information for a specific module.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.MINIDUMP_MODULE.BaseOfImage">
            <summary>The base address of the module executable image in memory.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.MINIDUMP_MODULE.SizeOfImage">
            <summary>The size of the module executable image in memory, in bytes.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.MINIDUMP_MODULE.CheckSum">
            <summary>The checksum value of the module executable image.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.MINIDUMP_MODULE.TimeDateStamp">
            <summary>The timestamp value of the module executable image, in <c>time_t</c> format.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.MINIDUMP_MODULE.ModuleNameRva">
            <summary>An RVA to a MINIDUMP_STRING structure that specifies the name of the module.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.MINIDUMP_MODULE.VersionInfo">
            <summary>A VS_FIXEDFILEINFO structure that specifies the version of the module.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.MINIDUMP_MODULE.CvRecord">
            <summary>A MINIDUMP_LOCATION_DESCRIPTOR structure that specifies the CodeView record of the module.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.MINIDUMP_MODULE.MiscRecord">
            <summary>A MINIDUMP_LOCATION_DESCRIPTOR structure that specifies the miscellaneous record of the module.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.MINIDUMP_MODULE.Reserved0">
            <summary>Reserved for future use.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.MINIDUMP_MODULE.Reserved1">
            <summary>Reserved for future use.</summary>
        </member>
        <member name="T:Vanara.PInvoke.DbgHelp.MINIDUMP_MODULE_CALLBACK">
            <summary>Contains module information for the MiniDumpCallback function when the callback type is ModuleCallback.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.MINIDUMP_MODULE_CALLBACK.FullPath">
            <summary>The fully qualified path of the module executable.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.MINIDUMP_MODULE_CALLBACK.BaseOfImage">
            <summary>The base address of the module executable image in memory.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.MINIDUMP_MODULE_CALLBACK.SizeOfImage">
            <summary>The size of the module executable image in memory, in bytes.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.MINIDUMP_MODULE_CALLBACK.CheckSum">
            <summary>The checksum value of the module executable image.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.MINIDUMP_MODULE_CALLBACK.TimeDateStamp">
            <summary>The timestamp value of the module executable image, in <c>time_t</c> format.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.MINIDUMP_MODULE_CALLBACK.VersionInfo">
            <summary>A VS_FIXEDFILEINFO structure that specifies the version of the module.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.MINIDUMP_MODULE_CALLBACK.CvRecord">
            <summary>A pointer to a string containing the CodeView record of the module.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.MINIDUMP_MODULE_CALLBACK.SizeOfCvRecord">
            <summary>The size of the Codeview record of the module in the <c>CvRecord</c> member, in bytes.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.MINIDUMP_MODULE_CALLBACK.MiscRecord">
            <summary>A pointer to a string that specifies the miscellaneous record of the module.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.MINIDUMP_MODULE_CALLBACK.SizeOfMiscRecord">
            <summary>The size of the miscellaneous record of the module in the <c>MiscRecord</c> member, in bytes.</summary>
        </member>
        <member name="T:Vanara.PInvoke.DbgHelp.MINIDUMP_MODULE_LIST">
            <summary>Contains a list of modules.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.MINIDUMP_MODULE_LIST.NumberOfModules">
            <summary>The number of structures in the <c>Modules</c> array.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.MINIDUMP_MODULE_LIST.Modules">
            <summary>An array of MINIDUMP_MODULE structures.</summary>
        </member>
        <member name="T:Vanara.PInvoke.DbgHelp.MINIDUMP_READ_MEMORY_FAILURE_CALLBACK">
            <summary>
            Contains information about a failed memory read operation. This structure is used by the MiniDumpCallbackfunction when the
            callback type is ReadMemoryFailureCallback.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.MINIDUMP_READ_MEMORY_FAILURE_CALLBACK.Offset">
            <summary>The offset of the address for the failed memory read operation.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.MINIDUMP_READ_MEMORY_FAILURE_CALLBACK.Bytes">
            <summary>The size of the failed memory read operation, in bytes.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.MINIDUMP_READ_MEMORY_FAILURE_CALLBACK.FailureStatus">
            <summary>The resulting error code from the failed memory read operation.</summary>
        </member>
        <member name="T:Vanara.PInvoke.DbgHelp.MINIDUMP_STRING">
            <summary>Describes a string.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.MINIDUMP_STRING.Length">
            <summary>
            The size of the string in the <c>Buffer</c> member, in bytes. This size does not include the null-terminating character.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.MINIDUMP_STRING.Buffer">
            <summary>The null-terminated string.</summary>
        </member>
        <member name="T:Vanara.PInvoke.DbgHelp.MINIDUMP_SYSTEM_INFO">
            <summary>Contains processor and operating system information.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.MINIDUMP_SYSTEM_INFO.ProcessorArchitecture">
            <summary>
            <para>The system's processor architecture. <see cref="T:Vanara.PInvoke.Kernel32.SYSTEM_INFO"/> This member can be one of the following values.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>PROCESSOR_ARCHITECTURE_AMD64 9</term>
            <term>x64 (AMD or Intel)</term>
            </item>
            <item>
            <term>PROCESSOR_ARCHITECTURE_ARM 5</term>
            <term>ARM</term>
            </item>
            <item>
            <term>PROCESSOR_ARCHITECTURE_IA64 6</term>
            <term>Intel Itanium</term>
            </item>
            <item>
            <term>PROCESSOR_ARCHITECTURE_INTEL 0</term>
            <term>x86</term>
            </item>
            <item>
            <term>PROCESSOR_ARCHITECTURE_UNKNOWN 0xffff</term>
            <term>Unknown processor.</term>
            </item>
            </list>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.MINIDUMP_SYSTEM_INFO.ProcessorLevel">
            <summary>
            <para>The system's architecture-dependent processor level.</para>
            <para>
            If <c>ProcessorArchitecture</c> is <c>PROCESSOR_ARCHITECTURE_INTEL</c>, <c>ProcessorLevel</c> can be one of the following values.
            </para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>3</term>
            <term>Intel 80386</term>
            </item>
            <item>
            <term>4</term>
            <term>Intel 80486</term>
            </item>
            <item>
            <term>5</term>
            <term>Intel Pentium</term>
            </item>
            <item>
            <term>6</term>
            <term>Intel Pentium Pro or Pentium II</term>
            </item>
            </list>
            <para>If <c>ProcessorArchitecture</c> is <c>PROCESSOR_ARCHITECTURE_IA64</c>, <c>ProcessorLevel</c> is set to 1.</para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.MINIDUMP_SYSTEM_INFO.ProcessorRevision">
            <summary>
            <para>The architecture-dependent processor revision.</para>
            <list type="table">
            <listheader>
            <term>Processor</term>
            <term>Value</term>
            </listheader>
            <item>
            <term>Intel 80386 or 80486</term>
            <term>
            A value of the form xxyz. If xx is equal to 0xFF, y - 0xA is the model number, and z is the stepping identifier. For
            example, an Intel 80486-D0 system returns 0xFFD0. If xx is not equal to 0xFF, xx + 'A' is the stepping letter and yz is the
            minor stepping.
            </term>
            </item>
            <item>
            <term>Intel Pentium, Cyrix, or NextGen 586</term>
            <term>
            A value of the form xxyy, where xx is the model number and yy is the stepping. Display this value of 0x0201 as follows:
            Model xx, Stepping yy
            </term>
            </item>
            </list>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.MINIDUMP_SYSTEM_INFO.NumberOfProcessors">
            <summary>The number of processors in the system.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.MINIDUMP_SYSTEM_INFO.ProductType">
            <summary>
            <para>Any additional information about the system. This member can be one of the following values.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>VER_NT_DOMAIN_CONTROLLER 0x0000002</term>
            <term>The system is a domain controller.</term>
            </item>
            <item>
            <term>VER_NT_SERVER 0x0000003</term>
            <term>The system is a server.</term>
            </item>
            <item>
            <term>VER_NT_WORKSTATION 0x0000001</term>
            <term>The system is running Windows XP, Windows Vista, Windows 7, or Windows 8.</term>
            </item>
            </list>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.MINIDUMP_SYSTEM_INFO.MajorVersion">
            <summary>The major version number of the operating system. This member can be 4, 5, or 6.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.MINIDUMP_SYSTEM_INFO.MinorVersion">
            <summary>The minor version number of the operating system.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.MINIDUMP_SYSTEM_INFO.BuildNumber">
            <summary>The build number of the operating system.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.MINIDUMP_SYSTEM_INFO.PlatformId">
            <summary>
            <para>The operating system platform. This member can be one of the following values.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>VER_PLATFORM_WIN32s 0</term>
            <term>Not supported</term>
            </item>
            <item>
            <term>VER_PLATFORM_WIN32_WINDOWS 1</term>
            <term>Not supported.</term>
            </item>
            <item>
            <term>VER_PLATFORM_WIN32_NT 2</term>
            <term>The operating system platform is Windows.</term>
            </item>
            </list>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.MINIDUMP_SYSTEM_INFO.CSDVersionRva">
            <summary>
            An RVA (from the beginning of the dump) to a MINIDUMP_STRING that describes the latest Service Pack installed on the system.
            If no Service Pack has been installed, the string is empty.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.MINIDUMP_SYSTEM_INFO.SuiteMask">
            <summary>
            <para>
            The bit flags that identify the product suites available on the system. This member can be a combination of the following values.
            </para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>VER_SUITE_BACKOFFICE 0x00000004</term>
            <term>Microsoft BackOffice components are installed.</term>
            </item>
            <item>
            <term>VER_SUITE_BLADE 0x00000400</term>
            <term>Windows Server 2003, Web Edition is installed.</term>
            </item>
            <item>
            <term>VER_SUITE_COMPUTE_SERVER 0x00004000</term>
            <term>Windows Server 2003, Compute Cluster Edition is installed.</term>
            </item>
            <item>
            <term>VER_SUITE_DATACENTER 0x00000080</term>
            <term>Windows Server 2008 R2 Datacenter, Windows Server 2008 Datacenter, or Windows Server 2003, Datacenter Edition is installed.</term>
            </item>
            <item>
            <term>VER_SUITE_ENTERPRISE 0x00000002</term>
            <term>Windows Server 2008 R2 Enterprise, Windows Server 2008 Enterprise, or Windows Server 2003, Enterprise Edition is installed.</term>
            </item>
            <item>
            <term>VER_SUITE_EMBEDDEDNT 0x00000040</term>
            <term>Windows Embedded is installed.</term>
            </item>
            <item>
            <term>VER_SUITE_PERSONAL 0x00000200</term>
            <term>Windows XP Home Edition is installed.</term>
            </item>
            <item>
            <term>VER_SUITE_SINGLEUSERTS 0x00000100</term>
            <term>
            Remote Desktop is supported, but only one interactive session is supported. This value is set unless the system is running
            in application server mode.
            </term>
            </item>
            <item>
            <term>VER_SUITE_SMALLBUSINESS 0x00000001</term>
            <term>
            Microsoft Small Business Server was once installed on the system, but may have been upgraded to another version of Windows.
            </term>
            </item>
            <item>
            <term>VER_SUITE_SMALLBUSINESS_RESTRICTED 0x00000020</term>
            <term>Microsoft Small Business Server is installed with the restrictive client license in force.</term>
            </item>
            <item>
            <term>VER_SUITE_STORAGE_SERVER 0x00002000</term>
            <term>Windows Storage Server is installed.</term>
            </item>
            <item>
            <term>VER_SUITE_TERMINAL 0x00000010</term>
            <term>
            Terminal Services is installed. This value is always set. If VER_SUITE_TERMINAL is set but VER_SUITE_SINGLEUSERTS is not
            set, the system is running in application server mode.
            </term>
            </item>
            </list>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.MINIDUMP_SYSTEM_INFO.Reserved2">
            <summary>This member is reserved for future use.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.MINIDUMP_SYSTEM_INFO.Cpu">
            <summary>
            <para>X86CpuInfo</para>
            <para>The CPU information obtained from the CPUID instruction. This structure is supported only for x86 computers.</para>
            <para>VendorId</para>
            <para>CPUID subfunction 0. The array elements are as follows:</para>
            <para>VersionInformation</para>
            <para>CPUID subfunction 1. Value of EAX.</para>
            <para>FeatureInformation</para>
            <para>CPUID subfunction 1. Value of EDX.</para>
            <para>AMDExtendedCpuFeatures</para>
            <para>CPUID subfunction 80000001. Value of EBX. This member is supported only if the vendor is "AuthenticAMD".</para>
            <para>OtherCpuInfo</para>
            <para>Other CPU information. This structure is supported only for non-x86 computers.</para>
            <para>ProcessorFeatures</para>
            <para>For a list of possible values, see the IsProcessorFeaturePresent function.</para>
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.DbgHelp.MINIDUMP_THREAD">
            <summary>Contains information for a specific thread.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.MINIDUMP_THREAD.ThreadId">
            <summary>The identifier of the thread.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.MINIDUMP_THREAD.SuspendCount">
            <summary>
            The suspend count for the thread. If the suspend count is greater than zero, the thread is suspended; otherwise, the thread
            is not suspended. The maximum value is MAXIMUM_SUSPEND_COUNT.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.MINIDUMP_THREAD.PriorityClass">
            <summary>The priority class of the thread. See Scheduling Priorities.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.MINIDUMP_THREAD.Priority">
            <summary>The priority level of the thread.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.MINIDUMP_THREAD.Teb">
            <summary>The thread environment block.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.MINIDUMP_THREAD.Stack">
            <summary>A MINIDUMP_MEMORY_DESCRIPTOR structure.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.MINIDUMP_THREAD.ThreadContext">
            <summary>A MINIDUMP_LOCATION_DESCRIPTOR structure.</summary>
        </member>
        <member name="T:Vanara.PInvoke.DbgHelp.MINIDUMP_THREAD_CALLBACK">
            <summary>Contains thread information for the MiniDumpCallback function when the callback type is ThreadCallback.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.MINIDUMP_THREAD_CALLBACK.ThreadId">
            <summary>The identifier of the thread.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.MINIDUMP_THREAD_CALLBACK.ThreadHandle">
            <summary>A handle to the thread</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.MINIDUMP_THREAD_CALLBACK.Pad">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.MINIDUMP_THREAD_CALLBACK.Context">
            <summary>A CONTEXT structure that contains the processor-specific data.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.MINIDUMP_THREAD_CALLBACK.SizeOfContext">
            <summary>The size of the returned processor-specific data in the <c>Context</c> member, in bytes.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.MINIDUMP_THREAD_CALLBACK.StackBase">
            <summary>The base address of the thread stack.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.MINIDUMP_THREAD_CALLBACK.StackEnd">
            <summary>The ending address of the thread stack.</summary>
        </member>
        <member name="T:Vanara.PInvoke.DbgHelp.MINIDUMP_THREAD_EX">
            <summary>Contains extended information for a specific thread.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.MINIDUMP_THREAD_EX.ThreadId">
            <summary>The identifier of the thread.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.MINIDUMP_THREAD_EX.SuspendCount">
            <summary>
            The suspend count for the thread. If the suspend count is greater than zero, the thread is suspended; otherwise, the thread
            is not suspended. The maximum value is MAXIMUM_SUSPEND_COUNT.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.MINIDUMP_THREAD_EX.PriorityClass">
            <summary>The priority class of the thread. See Scheduling Priorities.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.MINIDUMP_THREAD_EX.Priority">
            <summary>The priority level of the thread.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.MINIDUMP_THREAD_EX.Teb">
            <summary>The thread environment block.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.MINIDUMP_THREAD_EX.Stack">
            <summary>A MINIDUMP_MEMORY_DESCRIPTOR structure.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.MINIDUMP_THREAD_EX.ThreadContext">
            <summary>A MINIDUMP_LOCATION_DESCRIPTOR structure.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.MINIDUMP_THREAD_EX.BackingStore">
            <summary><c>Intel Itanium:</c> The backing store for the thread.</summary>
        </member>
        <member name="T:Vanara.PInvoke.DbgHelp.MINIDUMP_THREAD_EX_CALLBACK">
            <summary>Contains extended thread information for the MiniDumpCallback function when the callback type is ThreadExCallback.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.MINIDUMP_THREAD_EX_CALLBACK.ThreadId">
            <summary>The identifier of the thread.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.MINIDUMP_THREAD_EX_CALLBACK.ThreadHandle">
            <summary>A handle to the thread</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.MINIDUMP_THREAD_EX_CALLBACK.Pad">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.MINIDUMP_THREAD_EX_CALLBACK.Context">
            <summary>A CONTEXT structure that contains the processor-specific data.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.MINIDUMP_THREAD_EX_CALLBACK.SizeOfContext">
            <summary>The size of the returned processor-specific data in the <c>Context</c> member, in bytes.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.MINIDUMP_THREAD_EX_CALLBACK.StackBase">
            <summary>The base address of the thread stack.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.MINIDUMP_THREAD_EX_CALLBACK.StackEnd">
            <summary>The ending address of the thread stack.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.MINIDUMP_THREAD_EX_CALLBACK.BackingStoreBase">
            <summary><c>Intel Itanium:</c> The base address of the thread backing store.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.MINIDUMP_THREAD_EX_CALLBACK.BackingStoreEnd">
            <summary><c>Intel Itanium:</c> The ending address of the thread backing store.</summary>
        </member>
        <member name="T:Vanara.PInvoke.DbgHelp.MINIDUMP_THREAD_EX_LIST">
            <summary>Contains a list of threads.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.MINIDUMP_THREAD_EX_LIST.NumberOfThreads">
            <summary>The number of structures in the <c>Threads</c> array.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.MINIDUMP_THREAD_EX_LIST.Threads">
            <summary>An array of MINIDUMP_THREAD_EX structures.</summary>
        </member>
        <member name="T:Vanara.PInvoke.DbgHelp.MINIDUMP_THREAD_INFO">
            <summary>Contains thread state information.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.MINIDUMP_THREAD_INFO.ThreadId">
            <summary>The identifier of the thread.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.MINIDUMP_THREAD_INFO.DumpFlags">
            <summary>
            <para>The flags that indicate the thread state. This member can be 0 or one of the following values.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>MINIDUMP_THREAD_INFO_ERROR_THREAD 0x00000001</term>
            <term>A placeholder thread due to an error accessing the thread. No thread information exists beyond the thread identifier.</term>
            </item>
            <item>
            <term>MINIDUMP_THREAD_INFO_EXITED_THREAD 0x00000004</term>
            <term>The thread has exited (not running any code) at the time of the dump.</term>
            </item>
            <item>
            <term>MINIDUMP_THREAD_INFO_INVALID_CONTEXT 0x00000010</term>
            <term>Thread context could not be retrieved.</term>
            </item>
            <item>
            <term>MINIDUMP_THREAD_INFO_INVALID_INFO 0x00000008</term>
            <term>Thread information could not be retrieved.</term>
            </item>
            <item>
            <term>MINIDUMP_THREAD_INFO_INVALID_TEB 0x00000020</term>
            <term>TEB information could not be retrieved.</term>
            </item>
            <item>
            <term>MINIDUMP_THREAD_INFO_WRITING_THREAD 0x00000002</term>
            <term>This is the thread that called MiniDumpWriteDump.</term>
            </item>
            </list>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.MINIDUMP_THREAD_INFO.DumpError">
            <summary>An <c>HRESULT</c> value that indicates the dump status.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.MINIDUMP_THREAD_INFO.ExitStatus">
            <summary>The thread termination status code.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.MINIDUMP_THREAD_INFO.CreateTime">
            <summary>The time when the thread was created, in 100-nanosecond intervals since January 1, 1601 (UTC).</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.MINIDUMP_THREAD_INFO.ExitTime">
            <summary>The time when the thread exited, in 100-nanosecond intervals since January 1, 1601 (UTC).</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.MINIDUMP_THREAD_INFO.KernelTime">
            <summary>The time executed in kernel mode, in 100-nanosecond intervals.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.MINIDUMP_THREAD_INFO.UserTime">
            <summary>The time executed in user mode, in 100-nanosecond intervals.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.MINIDUMP_THREAD_INFO.StartAddress">
            <summary>The starting address of the thread.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.MINIDUMP_THREAD_INFO.Affinity">
            <summary>The processor affinity mask.</summary>
        </member>
        <member name="T:Vanara.PInvoke.DbgHelp.MINIDUMP_THREAD_INFO_LIST">
            <summary>Contains a list of threads.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.MINIDUMP_THREAD_INFO_LIST.SizeOfHeader">
            <summary>
            The size of the header data for the stream, in bytes. This is generally
            <code>sizeof(MINIDUMP_THREAD_INFO_LIST)</code>
            .
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.MINIDUMP_THREAD_INFO_LIST.SizeOfEntry">
            <summary>
            The size of each entry following the header, in bytes. This is generally
            <code>sizeof(MINIDUMP_THREAD_INFO)</code>
            .
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.MINIDUMP_THREAD_INFO_LIST.NumberOfEntries">
            <summary>
            The number of entries in the stream. These are generally MINIDUMP_THREAD_INFO structures. The entries follow the header.
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.DbgHelp.MINIDUMP_THREAD_LIST">
            <summary>Contains a list of threads.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.MINIDUMP_THREAD_LIST.NumberOfThreads">
            <summary>The number of structures in the <c>Threads</c> array.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.MINIDUMP_THREAD_LIST.Threads">
            <summary>An array of MINIDUMP_THREAD structures.</summary>
        </member>
        <member name="T:Vanara.PInvoke.DbgHelp.MINIDUMP_UNLOADED_MODULE">
            <summary>
            Contains information about a module that has been unloaded. This information can help diagnose problems calling code that is no
            longer loaded.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.MINIDUMP_UNLOADED_MODULE.BaseOfImage">
            <summary>The base address of the module executable image in memory.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.MINIDUMP_UNLOADED_MODULE.SizeOfImage">
            <summary>The size of the module executable image in memory, in bytes.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.MINIDUMP_UNLOADED_MODULE.CheckSum">
            <summary>The checksum value of the module executable image.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.MINIDUMP_UNLOADED_MODULE.TimeDateStamp">
            <summary>The timestamp value of the module executable image, in <c>time_t</c> format.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.MINIDUMP_UNLOADED_MODULE.ModuleNameRva">
            <summary>An RVA to a MINIDUMP_STRING structure that specifies the name of the module.</summary>
        </member>
        <member name="T:Vanara.PInvoke.DbgHelp.MINIDUMP_UNLOADED_MODULE_LIST">
            <summary>Contains a list of unloaded modules.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.MINIDUMP_UNLOADED_MODULE_LIST.SizeOfHeader">
            <summary>
            The size of the header data for the stream, in bytes. This is generally
            <code>sizeof(MINIDUMP_UNLOADED_MODULE_LIST)</code>
            .
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.MINIDUMP_UNLOADED_MODULE_LIST.SizeOfEntry">
            <summary>
            The size of each entry following the header, in bytes. This is generally
            <code>sizeof(MINIDUMP_UNLOADED_MODULE)</code>
            .
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.MINIDUMP_UNLOADED_MODULE_LIST.NumberOfEntries">
            <summary>
            The number of entries in the stream. These are generally MINIDUMP_UNLOADED_MODULE structures. The entries follow the header.
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.DbgHelp.MINIDUMP_USER_STREAM">
            <summary>Contains user-defined information stored in a data stream.</summary>
            <remarks>In this context, a data stream refers to a block of data within a minidump file.</remarks>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.MINIDUMP_USER_STREAM.Type">
            <summary>The type of data stream. For more information, see MINIDUMP_STREAM_TYPE.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.MINIDUMP_USER_STREAM.BufferSize">
            <summary>The size of the user-defined data stream buffer, in bytes.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.MINIDUMP_USER_STREAM.Buffer">
            <summary>A pointer to a buffer that contains the user-defined data stream.</summary>
        </member>
        <member name="T:Vanara.PInvoke.DbgHelp.MINIDUMP_USER_STREAM_INFORMATION">
            <summary>Contains a list of user data streams used by the MiniDumpWriteDump function.</summary>
            <remarks>In this context, a data stream refers to a block of data within a minidump file.</remarks>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.MINIDUMP_USER_STREAM_INFORMATION.UserStreamCount">
            <summary>The number of user streams.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.MINIDUMP_USER_STREAM_INFORMATION.UserStreamArray">
            <summary>An array of MINIDUMP_USER_STREAM structures.</summary>
        </member>
        <member name="T:Vanara.PInvoke.DbgHelp.LIST_ENTRY">
            <summary>A <c>LIST_ENTRY</c> structure describes an entry in a doubly linked list or serves as the header for such a list.</summary>
            <remarks>
            <para>A <c>LIST_ENTRY</c> structure that describes the list head must have been initialized by calling InitializeListHead.</para>
            <para>
            A driver can access the <c>Flink</c> or <c>Blink</c> members of a <c>LIST_ENTRY</c>, but the members must only be updated by the
            system routines supplied for this purpose.
            </para>
            <para>
            For more information about how to use <c>LIST_ENTRY</c> structures to implement a doubly linked list, see Singly and Doubly
            Linked Lists.
            </para>
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.LIST_ENTRY.Flink">
            <summary>
            <para>
            For a <c>LIST_ENTRY</c> structure that serves as a list entry, the <c>Flink</c> member points to the next entry in the list
            or to the list header if there is no next entry in the list.
            </para>
            <para>
            For a <c>LIST_ENTRY</c> structure that serves as the list header, the <c>Flink</c> member points to the first entry in the
            list or to the LIST_ENTRY structure itself if the list is empty.
            </para>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.LIST_ENTRY.Blink">
            <summary>
            <para>
            For a <c>LIST_ENTRY</c> structure that serves as a list entry, the <c>Blink</c> member points to the previous entry in the
            list or to the list header if there is no previous entry in the list.
            </para>
            <para>
            For a <c>LIST_ENTRY</c> structure that serves as the list header, the <c>Blink</c> member points to the last entry in the
            list or to the <c>LIST_ENTRY</c> structure itself if the list is empty.
            </para>
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.DbgHelp.IMAGE_DEBUG_TYPE">
            <summary>The format of the debugging information. This member can be one of the following values.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGE_DEBUG_TYPE.IMAGE_DEBUG_TYPE_UNKNOWN">
            <summary>Unknown value, ignored by all tools.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGE_DEBUG_TYPE.IMAGE_DEBUG_TYPE_COFF">
            <summary>
            COFF debugging information (line numbers, symbol table, and string table). This type of debugging information is also
            pointed to by fields in the file headers.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGE_DEBUG_TYPE.IMAGE_DEBUG_TYPE_CODEVIEW">
            <summary>CodeView debugging information. The format of the data block is described by the CodeView 4.0 specification.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGE_DEBUG_TYPE.IMAGE_DEBUG_TYPE_FPO">
            <summary>
            Frame pointer omission (FPO) information. This information tells the debugger how to interpret nonstandard stack frames,
            which use the EBP register for a purpose other than as a frame pointer.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGE_DEBUG_TYPE.IMAGE_DEBUG_TYPE_MISC">
            <summary>Miscellaneous information.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGE_DEBUG_TYPE.IMAGE_DEBUG_TYPE_EXCEPTION">
            <summary>Exception information.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGE_DEBUG_TYPE.IMAGE_DEBUG_TYPE_FIXUP">
            <summary>Fixup information.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGE_DEBUG_TYPE.IMAGE_DEBUG_TYPE_BORLAND">
            <summary>Borland debugging information.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGE_DEBUG_TYPE.IMAGE_DEBUG_TYPE_OMAP_TO_SRC">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGE_DEBUG_TYPE.IMAGE_DEBUG_TYPE_OMAP_FROM_SRC">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGE_DEBUG_TYPE.IMAGE_DEBUG_TYPE_RESERVED10">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGE_DEBUG_TYPE.IMAGE_DEBUG_TYPE_CLSID">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGE_DEBUG_TYPE.IMAGE_DEBUG_TYPE_VC_FEATURE">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGE_DEBUG_TYPE.IMAGE_DEBUG_TYPE_POGO">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGE_DEBUG_TYPE.IMAGE_DEBUG_TYPE_ILTCG">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGE_DEBUG_TYPE.IMAGE_DEBUG_TYPE_MPX">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGE_DEBUG_TYPE.IMAGE_DEBUG_TYPE_REPRO">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGE_DEBUG_TYPE.IMAGE_DEBUG_TYPE_EX_DLLCHARACTERISTICS">
            <summary/>
        </member>
        <member name="T:Vanara.PInvoke.DbgHelp.IMAGE_DIRECTORY_ENTRY">
            <summary>The index number of the desired directory entry.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGE_DIRECTORY_ENTRY.MAGE_DIRECTORY_ENTRY_ARCHITECTURE">
            <summary>Architecture-specific data</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGE_DIRECTORY_ENTRY.IMAGE_DIRECTORY_ENTRY_BASERELOC">
            <summary>Base relocation table</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGE_DIRECTORY_ENTRY.IMAGE_DIRECTORY_ENTRY_BOUND_IMPORT">
            <summary>Bound import directory</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGE_DIRECTORY_ENTRY.IMAGE_DIRECTORY_ENTRY_COM_DESCRIPTOR">
            <summary>COM descriptor table</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGE_DIRECTORY_ENTRY.IMAGE_DIRECTORY_ENTRY_DEBUG">
            <summary>Debug directory</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGE_DIRECTORY_ENTRY.IMAGE_DIRECTORY_ENTRY_DELAY_IMPORT">
            <summary>Delay import table</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGE_DIRECTORY_ENTRY.IMAGE_DIRECTORY_ENTRY_EXCEPTION">
            <summary>Exception directory</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGE_DIRECTORY_ENTRY.IMAGE_DIRECTORY_ENTRY_EXPORT">
            <summary>Export directory</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGE_DIRECTORY_ENTRY.IMAGE_DIRECTORY_ENTRY_GLOBALPTR">
            <summary>The relative virtual address of global pointer</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGE_DIRECTORY_ENTRY.IMAGE_DIRECTORY_ENTRY_IAT">
            <summary>Import address table</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGE_DIRECTORY_ENTRY.IMAGE_DIRECTORY_ENTRY_IMPORT">
            <summary>Import directory</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGE_DIRECTORY_ENTRY.IMAGE_DIRECTORY_ENTRY_LOAD_CONFIG">
            <summary>Load configuration directory</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGE_DIRECTORY_ENTRY.IMAGE_DIRECTORY_ENTRY_RESOURCE">
            <summary>Resource directory</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGE_DIRECTORY_ENTRY.IMAGE_DIRECTORY_ENTRY_SECURITY">
            <summary>Security directory</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGE_DIRECTORY_ENTRY.IMAGE_DIRECTORY_ENTRY_TLS">
            <summary>Thread local storage directory</summary>
        </member>
        <member name="T:Vanara.PInvoke.DbgHelp.IMAGE_DLLCHARACTERISTICS">
            <summary>The DLL characteristics of the image.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGE_DLLCHARACTERISTICS.IMAGE_DLLCHARACTERISTICS_DYNAMIC_BASE">
            <summary>The DLL can be relocated at load time.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGE_DLLCHARACTERISTICS.IMAGE_DLLCHARACTERISTICS_FORCE_INTEGRITY">
            <summary>
            Code integrity checks are forced. If you set this flag and a section contains only uninitialized data, set the
            PointerToRawData member of IMAGE_SECTION_HEADER for that section to zero; otherwise, the image will fail to load because the
            digital signature cannot be verified.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGE_DLLCHARACTERISTICS.IMAGE_DLLCHARACTERISTICS_NX_COMPAT">
            <summary>The image is compatible with data execution prevention (DEP).</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGE_DLLCHARACTERISTICS.IMAGE_DLLCHARACTERISTICS_NO_ISOLATION">
            <summary>The image is isolation aware, but should not be isolated.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGE_DLLCHARACTERISTICS.IMAGE_DLLCHARACTERISTICS_NO_SEH">
            <summary>The image does not use structured exception handling (SEH). No handlers can be called in this image.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGE_DLLCHARACTERISTICS.IMAGE_DLLCHARACTERISTICS_NO_BIND">
            <summary>Do not bind the image.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGE_DLLCHARACTERISTICS.IMAGE_DLLCHARACTERISTICS_WDM_DRIVER">
            <summary>A WDM driver.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGE_DLLCHARACTERISTICS.IMAGE_DLLCHARACTERISTICS_TERMINAL_SERVER_AWARE">
            <summary>The image is terminal server aware.</summary>
        </member>
        <member name="T:Vanara.PInvoke.DbgHelp.IMAGE_FILE">
            <summary>The characteristics of the image.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGE_FILE.IMAGE_FILE_RELOCS_STRIPPED">
            <summary>
            Relocation information was stripped from the file. The file must be loaded at its preferred base address. If the base
            address is not available, the loader reports an error.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGE_FILE.IMAGE_FILE_EXECUTABLE_IMAGE">
            <summary>The file is executable (there are no unresolved external references).</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGE_FILE.IMAGE_FILE_LINE_NUMS_STRIPPED">
            <summary>COFF line numbers were stripped from the file.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGE_FILE.IMAGE_FILE_LOCAL_SYMS_STRIPPED">
            <summary>COFF symbol table entries were stripped from file.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGE_FILE.IMAGE_FILE_AGGRESIVE_WS_TRIM">
            <summary>Aggressively trim the working set. This value is obsolete.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGE_FILE.IMAGE_FILE_LARGE_ADDRESS_AWARE">
            <summary>The application can handle addresses larger than 2 GB.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGE_FILE.IMAGE_FILE_BYTES_REVERSED_LO">
            <summary>The bytes of the word are reversed. This flag is obsolete.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGE_FILE.IMAGE_FILE_32BIT_MACHINE">
            <summary>The computer supports 32-bit words.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGE_FILE.IMAGE_FILE_DEBUG_STRIPPED">
            <summary>Debugging information was removed and stored separately in another file.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGE_FILE.IMAGE_FILE_REMOVABLE_RUN_FROM_SWAP">
            <summary>If the image is on removable media, copy it to and run it from the swap file.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGE_FILE.IMAGE_FILE_NET_RUN_FROM_SWAP">
            <summary>If the image is on the network, copy it to and run it from the swap file.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGE_FILE.IMAGE_FILE_SYSTEM">
            <summary>The image is a system file.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGE_FILE.IMAGE_FILE_DLL">
            <summary>The image is a DLL file. While it is an executable file, it cannot be run directly.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGE_FILE.IMAGE_FILE_UP_SYSTEM_ONLY">
            <summary>The file should be run only on a uniprocessor computer.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGE_FILE.IMAGE_FILE_BYTES_REVERSED_HI">
            <summary>The bytes of the word are reversed. This flag is obsolete.</summary>
        </member>
        <member name="T:Vanara.PInvoke.DbgHelp.FPO_DATA">
            <summary>Represents the stack frame layout for a function on an x86 computer when frame pointer omission (FPO) optimization is used. The structure is used to locate the base of the call frame.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.FPO_DATA.ulOffStart">
            <summary>The offset of the first byte of the function code.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.FPO_DATA.cbProcSize">
            <summary>The number of bytes in the function.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.FPO_DATA.cdwLocals">
            <summary>The number of local variables.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.FPO_DATA.cdwParams">
            <summary>The size of the parameters, in <c>DWORD</c>s.</summary>
        </member>
        <member name="P:Vanara.PInvoke.DbgHelp.FPO_DATA.cbProlog">
            <summary>The number of bytes in the function prolog code.</summary>
        </member>
        <member name="P:Vanara.PInvoke.DbgHelp.FPO_DATA.cbRegs">
            <summary>The number of registers saved.</summary>
        </member>
        <member name="P:Vanara.PInvoke.DbgHelp.FPO_DATA.fHasSEH">
            <summary>A variable that indicates whether the function uses structured exception handling.</summary>
        </member>
        <member name="P:Vanara.PInvoke.DbgHelp.FPO_DATA.fUseBP">
            <summary>A variable that indicates whether the EBP register has been allocated.</summary>
        </member>
        <member name="P:Vanara.PInvoke.DbgHelp.FPO_DATA.reserved">
            <summary>Reserved for future use.</summary>
        </member>
        <member name="P:Vanara.PInvoke.DbgHelp.FPO_DATA.cbFrame">
            <summary>
              <para>A variable that indicates the frame type.</para>
              <list type="table">
                <listheader>
                  <term>Type</term>
                  <term>Meaning</term>
                </listheader>
                <item>
                  <term>FRAME_FPO 0</term>
                  <term>FPO frame</term>
                </item>
                <item>
                  <term>FRAME_NONFPO 3</term>
                  <term>Non-FPO frame</term>
                </item>
                <item>
                  <term>FRAME_TRAP 1</term>
                  <term>Trap frame</term>
                </item>
                <item>
                  <term>FRAME_TSS 2</term>
                  <term>TSS frame</term>
                </item>
              </list>
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.DbgHelp.IMAGE_RUNTIME_FUNCTION_ENTRY">
            <summary>Represents an entry in the function table on 64-bit Windows.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGE_RUNTIME_FUNCTION_ENTRY.BeginAddress">
            <summary>The address of the start of the function.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGE_RUNTIME_FUNCTION_ENTRY.EndAddress">
            <summary>The address of the end of the function.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGE_RUNTIME_FUNCTION_ENTRY.UnwindInfoAddress">
            <summary>The address of the unwind information for the function.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGE_RUNTIME_FUNCTION_ENTRY.UnwindData">
            <summary />
        </member>
        <member name="T:Vanara.PInvoke.DbgHelp.IMAGE_FILE_MACHINE">
            <summary>
            The architecture type of the computer. An image file can only be run on the specified computer or a system that emulates the
            specified computer.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGE_FILE_MACHINE.IMAGE_FILE_MACHINE_AXP64">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGE_FILE_MACHINE.IMAGE_FILE_MACHINE_UNKNOWN">
            <summary>Unknown</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGE_FILE_MACHINE.IMAGE_FILE_MACHINE_TARGET_HOST">
            <summary>Useful for indicating we want to interact with the host and not a WoW guest.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGE_FILE_MACHINE.IMAGE_FILE_MACHINE_I386">
            <summary>Intel 386.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGE_FILE_MACHINE.IMAGE_FILE_MACHINE_R3000">
            <summary>MIPS little-endian, 0x160 big-endian</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGE_FILE_MACHINE.IMAGE_FILE_MACHINE_R4000">
            <summary>MIPS little-endian</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGE_FILE_MACHINE.IMAGE_FILE_MACHINE_R10000">
            <summary>MIPS little-endian</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGE_FILE_MACHINE.IMAGE_FILE_MACHINE_WCEMIPSV2">
            <summary>MIPS little-endian WCE v2</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGE_FILE_MACHINE.IMAGE_FILE_MACHINE_ALPHA">
            <summary>Alpha_AXP</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGE_FILE_MACHINE.IMAGE_FILE_MACHINE_SH3">
            <summary>SH3 little-endian</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGE_FILE_MACHINE.IMAGE_FILE_MACHINE_SH3DSP">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGE_FILE_MACHINE.IMAGE_FILE_MACHINE_SH3E">
            <summary>SH3E little-endian</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGE_FILE_MACHINE.IMAGE_FILE_MACHINE_SH4">
            <summary>SH4 little-endian</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGE_FILE_MACHINE.IMAGE_FILE_MACHINE_SH5">
            <summary>SH5</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGE_FILE_MACHINE.IMAGE_FILE_MACHINE_ARM">
            <summary>ARM Little-Endian</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGE_FILE_MACHINE.IMAGE_FILE_MACHINE_THUMB">
            <summary>ARM Thumb/Thumb-2 Little-Endian</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGE_FILE_MACHINE.IMAGE_FILE_MACHINE_ARMNT">
            <summary>ARM Thumb-2 Little-Endian</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGE_FILE_MACHINE.IMAGE_FILE_MACHINE_AM33">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGE_FILE_MACHINE.IMAGE_FILE_MACHINE_POWERPC">
            <summary>IBM PowerPC Little-Endian</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGE_FILE_MACHINE.IMAGE_FILE_MACHINE_POWERPCFP">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGE_FILE_MACHINE.IMAGE_FILE_MACHINE_IA64">
            <summary>Intel 64</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGE_FILE_MACHINE.IMAGE_FILE_MACHINE_MIPS16">
            <summary>MIPS</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGE_FILE_MACHINE.IMAGE_FILE_MACHINE_ALPHA64">
            <summary>ALPHA64</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGE_FILE_MACHINE.IMAGE_FILE_MACHINE_MIPSFPU">
            <summary>MIPS</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGE_FILE_MACHINE.IMAGE_FILE_MACHINE_MIPSFPU16">
            <summary>MIPS</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGE_FILE_MACHINE.IMAGE_FILE_MACHINE_TRICORE">
            <summary>Infineon</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGE_FILE_MACHINE.IMAGE_FILE_MACHINE_CEF">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGE_FILE_MACHINE.IMAGE_FILE_MACHINE_EBC">
            <summary>EFI Byte Code</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGE_FILE_MACHINE.IMAGE_FILE_MACHINE_AMD64">
            <summary>AMD64 (K8)</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGE_FILE_MACHINE.IMAGE_FILE_MACHINE_M32R">
            <summary>M32R little-endian</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGE_FILE_MACHINE.IMAGE_FILE_MACHINE_ARM64">
            <summary>ARM64 Little-Endian</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGE_FILE_MACHINE.IMAGE_FILE_MACHINE_CEE">
            <summary/>
        </member>
        <member name="T:Vanara.PInvoke.DbgHelp.IMAGE_OPTIONAL_MAGIC">
            <summary>The state of the image file.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGE_OPTIONAL_MAGIC.IMAGE_NT_OPTIONAL_HDR32_MAGIC">
            <summary>The file is an executable image.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGE_OPTIONAL_MAGIC.IMAGE_NT_OPTIONAL_HDR64_MAGIC">
            <summary>The file is an executable image.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGE_OPTIONAL_MAGIC.IMAGE_ROM_OPTIONAL_HDR_MAGIC">
            <summary>The file is a ROM image.</summary>
        </member>
        <member name="T:Vanara.PInvoke.DbgHelp.IMAGE_SCN">
            <summary>The characteristics of the image.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGE_SCN.IMAGE_SCN_TYPE_NO_PAD">
            <summary>The section should not be padded to the next boundary. This flag is obsolete and is replaced by IMAGE_SCN_ALIGN_1BYTES.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGE_SCN.IMAGE_SCN_CNT_CODE">
            <summary>The section contains executable code.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGE_SCN.IMAGE_SCN_CNT_INITIALIZED_DATA">
            <summary>The section contains initialized data.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGE_SCN.IMAGE_SCN_CNT_UNINITIALIZED_DATA">
            <summary>The section contains uninitialized data.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGE_SCN.IMAGE_SCN_LNK_OTHER">
            <summary>Reserved.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGE_SCN.IMAGE_SCN_LNK_INFO">
            <summary>The section contains comments or other information. This is valid only for object files.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGE_SCN.IMAGE_SCN_LNK_REMOVE">
            <summary>The section will not become part of the image. This is valid only for object files.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGE_SCN.IMAGE_SCN_LNK_COMDAT">
            <summary>The section contains COMDAT data. This is valid only for object files.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGE_SCN.IMAGE_SCN_NO_DEFER_SPEC_EXC">
            <summary>Reset speculative exceptions handling bits in the TLB entries for this section.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGE_SCN.IMAGE_SCN_GPREL">
            <summary>The section contains data referenced through the global pointer.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGE_SCN.IMAGE_SCN_MEM_PURGEABLE">
            <summary>Reserved.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGE_SCN.IMAGE_SCN_MEM_LOCKED">
            <summary>Reserved.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGE_SCN.IMAGE_SCN_MEM_PRELOAD">
            <summary>Reserved.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGE_SCN.IMAGE_SCN_ALIGN_1BYTES">
            <summary>Align data on a 1-byte boundary. This is valid only for object files.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGE_SCN.IMAGE_SCN_ALIGN_2BYTES">
            <summary>Align data on a 2-byte boundary. This is valid only for object files.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGE_SCN.IMAGE_SCN_ALIGN_4BYTES">
            <summary>Align data on a 4-byte boundary. This is valid only for object files.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGE_SCN.IMAGE_SCN_ALIGN_8BYTES">
            <summary>Align data on a 8-byte boundary. This is valid only for object files.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGE_SCN.IMAGE_SCN_ALIGN_16BYTES">
            <summary>Align data on a 16-byte boundary. This is valid only for object files.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGE_SCN.IMAGE_SCN_ALIGN_32BYTES">
            <summary>Align data on a 32-byte boundary. This is valid only for object files.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGE_SCN.IMAGE_SCN_ALIGN_64BYTES">
            <summary>Align data on a 64-byte boundary. This is valid only for object files.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGE_SCN.IMAGE_SCN_ALIGN_128BYTES">
            <summary>Align data on a 128-byte boundary. This is valid only for object files.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGE_SCN.IMAGE_SCN_ALIGN_256BYTES">
            <summary>Align data on a 256-byte boundary. This is valid only for object files.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGE_SCN.IMAGE_SCN_ALIGN_512BYTES">
            <summary>Align data on a 512-byte boundary. This is valid only for object files.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGE_SCN.IMAGE_SCN_ALIGN_1024BYTES">
            <summary>Align data on a 1024-byte boundary. This is valid only for object files.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGE_SCN.IMAGE_SCN_ALIGN_2048BYTES">
            <summary>Align data on a 2048-byte boundary. This is valid only for object files.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGE_SCN.IMAGE_SCN_ALIGN_4096BYTES">
            <summary>Align data on a 4096-byte boundary. This is valid only for object files.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGE_SCN.IMAGE_SCN_ALIGN_8192BYTES">
            <summary>Align data on a 8192-byte boundary. This is valid only for object files.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGE_SCN.IMAGE_SCN_LNK_NRELOC_OVFL">
            <summary>
            The section contains extended relocations. The count of relocations for the section exceeds the 16 bits that is reserved for
            it in the section header. If the NumberOfRelocations field in the section header is 0xffff, the actual relocation count is
            stored in the VirtualAddress field of the first relocation. It is an error if IMAGE_SCN_LNK_NRELOC_OVFL is set and there are
            fewer than 0xffff relocations in the section.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGE_SCN.IMAGE_SCN_MEM_DISCARDABLE">
            <summary>The section can be discarded as needed.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGE_SCN.IMAGE_SCN_MEM_NOT_CACHED">
            <summary>The section cannot be cached.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGE_SCN.IMAGE_SCN_MEM_NOT_PAGED">
            <summary>The section cannot be paged.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGE_SCN.IMAGE_SCN_MEM_SHARED">
            <summary>The section can be shared in memory.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGE_SCN.IMAGE_SCN_MEM_EXECUTE">
            <summary>The section can be executed as code.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGE_SCN.IMAGE_SCN_MEM_READ">
            <summary>The section can be read.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGE_SCN.IMAGE_SCN_MEM_WRITE">
            <summary>The section can be written to.</summary>
        </member>
        <member name="T:Vanara.PInvoke.DbgHelp.IMAGE_SUBSYSTEM">
            <summary>The subsystem required to run this image.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGE_SUBSYSTEM.IMAGE_SUBSYSTEM_UNKNOWN">
            <summary>Unknown subsystem.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGE_SUBSYSTEM.IMAGE_SUBSYSTEM_NATIVE">
            <summary>No subsystem required (device drivers and native system processes).</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGE_SUBSYSTEM.IMAGE_SUBSYSTEM_WINDOWS_GUI">
            <summary>Windows graphical user interface (GUI) subsystem.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGE_SUBSYSTEM.IMAGE_SUBSYSTEM_WINDOWS_CUI">
            <summary>Windows character-mode user interface (CUI) subsystem.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGE_SUBSYSTEM.IMAGE_SUBSYSTEM_OS2_CUI">
            <summary>OS/2 CUI subsystem.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGE_SUBSYSTEM.IMAGE_SUBSYSTEM_POSIX_CUI">
            <summary>POSIX CUI subsystem.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGE_SUBSYSTEM.IMAGE_SUBSYSTEM_WINDOWS_CE_GUI">
            <summary>Windows CE system.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGE_SUBSYSTEM.IMAGE_SUBSYSTEM_EFI_APPLICATION">
            <summary>Extensible Firmware Interface (EFI) application.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGE_SUBSYSTEM.IMAGE_SUBSYSTEM_EFI_BOOT_SERVICE_DRIVER">
            <summary>EFI driver with boot services.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGE_SUBSYSTEM.IMAGE_SUBSYSTEM_EFI_RUNTIME_DRIVER">
            <summary>EFI driver with run-time services.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGE_SUBSYSTEM.IMAGE_SUBSYSTEM_EFI_ROM">
            <summary>EFI ROM image.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGE_SUBSYSTEM.IMAGE_SUBSYSTEM_XBOX">
            <summary>Xbox system.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGE_SUBSYSTEM.IMAGE_SUBSYSTEM_WINDOWS_BOOT_APPLICATION">
            <summary>Boot application.</summary>
        </member>
        <member name="T:Vanara.PInvoke.DbgHelp.IMAGE_COFF_SYMBOLS_HEADER">
            <summary>Represents the COFF symbols header.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGE_COFF_SYMBOLS_HEADER.NumberOfSymbols">
            <summary>The number of symbols.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGE_COFF_SYMBOLS_HEADER.LvaToFirstSymbol">
            <summary>The virtual address of the first symbol.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGE_COFF_SYMBOLS_HEADER.NumberOfLinenumbers">
            <summary>The number of line-number entries.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGE_COFF_SYMBOLS_HEADER.LvaToFirstLinenumber">
            <summary>The virtual address of the first line-number entry.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGE_COFF_SYMBOLS_HEADER.RvaToFirstByteOfCode">
            <summary>The relative virtual address of the first byte of code.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGE_COFF_SYMBOLS_HEADER.RvaToLastByteOfCode">
            <summary>The relative virtual address of the last byte of code.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGE_COFF_SYMBOLS_HEADER.RvaToFirstByteOfData">
            <summary>The relative virtual address of the first byte of data.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGE_COFF_SYMBOLS_HEADER.RvaToLastByteOfData">
            <summary>The relative virtual address of the last byte of data.</summary>
        </member>
        <member name="T:Vanara.PInvoke.DbgHelp.IMAGE_DATA_DIRECTORY">
            <summary>Represents the data directory.</summary>
            <remarks>
            <para>The following is a list of the data directories. Offsets are relative to the beginning of the optional header.</para>
            <list type="table">
            <listheader>
            <term>Offset (PE/PE32+)</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>96/112</term>
            <term>Export table address and size</term>
            </item>
            <item>
            <term>104/120</term>
            <term>Import table address and size</term>
            </item>
            <item>
            <term>112/128</term>
            <term>Resource table address and size</term>
            </item>
            <item>
            <term>120/136</term>
            <term>Exception table address and size</term>
            </item>
            <item>
            <term>128/144</term>
            <term>Certificate table address and size</term>
            </item>
            <item>
            <term>136/152</term>
            <term>Base relocation table address and size</term>
            </item>
            <item>
            <term>144/160</term>
            <term>Debugging information starting address and size</term>
            </item>
            <item>
            <term>152/168</term>
            <term>Architecture-specific data address and size</term>
            </item>
            <item>
            <term>160/176</term>
            <term>Global pointer register relative virtual address</term>
            </item>
            <item>
            <term>168/184</term>
            <term>Thread local storage (TLS) table address and size</term>
            </item>
            <item>
            <term>176/192</term>
            <term>Load configuration table address and size</term>
            </item>
            <item>
            <term>184/200</term>
            <term>Bound import table address and size</term>
            </item>
            <item>
            <term>192/208</term>
            <term>Import address table address and size</term>
            </item>
            <item>
            <term>200/216</term>
            <term>Delay import descriptor address and size</term>
            </item>
            <item>
            <term>208/224</term>
            <term>The CLR header address and size</term>
            </item>
            <item>
            <term>216/232</term>
            <term>Reserved</term>
            </item>
            </list>
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGE_DATA_DIRECTORY.VirtualAddress">
            <summary>The relative virtual address of the table.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGE_DATA_DIRECTORY.Size">
            <summary>The size of the table, in bytes.</summary>
        </member>
        <member name="T:Vanara.PInvoke.DbgHelp.IMAGE_DEBUG_DIRECTORY">
            <summary>Represents the debug directory format.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGE_DEBUG_DIRECTORY.Characteristics">
            <summary>Reserved.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGE_DEBUG_DIRECTORY.TimeDateStamp">
            <summary>The ime and date the debugging information was created.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGE_DEBUG_DIRECTORY.MajorVersion">
            <summary>The major version number of the debugging information format.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGE_DEBUG_DIRECTORY.MinorVersion">
            <summary>The minor version number of the debugging information format.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGE_DEBUG_DIRECTORY.Type">
            <summary>
            <para>The format of the debugging information. This member can be one of the following values.</para>
            <list type="table">
            <listheader>
            <term>Constant</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>IMAGE_DEBUG_TYPE_UNKNOWN 0</term>
            <term>Unknown value, ignored by all tools.</term>
            </item>
            <item>
            <term>IMAGE_DEBUG_TYPE_COFF 1</term>
            <term>
            COFF debugging information (line numbers, symbol table, and string table). This type of debugging information is also
            pointed to by fields in the file headers.
            </term>
            </item>
            <item>
            <term>IMAGE_DEBUG_TYPE_CODEVIEW 2</term>
            <term>CodeView debugging information. The format of the data block is described by the CodeView 4.0 specification.</term>
            </item>
            <item>
            <term>IMAGE_DEBUG_TYPE_FPO 3</term>
            <term>
            Frame pointer omission (FPO) information. This information tells the debugger how to interpret nonstandard stack frames,
            which use the EBP register for a purpose other than as a frame pointer.
            </term>
            </item>
            <item>
            <term>IMAGE_DEBUG_TYPE_MISC 4</term>
            <term>Miscellaneous information.</term>
            </item>
            <item>
            <term>IMAGE_DEBUG_TYPE_EXCEPTION 5</term>
            <term>Exception information.</term>
            </item>
            <item>
            <term>IMAGE_DEBUG_TYPE_FIXUP 6</term>
            <term>Fixup information.</term>
            </item>
            <item>
            <term>IMAGE_DEBUG_TYPE_BORLAND 9</term>
            <term>Borland debugging information.</term>
            </item>
            </list>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGE_DEBUG_DIRECTORY.SizeOfData">
            <summary>The size of the debugging information, in bytes. This value does not include the debug directory itself.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGE_DEBUG_DIRECTORY.AddressOfRawData">
            <summary>The address of the debugging information when the image is loaded, relative to the image base.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGE_DEBUG_DIRECTORY.PointerToRawData">
            <summary>A file pointer to the debugging information.</summary>
        </member>
        <member name="T:Vanara.PInvoke.DbgHelp.IMAGE_EXPORT_DIRECTORY">
            <summary>Undocumented.</summary>
        </member>
        <member name="T:Vanara.PInvoke.DbgHelp.IMAGE_FILE_HEADER">
            <summary>Represents the COFF header format.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGE_FILE_HEADER.Machine">
            <summary>
            <para>
            The architecture type of the computer. An image file can only be run on the specified computer or a system that emulates the
            specified computer. This member can be one of the following values.
            </para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>IMAGE_FILE_MACHINE_I386 0x014c</term>
            <term>x86</term>
            </item>
            <item>
            <term>IMAGE_FILE_MACHINE_IA64 0x0200</term>
            <term>Intel Itanium</term>
            </item>
            <item>
            <term>IMAGE_FILE_MACHINE_AMD64 0x8664</term>
            <term>x64</term>
            </item>
            </list>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGE_FILE_HEADER.NumberOfSections">
            <summary>
            The number of sections. This indicates the size of the section table, which immediately follows the headers. Note that the
            Windows loader limits the number of sections to 96.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGE_FILE_HEADER.TimeDateStamp">
            <summary>
            The low 32 bits of the time stamp of the image. This represents the date and time the image was created by the linker. The
            value is represented in the number of seconds elapsed since midnight (00:00:00), January 1, 1970, Universal Coordinated
            Time, according to the system clock.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGE_FILE_HEADER.PointerToSymbolTable">
            <summary>The offset of the symbol table, in bytes, or zero if no COFF symbol table exists.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGE_FILE_HEADER.NumberOfSymbols">
            <summary>The number of symbols in the symbol table.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGE_FILE_HEADER.SizeOfOptionalHeader">
            <summary>The size of the optional header, in bytes. This value should be 0 for object files.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGE_FILE_HEADER.Characteristics">
            <summary>
            <para>The characteristics of the image. This member can be one or more of the following values.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>IMAGE_FILE_RELOCS_STRIPPED 0x0001</term>
            <term>
            Relocation information was stripped from the file. The file must be loaded at its preferred base address. If the base
            address is not available, the loader reports an error.
            </term>
            </item>
            <item>
            <term>IMAGE_FILE_EXECUTABLE_IMAGE 0x0002</term>
            <term>The file is executable (there are no unresolved external references).</term>
            </item>
            <item>
            <term>IMAGE_FILE_LINE_NUMS_STRIPPED 0x0004</term>
            <term>COFF line numbers were stripped from the file.</term>
            </item>
            <item>
            <term>IMAGE_FILE_LOCAL_SYMS_STRIPPED 0x0008</term>
            <term>COFF symbol table entries were stripped from file.</term>
            </item>
            <item>
            <term>IMAGE_FILE_AGGRESIVE_WS_TRIM 0x0010</term>
            <term>Aggressively trim the working set. This value is obsolete.</term>
            </item>
            <item>
            <term>IMAGE_FILE_LARGE_ADDRESS_AWARE 0x0020</term>
            <term>The application can handle addresses larger than 2 GB.</term>
            </item>
            <item>
            <term>IMAGE_FILE_BYTES_REVERSED_LO 0x0080</term>
            <term>The bytes of the word are reversed. This flag is obsolete.</term>
            </item>
            <item>
            <term>IMAGE_FILE_32BIT_MACHINE 0x0100</term>
            <term>The computer supports 32-bit words.</term>
            </item>
            <item>
            <term>IMAGE_FILE_DEBUG_STRIPPED 0x0200</term>
            <term>Debugging information was removed and stored separately in another file.</term>
            </item>
            <item>
            <term>IMAGE_FILE_REMOVABLE_RUN_FROM_SWAP 0x0400</term>
            <term>If the image is on removable media, copy it to and run it from the swap file.</term>
            </item>
            <item>
            <term>IMAGE_FILE_NET_RUN_FROM_SWAP 0x0800</term>
            <term>If the image is on the network, copy it to and run it from the swap file.</term>
            </item>
            <item>
            <term>IMAGE_FILE_SYSTEM 0x1000</term>
            <term>The image is a system file.</term>
            </item>
            <item>
            <term>IMAGE_FILE_DLL 0x2000</term>
            <term>The image is a DLL file. While it is an executable file, it cannot be run directly.</term>
            </item>
            <item>
            <term>IMAGE_FILE_UP_SYSTEM_ONLY 0x4000</term>
            <term>The file should be run only on a uniprocessor computer.</term>
            </item>
            <item>
            <term>IMAGE_FILE_BYTES_REVERSED_HI 0x8000</term>
            <term>The bytes of the word are reversed. This flag is obsolete.</term>
            </item>
            </list>
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.DbgHelp.IMAGE_FUNCTION_ENTRY">
            <summary>Represents an entry in the function table.</summary>
            <remarks>
            <para>The following definition exists for 64-bit support.</para>
            <para>
            <code>typedef struct _IMAGE_FUNCTION_ENTRY64 { ULONGLONG StartingAddress; ULONGLONG EndingAddress; union { ULONGLONG EndOfPrologue; ULONGLONG UnwindInfoAddress; }; } IMAGE_FUNCTION_ENTRY64, *PIMAGE_FUNCTION_ENTRY64;</code>
            </para>
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGE_FUNCTION_ENTRY.StartingAddress">
            <summary>The image address of the start of the function.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGE_FUNCTION_ENTRY.EndingAddress">
            <summary>The image address of the end of the function.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGE_FUNCTION_ENTRY.EndOfPrologue">
            <summary>The image address of the end of the prologue code.</summary>
        </member>
        <member name="T:Vanara.PInvoke.DbgHelp.IMAGE_LOAD_CONFIG_CODE_INTEGRITY">
            <summary>Undocumented.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGE_LOAD_CONFIG_CODE_INTEGRITY.Flags">
            <summary>Flags to indicate if CI information is available, etc.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGE_LOAD_CONFIG_CODE_INTEGRITY.Catalog">
            <summary>0xFFFF means not available</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGE_LOAD_CONFIG_CODE_INTEGRITY.CatalogOffset">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGE_LOAD_CONFIG_CODE_INTEGRITY.Reserved">
            <summary>Additional bitmask to be defined later</summary>
        </member>
        <member name="T:Vanara.PInvoke.DbgHelp.IMAGE_LOAD_CONFIG_DIRECTORY32">
            <summary>Contains the load configuration data of an image.</summary>
            <remarks>
            <para>
            If <c>_WIN64</c> is defined, then <c>IMAGE_LOAD_CONFIG_DIRECTORY</c> is defined as <c>IMAGE_LOAD_CONFIG_DIRECTORY64</c>.
            However, if <c>_WIN64</c> is not defined, then <c>IMAGE_LOAD_CONFIG_DIRECTORY</c> is defined as <c>IMAGE_LOAD_CONFIG_DIRECTORY32</c>.
            </para>
            <para>
            <code>typedef struct { DWORD Size; DWORD TimeDateStamp; WORD MajorVersion; WORD MinorVersion; DWORD GlobalFlagsClear; DWORD GlobalFlagsSet; DWORD CriticalSectionDefaultTimeout; DWORD DeCommitFreeBlockThreshold; DWORD DeCommitTotalFreeThreshold; DWORD LockPrefixTable; // VA DWORD MaximumAllocationSize; DWORD VirtualMemoryThreshold; DWORD ProcessHeapFlags; DWORD ProcessAffinityMask; WORD CSDVersion; WORD Reserved1; DWORD EditList; // VA DWORD SecurityCookie; // VA DWORD SEHandlerTable; // VA DWORD SEHandlerCount; } IMAGE_LOAD_CONFIG_DIRECTORY32, *PIMAGE_LOAD_CONFIG_DIRECTORY32;</code>
            </para>
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGE_LOAD_CONFIG_DIRECTORY32.Size">
            <summary>The size of the structure. For Windows XP, the size must be specified as 64 for x86 images.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGE_LOAD_CONFIG_DIRECTORY32.TimeDateStamp">
            <summary>
            The date and time stamp value. The value is represented in the number of seconds elapsed since midnight (00:00:00), January
            1, 1970, Universal Coordinated Time, according to the system clock. The time stamp can be printed using the C run-time (CRT)
            function <c>ctime</c>.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGE_LOAD_CONFIG_DIRECTORY32.MajorVersion">
            <summary>The major version number.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGE_LOAD_CONFIG_DIRECTORY32.MinorVersion">
            <summary>The minor version number.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGE_LOAD_CONFIG_DIRECTORY32.GlobalFlagsClear">
            <summary>The global flags that control system behavior. For more information, see Gflags.exe.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGE_LOAD_CONFIG_DIRECTORY32.GlobalFlagsSet">
            <summary>The global flags that control system behavior. For more information, see Gflags.exe.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGE_LOAD_CONFIG_DIRECTORY32.CriticalSectionDefaultTimeout">
            <summary>The critical section default time-out value.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGE_LOAD_CONFIG_DIRECTORY32.DeCommitFreeBlockThreshold">
            <summary>
            The size of the minimum block that must be freed before it is freed (de-committed), in bytes. This value is advisory.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGE_LOAD_CONFIG_DIRECTORY32.DeCommitTotalFreeThreshold">
            <summary>
            The size of the minimum total memory that must be freed in the process heap before it is freed (de-committed), in bytes.
            This value is advisory.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGE_LOAD_CONFIG_DIRECTORY32.LockPrefixTable">
            <summary>
            The VA of a list of addresses where the LOCK prefix is used. These will be replaced by NOP on single-processor systems. This
            member is available only for x86.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGE_LOAD_CONFIG_DIRECTORY32.MaximumAllocationSize">
            <summary>The maximum allocation size, in bytes. This member is obsolete and is used only for debugging purposes.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGE_LOAD_CONFIG_DIRECTORY32.VirtualMemoryThreshold">
            <summary>The maximum block size that can be allocated from heap segments, in bytes.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGE_LOAD_CONFIG_DIRECTORY32.ProcessHeapFlags">
            <summary>The process heap flags. For more information, see HeapCreate.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGE_LOAD_CONFIG_DIRECTORY32.ProcessAffinityMask">
            <summary>
            The process affinity mask. For more information, see GetProcessAffinityMask. This member is available only for .exe files.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGE_LOAD_CONFIG_DIRECTORY32.CSDVersion">
            <summary>The service pack version.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGE_LOAD_CONFIG_DIRECTORY32.DependentLoadFlags">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGE_LOAD_CONFIG_DIRECTORY32.EditList">
            <summary>Reserved for use by the system.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGE_LOAD_CONFIG_DIRECTORY32.SecurityCookie">
            <summary>A pointer to a cookie that is used by Visual C++ or GS implementation.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGE_LOAD_CONFIG_DIRECTORY32.SEHandlerTable">
            <summary>
            The VA of the sorted table of RVAs of each valid, unique handler in the image. This member is available only for x86.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGE_LOAD_CONFIG_DIRECTORY32.SEHandlerCount">
            <summary>The count of unique handlers in the table. This member is available only for x86.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGE_LOAD_CONFIG_DIRECTORY32.GuardCFCheckFunctionPointer">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGE_LOAD_CONFIG_DIRECTORY32.GuardCFDispatchFunctionPointer">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGE_LOAD_CONFIG_DIRECTORY32.GuardCFFunctionTable">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGE_LOAD_CONFIG_DIRECTORY32.GuardCFFunctionCount">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGE_LOAD_CONFIG_DIRECTORY32.GuardFlags">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGE_LOAD_CONFIG_DIRECTORY32.CodeIntegrity">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGE_LOAD_CONFIG_DIRECTORY32.GuardAddressTakenIatEntryTable">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGE_LOAD_CONFIG_DIRECTORY32.GuardAddressTakenIatEntryCount">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGE_LOAD_CONFIG_DIRECTORY32.GuardLongJumpTargetTable">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGE_LOAD_CONFIG_DIRECTORY32.GuardLongJumpTargetCount">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGE_LOAD_CONFIG_DIRECTORY32.DynamicValueRelocTable">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGE_LOAD_CONFIG_DIRECTORY32.CHPEMetadataPointer">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGE_LOAD_CONFIG_DIRECTORY32.GuardRFFailureRoutine">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGE_LOAD_CONFIG_DIRECTORY32.GuardRFFailureRoutineFunctionPointer">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGE_LOAD_CONFIG_DIRECTORY32.DynamicValueRelocTableOffset">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGE_LOAD_CONFIG_DIRECTORY32.DynamicValueRelocTableSection">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGE_LOAD_CONFIG_DIRECTORY32.Reserved2">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGE_LOAD_CONFIG_DIRECTORY32.GuardRFVerifyStackPointerFunctionPointer">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGE_LOAD_CONFIG_DIRECTORY32.HotPatchTableOffset">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGE_LOAD_CONFIG_DIRECTORY32.Reserved3">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGE_LOAD_CONFIG_DIRECTORY32.EnclaveConfigurationPointer">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGE_LOAD_CONFIG_DIRECTORY32.VolatileMetadataPointer">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGE_LOAD_CONFIG_DIRECTORY32.GuardEHContinuationTable">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGE_LOAD_CONFIG_DIRECTORY32.GuardEHContinuationCount">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGE_LOAD_CONFIG_DIRECTORY32.GuardXFGCheckFunctionPointer">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGE_LOAD_CONFIG_DIRECTORY32.GuardXFGDispatchFunctionPointer">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGE_LOAD_CONFIG_DIRECTORY32.GuardXFGTableDispatchFunctionPointer">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGE_LOAD_CONFIG_DIRECTORY32.CastGuardOsDeterminedFailureMode">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGE_LOAD_CONFIG_DIRECTORY32.GuardMemcpyFunctionPointer">
            <summary/>
        </member>
        <member name="T:Vanara.PInvoke.DbgHelp.IMAGE_LOAD_CONFIG_DIRECTORY64">
            <summary>Contains the load configuration data of an image.</summary>
            <remarks>
            <para>
            If <c>_WIN64</c> is defined, then <c>IMAGE_LOAD_CONFIG_DIRECTORY</c> is defined as <c>IMAGE_LOAD_CONFIG_DIRECTORY64</c>.
            However, if <c>_WIN64</c> is not defined, then <c>IMAGE_LOAD_CONFIG_DIRECTORY</c> is defined as <c>IMAGE_LOAD_CONFIG_DIRECTORY32</c>.
            </para>
            <para>
            <code>typedef struct { DWORD Size; DWORD TimeDateStamp; WORD MajorVersion; WORD MinorVersion; DWORD GlobalFlagsClear; DWORD GlobalFlagsSet; DWORD CriticalSectionDefaultTimeout; DWORD DeCommitFreeBlockThreshold; DWORD DeCommitTotalFreeThreshold; DWORD LockPrefixTable; // VA DWORD MaximumAllocationSize; DWORD VirtualMemoryThreshold; DWORD ProcessHeapFlags; DWORD ProcessAffinityMask; WORD CSDVersion; WORD Reserved1; DWORD EditList; // VA DWORD SecurityCookie; // VA DWORD SEHandlerTable; // VA DWORD SEHandlerCount; } IMAGE_LOAD_CONFIG_DIRECTORY32, *PIMAGE_LOAD_CONFIG_DIRECTORY32;</code>
            </para>
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGE_LOAD_CONFIG_DIRECTORY64.Size">
            <summary>The size of the structure. For Windows XP, the size must be specified as 64 for x86 images.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGE_LOAD_CONFIG_DIRECTORY64.TimeDateStamp">
            <summary>
            The date and time stamp value. The value is represented in the number of seconds elapsed since midnight (00:00:00), January
            1, 1970, Universal Coordinated Time, according to the system clock. The time stamp can be printed using the C run-time (CRT)
            function <c>ctime</c>.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGE_LOAD_CONFIG_DIRECTORY64.MajorVersion">
            <summary>The major version number.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGE_LOAD_CONFIG_DIRECTORY64.MinorVersion">
            <summary>The minor version number.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGE_LOAD_CONFIG_DIRECTORY64.GlobalFlagsClear">
            <summary>The global flags that control system behavior. For more information, see Gflags.exe.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGE_LOAD_CONFIG_DIRECTORY64.GlobalFlagsSet">
            <summary>The global flags that control system behavior. For more information, see Gflags.exe.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGE_LOAD_CONFIG_DIRECTORY64.CriticalSectionDefaultTimeout">
            <summary>The critical section default time-out value.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGE_LOAD_CONFIG_DIRECTORY64.DeCommitFreeBlockThreshold">
            <summary>
            The size of the minimum block that must be freed before it is freed (de-committed), in bytes. This value is advisory.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGE_LOAD_CONFIG_DIRECTORY64.DeCommitTotalFreeThreshold">
            <summary>
            The size of the minimum total memory that must be freed in the process heap before it is freed (de-committed), in bytes.
            This value is advisory.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGE_LOAD_CONFIG_DIRECTORY64.LockPrefixTable">
            <summary>
            The VA of a list of addresses where the LOCK prefix is used. These will be replaced by NOP on single-processor systems. This
            member is available only for x86.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGE_LOAD_CONFIG_DIRECTORY64.MaximumAllocationSize">
            <summary>The maximum allocation size, in bytes. This member is obsolete and is used only for debugging purposes.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGE_LOAD_CONFIG_DIRECTORY64.VirtualMemoryThreshold">
            <summary>The maximum block size that can be allocated from heap segments, in bytes.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGE_LOAD_CONFIG_DIRECTORY64.ProcessAffinityMask">
            <summary>
            The process affinity mask. For more information, see GetProcessAffinityMask. This member is available only for .exe files.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGE_LOAD_CONFIG_DIRECTORY64.ProcessHeapFlags">
            <summary>The process heap flags. For more information, see HeapCreate.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGE_LOAD_CONFIG_DIRECTORY64.CSDVersion">
            <summary>The service pack version.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGE_LOAD_CONFIG_DIRECTORY64.DependentLoadFlags">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGE_LOAD_CONFIG_DIRECTORY64.EditList">
            <summary>Reserved for use by the system.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGE_LOAD_CONFIG_DIRECTORY64.SecurityCookie">
            <summary>A pointer to a cookie that is used by Visual C++ or GS implementation.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGE_LOAD_CONFIG_DIRECTORY64.SEHandlerTable">
            <summary>
            The VA of the sorted table of RVAs of each valid, unique handler in the image. This member is available only for x86.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGE_LOAD_CONFIG_DIRECTORY64.SEHandlerCount">
            <summary>The count of unique handlers in the table. This member is available only for x86.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGE_LOAD_CONFIG_DIRECTORY64.GuardCFCheckFunctionPointer">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGE_LOAD_CONFIG_DIRECTORY64.GuardCFDispatchFunctionPointer">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGE_LOAD_CONFIG_DIRECTORY64.GuardCFFunctionTable">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGE_LOAD_CONFIG_DIRECTORY64.GuardCFFunctionCount">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGE_LOAD_CONFIG_DIRECTORY64.GuardFlags">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGE_LOAD_CONFIG_DIRECTORY64.CodeIntegrity">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGE_LOAD_CONFIG_DIRECTORY64.GuardAddressTakenIatEntryTable">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGE_LOAD_CONFIG_DIRECTORY64.GuardAddressTakenIatEntryCount">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGE_LOAD_CONFIG_DIRECTORY64.GuardLongJumpTargetTable">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGE_LOAD_CONFIG_DIRECTORY64.GuardLongJumpTargetCount">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGE_LOAD_CONFIG_DIRECTORY64.DynamicValueRelocTable">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGE_LOAD_CONFIG_DIRECTORY64.CHPEMetadataPointer">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGE_LOAD_CONFIG_DIRECTORY64.GuardRFFailureRoutine">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGE_LOAD_CONFIG_DIRECTORY64.GuardRFFailureRoutineFunctionPointer">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGE_LOAD_CONFIG_DIRECTORY64.DynamicValueRelocTableOffset">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGE_LOAD_CONFIG_DIRECTORY64.DynamicValueRelocTableSection">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGE_LOAD_CONFIG_DIRECTORY64.Reserved2">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGE_LOAD_CONFIG_DIRECTORY64.GuardRFVerifyStackPointerFunctionPointer">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGE_LOAD_CONFIG_DIRECTORY64.HotPatchTableOffset">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGE_LOAD_CONFIG_DIRECTORY64.Reserved3">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGE_LOAD_CONFIG_DIRECTORY64.EnclaveConfigurationPointer">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGE_LOAD_CONFIG_DIRECTORY64.VolatileMetadataPointer">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGE_LOAD_CONFIG_DIRECTORY64.GuardEHContinuationTable">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGE_LOAD_CONFIG_DIRECTORY64.GuardEHContinuationCount">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGE_LOAD_CONFIG_DIRECTORY64.GuardXFGCheckFunctionPointer">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGE_LOAD_CONFIG_DIRECTORY64.GuardXFGDispatchFunctionPointer">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGE_LOAD_CONFIG_DIRECTORY64.GuardXFGTableDispatchFunctionPointer">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGE_LOAD_CONFIG_DIRECTORY64.CastGuardOsDeterminedFailureMode">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGE_LOAD_CONFIG_DIRECTORY64.GuardMemcpyFunctionPointer">
            <summary/>
        </member>
        <member name="T:Vanara.PInvoke.DbgHelp.IMAGE_NT_HEADERS">
            <summary>Represents the PE header format.</summary>
            <remarks>
            <para>
            The actual structure in WinNT.h is named <c>IMAGE_NT_HEADERS32</c> and <c>IMAGE_NT_HEADERS</c> is defined as
            <c>IMAGE_NT_HEADERS32</c>. However, if _WIN64 is defined, then <c>IMAGE_NT_HEADERS</c> is defined as <c>IMAGE_NT_HEADERS64</c>.
            </para>
            <para>
            <code>typedef struct _IMAGE_NT_HEADERS64 { DWORD Signature; IMAGE_FILE_HEADER FileHeader; IMAGE_OPTIONAL_HEADER64 OptionalHeader; } IMAGE_NT_HEADERS64, *PIMAGE_NT_HEADERS64;</code>
            </para>
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGE_NT_HEADERS.Signature">
            <summary>A 4-byte signature identifying the file as a PE image. The bytes are "PE\0\0".</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGE_NT_HEADERS.FileHeader">
            <summary>An IMAGE_FILE_HEADER structure that specifies the file header.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGE_NT_HEADERS.OptionalHeader">
            <summary>An IMAGE_OPTIONAL_HEADER structure that specifies the optional file header.</summary>
        </member>
        <member name="T:Vanara.PInvoke.DbgHelp.IMAGE_OPTIONAL_HEADER">
            <summary>Represents the optional header format.</summary>
            <remarks>
            <para>The number of directories is not fixed. Check the <c>NumberOfRvaAndSizes</c> member before looking for a specific directory.</para>
            <para>
            The actual structure in WinNT.h is named <c>IMAGE_OPTIONAL_HEADER32</c> and <c>IMAGE_OPTIONAL_HEADER</c> is defined as
            <c>IMAGE_OPTIONAL_HEADER32</c>. However, if <c>_WIN64</c> is defined, then <c>IMAGE_OPTIONAL_HEADER</c> is defined as <c>IMAGE_OPTIONAL_HEADER64</c>.
            </para>
            <para>
            <code>typedef struct _IMAGE_OPTIONAL_HEADER64 { WORD Magic; BYTE MajorLinkerVersion; BYTE MinorLinkerVersion; DWORD SizeOfCode; DWORD SizeOfInitializedData; DWORD SizeOfUninitializedData; DWORD AddressOfEntryPoint; DWORD BaseOfCode; ULONGLONG ImageBase; DWORD SectionAlignment; DWORD FileAlignment; WORD MajorOperatingSystemVersion; WORD MinorOperatingSystemVersion; WORD MajorImageVersion; WORD MinorImageVersion; WORD MajorSubsystemVersion; WORD MinorSubsystemVersion; DWORD Win32VersionValue; DWORD SizeOfImage; DWORD SizeOfHeaders; DWORD CheckSum; WORD Subsystem; WORD DllCharacteristics; ULONGLONG SizeOfStackReserve; ULONGLONG SizeOfStackCommit; ULONGLONG SizeOfHeapReserve; ULONGLONG SizeOfHeapCommit; DWORD LoaderFlags; DWORD NumberOfRvaAndSizes; IMAGE_DATA_DIRECTORY DataDirectory[IMAGE_NUMBEROF_DIRECTORY_ENTRIES]; } IMAGE_OPTIONAL_HEADER64, *PIMAGE_OPTIONAL_HEADER64;</code>
            </para>
            </remarks>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGE_OPTIONAL_HEADER.Magic">
            <summary>
            <para>The state of the image file. This member can be one of the following values.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>IMAGE_NT_OPTIONAL_HDR_MAGIC</term>
            <term>
            The file is an executable image. This value is defined as IMAGE_NT_OPTIONAL_HDR32_MAGIC in a 32-bit application and as
            IMAGE_NT_OPTIONAL_HDR64_MAGIC in a 64-bit application.
            </term>
            </item>
            <item>
            <term>IMAGE_NT_OPTIONAL_HDR32_MAGIC 0x10b</term>
            <term>The file is an executable image.</term>
            </item>
            <item>
            <term>IMAGE_NT_OPTIONAL_HDR64_MAGIC 0x20b</term>
            <term>The file is an executable image.</term>
            </item>
            <item>
            <term>IMAGE_ROM_OPTIONAL_HDR_MAGIC 0x107</term>
            <term>The file is a ROM image.</term>
            </item>
            </list>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGE_OPTIONAL_HEADER.MajorLinkerVersion">
            <summary>The major version number of the linker.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGE_OPTIONAL_HEADER.MinorLinkerVersion">
            <summary>The minor version number of the linker.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGE_OPTIONAL_HEADER.SizeOfCode">
            <summary>The size of the code section, in bytes, or the sum of all such sections if there are multiple code sections.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGE_OPTIONAL_HEADER.SizeOfInitializedData">
            <summary>
            The size of the initialized data section, in bytes, or the sum of all such sections if there are multiple initialized data sections.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGE_OPTIONAL_HEADER.SizeOfUninitializedData">
            <summary>
            The size of the uninitialized data section, in bytes, or the sum of all such sections if there are multiple uninitialized
            data sections.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGE_OPTIONAL_HEADER.AddressOfEntryPoint">
            <summary>
            A pointer to the entry point function, relative to the image base address. For executable files, this is the starting
            address. For device drivers, this is the address of the initialization function. The entry point function is optional for
            DLLs. When no entry point is present, this member is zero.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGE_OPTIONAL_HEADER.BaseOfCode">
            <summary>A pointer to the beginning of the code section, relative to the image base.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGE_OPTIONAL_HEADER.BaseOfData">
            <summary>A pointer to the beginning of the data section, relative to the image base.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGE_OPTIONAL_HEADER.ImageBase">
            <summary>
            The preferred address of the first byte of the image when it is loaded in memory. This value is a multiple of 64K bytes. The
            default value for DLLs is 0x10000000. The default value for applications is 0x00400000, except on Windows CE where it is 0x00010000.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGE_OPTIONAL_HEADER.SectionAlignment">
            <summary>
            The alignment of sections loaded in memory, in bytes. This value must be greater than or equal to the <c>FileAlignment</c>
            member. The default value is the page size for the system.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGE_OPTIONAL_HEADER.FileAlignment">
            <summary>
            The alignment of the raw data of sections in the image file, in bytes. The value should be a power of 2 between 512 and 64K
            (inclusive). The default is 512. If the <c>SectionAlignment</c> member is less than the system page size, this member must
            be the same as <c>SectionAlignment</c>.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGE_OPTIONAL_HEADER.MajorOperatingSystemVersion">
            <summary>The major version number of the required operating system.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGE_OPTIONAL_HEADER.MinorOperatingSystemVersion">
            <summary>The minor version number of the required operating system.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGE_OPTIONAL_HEADER.MajorImageVersion">
            <summary>The major version number of the image.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGE_OPTIONAL_HEADER.MinorImageVersion">
            <summary>The minor version number of the image.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGE_OPTIONAL_HEADER.MajorSubsystemVersion">
            <summary>The major version number of the subsystem.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGE_OPTIONAL_HEADER.MinorSubsystemVersion">
            <summary>The minor version number of the subsystem.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGE_OPTIONAL_HEADER.Win32VersionValue">
            <summary>This member is reserved and must be 0.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGE_OPTIONAL_HEADER.SizeOfImage">
            <summary>The size of the image, in bytes, including all headers. Must be a multiple of <c>SectionAlignment</c>.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGE_OPTIONAL_HEADER.SizeOfHeaders">
            <summary>
            <para>
            The combined size of the following items, rounded to a multiple of the value specified in the <c>FileAlignment</c> member.
            </para>
            <list type="bullet">
            <item>
            <term><c>e_lfanew</c> member of <c>IMAGE_DOS_HEADER</c></term>
            </item>
            <item>
            <term>4 byte signature</term>
            </item>
            <item>
            <term>size of IMAGE_FILE_HEADER</term>
            </item>
            <item>
            <term>size of optional header</term>
            </item>
            <item>
            <term>size of all section headers</term>
            </item>
            </list>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGE_OPTIONAL_HEADER.CheckSum">
            <summary>
            The image file checksum. The following files are validated at load time: all drivers, any DLL loaded at boot time, and any
            DLL loaded into a critical system process.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGE_OPTIONAL_HEADER.Subsystem">
            <summary>
            <para>The subsystem required to run this image. The following values are defined.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>IMAGE_SUBSYSTEM_UNKNOWN 0</term>
            <term>Unknown subsystem.</term>
            </item>
            <item>
            <term>IMAGE_SUBSYSTEM_NATIVE 1</term>
            <term>No subsystem required (device drivers and native system processes).</term>
            </item>
            <item>
            <term>IMAGE_SUBSYSTEM_WINDOWS_GUI 2</term>
            <term>Windows graphical user interface (GUI) subsystem.</term>
            </item>
            <item>
            <term>IMAGE_SUBSYSTEM_WINDOWS_CUI 3</term>
            <term>Windows character-mode user interface (CUI) subsystem.</term>
            </item>
            <item>
            <term>IMAGE_SUBSYSTEM_OS2_CUI 5</term>
            <term>OS/2 CUI subsystem.</term>
            </item>
            <item>
            <term>IMAGE_SUBSYSTEM_POSIX_CUI 7</term>
            <term>POSIX CUI subsystem.</term>
            </item>
            <item>
            <term>IMAGE_SUBSYSTEM_WINDOWS_CE_GUI 9</term>
            <term>Windows CE system.</term>
            </item>
            <item>
            <term>IMAGE_SUBSYSTEM_EFI_APPLICATION 10</term>
            <term>Extensible Firmware Interface (EFI) application.</term>
            </item>
            <item>
            <term>IMAGE_SUBSYSTEM_EFI_BOOT_SERVICE_DRIVER 11</term>
            <term>EFI driver with boot services.</term>
            </item>
            <item>
            <term>IMAGE_SUBSYSTEM_EFI_RUNTIME_DRIVER 12</term>
            <term>EFI driver with run-time services.</term>
            </item>
            <item>
            <term>IMAGE_SUBSYSTEM_EFI_ROM 13</term>
            <term>EFI ROM image.</term>
            </item>
            <item>
            <term>IMAGE_SUBSYSTEM_XBOX 14</term>
            <term>Xbox system.</term>
            </item>
            <item>
            <term>IMAGE_SUBSYSTEM_WINDOWS_BOOT_APPLICATION 16</term>
            <term>Boot application.</term>
            </item>
            </list>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGE_OPTIONAL_HEADER.DllCharacteristics">
            <summary>
            <para>The DLL characteristics of the image. The following values are defined.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>0x0001</term>
            <term>Reserved.</term>
            </item>
            <item>
            <term>0x0002</term>
            <term>Reserved.</term>
            </item>
            <item>
            <term>0x0004</term>
            <term>Reserved.</term>
            </item>
            <item>
            <term>0x0008</term>
            <term>Reserved.</term>
            </item>
            <item>
            <term>IMAGE_DLLCHARACTERISTICS_DYNAMIC_BASE 0x0040</term>
            <term>The DLL can be relocated at load time.</term>
            </item>
            <item>
            <term>IMAGE_DLLCHARACTERISTICS_FORCE_INTEGRITY 0x0080</term>
            <term>
            Code integrity checks are forced. If you set this flag and a section contains only uninitialized data, set the
            PointerToRawData member of IMAGE_SECTION_HEADER for that section to zero; otherwise, the image will fail to load because the
            digital signature cannot be verified.
            </term>
            </item>
            <item>
            <term>IMAGE_DLLCHARACTERISTICS_NX_COMPAT 0x0100</term>
            <term>The image is compatible with data execution prevention (DEP).</term>
            </item>
            <item>
            <term>IMAGE_DLLCHARACTERISTICS_NO_ISOLATION 0x0200</term>
            <term>The image is isolation aware, but should not be isolated.</term>
            </item>
            <item>
            <term>IMAGE_DLLCHARACTERISTICS_NO_SEH 0x0400</term>
            <term>The image does not use structured exception handling (SEH). No handlers can be called in this image.</term>
            </item>
            <item>
            <term>IMAGE_DLLCHARACTERISTICS_NO_BIND 0x0800</term>
            <term>Do not bind the image.</term>
            </item>
            <item>
            <term>0x1000</term>
            <term>Reserved.</term>
            </item>
            <item>
            <term>IMAGE_DLLCHARACTERISTICS_WDM_DRIVER 0x2000</term>
            <term>A WDM driver.</term>
            </item>
            <item>
            <term>0x4000</term>
            <term>Reserved.</term>
            </item>
            <item>
            <term>IMAGE_DLLCHARACTERISTICS_TERMINAL_SERVER_AWARE 0x8000</term>
            <term>The image is terminal server aware.</term>
            </item>
            </list>
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGE_OPTIONAL_HEADER.SizeOfStackReserve">
            <summary>
            The number of bytes to reserve for the stack. Only the memory specified by the <c>SizeOfStackCommit</c> member is committed
            at load time; the rest is made available one page at a time until this reserve size is reached.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGE_OPTIONAL_HEADER.SizeOfStackCommit">
            <summary>The number of bytes to commit for the stack.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGE_OPTIONAL_HEADER.SizeOfHeapReserve">
            <summary>
            The number of bytes to reserve for the local heap. Only the memory specified by the <c>SizeOfHeapCommit</c> member is
            committed at load time; the rest is made available one page at a time until this reserve size is reached.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGE_OPTIONAL_HEADER.SizeOfHeapCommit">
            <summary>The number of bytes to commit for the local heap.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGE_OPTIONAL_HEADER.LoaderFlags">
            <summary>This member is obsolete.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGE_OPTIONAL_HEADER.NumberOfRvaAndSizes">
            <summary>
            The number of directory entries in the remainder of the optional header. Each entry describes a location and size.
            </summary>
        </member>
        <member name="P:Vanara.PInvoke.DbgHelp.IMAGE_OPTIONAL_HEADER.DataDirectory">
            <summary>
            <para>A pointer to the first IMAGE_DATA_DIRECTORY structure in the data directory.</para>
            <para>The index number of the desired directory entry. This parameter can be one of the following values.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>IMAGE_DIRECTORY_ENTRY_ARCHITECTURE 7</term>
            <term>Architecture-specific data</term>
            </item>
            <item>
            <term>IMAGE_DIRECTORY_ENTRY_BASERELOC 5</term>
            <term>Base relocation table</term>
            </item>
            <item>
            <term>IMAGE_DIRECTORY_ENTRY_BOUND_IMPORT 11</term>
            <term>Bound import directory</term>
            </item>
            <item>
            <term>IMAGE_DIRECTORY_ENTRY_COM_DESCRIPTOR 14</term>
            <term>COM descriptor table</term>
            </item>
            <item>
            <term>IMAGE_DIRECTORY_ENTRY_DEBUG 6</term>
            <term>Debug directory</term>
            </item>
            <item>
            <term>IMAGE_DIRECTORY_ENTRY_DELAY_IMPORT 13</term>
            <term>Delay import table</term>
            </item>
            <item>
            <term>IMAGE_DIRECTORY_ENTRY_EXCEPTION 3</term>
            <term>Exception directory</term>
            </item>
            <item>
            <term>IMAGE_DIRECTORY_ENTRY_EXPORT 0</term>
            <term>Export directory</term>
            </item>
            <item>
            <term>IMAGE_DIRECTORY_ENTRY_GLOBALPTR 8</term>
            <term>The relative virtual address of global pointer</term>
            </item>
            <item>
            <term>IMAGE_DIRECTORY_ENTRY_IAT 12</term>
            <term>Import address table</term>
            </item>
            <item>
            <term>IMAGE_DIRECTORY_ENTRY_IMPORT 1</term>
            <term>Import directory</term>
            </item>
            <item>
            <term>IMAGE_DIRECTORY_ENTRY_LOAD_CONFIG 10</term>
            <term>Load configuration directory</term>
            </item>
            <item>
            <term>IMAGE_DIRECTORY_ENTRY_RESOURCE 2</term>
            <term>Resource directory</term>
            </item>
            <item>
            <term>IMAGE_DIRECTORY_ENTRY_SECURITY 4</term>
            <term>Security directory</term>
            </item>
            <item>
            <term>IMAGE_DIRECTORY_ENTRY_TLS 9</term>
            <term>Thread local storage directory</term>
            </item>
            </list>
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.DbgHelp.IMAGE_SECTION_HEADER">
            <summary>Represents the image section header format.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGE_SECTION_HEADER.Name">
            <summary>
            An 8-byte, null-padded UTF-8 string. There is no terminating null character if the string is exactly eight characters long.
            For longer names, this member contains a forward slash (/) followed by an ASCII representation of a decimal number that is
            an offset into the string table. Executable images do not use a string table and do not support section names longer than
            eight characters.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGE_SECTION_HEADER.Misc">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGE_SECTION_HEADER.VirtualAddress">
            <summary>
            The address of the first byte of the section when loaded into memory, relative to the image base. For object files, this is
            the address of the first byte before relocation is applied.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGE_SECTION_HEADER.SizeOfRawData">
            <summary>
            The size of the initialized data on disk, in bytes. This value must be a multiple of the <c>FileAlignment</c> member of the
            IMAGE_OPTIONAL_HEADER structure. If this value is less than the <c>VirtualSize</c> member, the remainder of the section is
            filled with zeroes. If the section contains only uninitialized data, the member is zero.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGE_SECTION_HEADER.PointerToRawData">
            <summary>
            A file pointer to the first page within the COFF file. This value must be a multiple of the <c>FileAlignment</c> member of
            the IMAGE_OPTIONAL_HEADER structure. If a section contains only uninitialized data, set this member is zero.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGE_SECTION_HEADER.PointerToRelocations">
            <summary>
            A file pointer to the beginning of the relocation entries for the section. If there are no relocations, this value is zero.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGE_SECTION_HEADER.PointerToLinenumbers">
            <summary>
            A file pointer to the beginning of the line-number entries for the section. If there are no COFF line numbers, this value is zero.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGE_SECTION_HEADER.NumberOfRelocations">
            <summary>The number of relocation entries for the section. This value is zero for executable images.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGE_SECTION_HEADER.NumberOfLinenumbers">
            <summary>The number of line-number entries for the section.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGE_SECTION_HEADER.Characteristics">
            <summary>
            <para>The characteristics of the image. The following values are defined.</para>
            <list type="table">
            <listheader>
            <term>Flag</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>0x00000000</term>
            <term>Reserved.</term>
            </item>
            <item>
            <term>0x00000001</term>
            <term>Reserved.</term>
            </item>
            <item>
            <term>0x00000002</term>
            <term>Reserved.</term>
            </item>
            <item>
            <term>0x00000004</term>
            <term>Reserved.</term>
            </item>
            <item>
            <term>IMAGE_SCN_TYPE_NO_PAD 0x00000008</term>
            <term>The section should not be padded to the next boundary. This flag is obsolete and is replaced by IMAGE_SCN_ALIGN_1BYTES.</term>
            </item>
            <item>
            <term>0x00000010</term>
            <term>Reserved.</term>
            </item>
            <item>
            <term>IMAGE_SCN_CNT_CODE 0x00000020</term>
            <term>The section contains executable code.</term>
            </item>
            <item>
            <term>IMAGE_SCN_CNT_INITIALIZED_DATA 0x00000040</term>
            <term>The section contains initialized data.</term>
            </item>
            <item>
            <term>IMAGE_SCN_CNT_UNINITIALIZED_DATA 0x00000080</term>
            <term>The section contains uninitialized data.</term>
            </item>
            <item>
            <term>IMAGE_SCN_LNK_OTHER 0x00000100</term>
            <term>Reserved.</term>
            </item>
            <item>
            <term>IMAGE_SCN_LNK_INFO 0x00000200</term>
            <term>The section contains comments or other information. This is valid only for object files.</term>
            </item>
            <item>
            <term>0x00000400</term>
            <term>Reserved.</term>
            </item>
            <item>
            <term>IMAGE_SCN_LNK_REMOVE 0x00000800</term>
            <term>The section will not become part of the image. This is valid only for object files.</term>
            </item>
            <item>
            <term>IMAGE_SCN_LNK_COMDAT 0x00001000</term>
            <term>The section contains COMDAT data. This is valid only for object files.</term>
            </item>
            <item>
            <term>0x00002000</term>
            <term>Reserved.</term>
            </item>
            <item>
            <term>IMAGE_SCN_NO_DEFER_SPEC_EXC 0x00004000</term>
            <term>Reset speculative exceptions handling bits in the TLB entries for this section.</term>
            </item>
            <item>
            <term>IMAGE_SCN_GPREL 0x00008000</term>
            <term>The section contains data referenced through the global pointer.</term>
            </item>
            <item>
            <term>0x00010000</term>
            <term>Reserved.</term>
            </item>
            <item>
            <term>IMAGE_SCN_MEM_PURGEABLE 0x00020000</term>
            <term>Reserved.</term>
            </item>
            <item>
            <term>IMAGE_SCN_MEM_LOCKED 0x00040000</term>
            <term>Reserved.</term>
            </item>
            <item>
            <term>IMAGE_SCN_MEM_PRELOAD 0x00080000</term>
            <term>Reserved.</term>
            </item>
            <item>
            <term>IMAGE_SCN_ALIGN_1BYTES 0x00100000</term>
            <term>Align data on a 1-byte boundary. This is valid only for object files.</term>
            </item>
            <item>
            <term>IMAGE_SCN_ALIGN_2BYTES 0x00200000</term>
            <term>Align data on a 2-byte boundary. This is valid only for object files.</term>
            </item>
            <item>
            <term>IMAGE_SCN_ALIGN_4BYTES 0x00300000</term>
            <term>Align data on a 4-byte boundary. This is valid only for object files.</term>
            </item>
            <item>
            <term>IMAGE_SCN_ALIGN_8BYTES 0x00400000</term>
            <term>Align data on a 8-byte boundary. This is valid only for object files.</term>
            </item>
            <item>
            <term>IMAGE_SCN_ALIGN_16BYTES 0x00500000</term>
            <term>Align data on a 16-byte boundary. This is valid only for object files.</term>
            </item>
            <item>
            <term>IMAGE_SCN_ALIGN_32BYTES 0x00600000</term>
            <term>Align data on a 32-byte boundary. This is valid only for object files.</term>
            </item>
            <item>
            <term>IMAGE_SCN_ALIGN_64BYTES 0x00700000</term>
            <term>Align data on a 64-byte boundary. This is valid only for object files.</term>
            </item>
            <item>
            <term>IMAGE_SCN_ALIGN_128BYTES 0x00800000</term>
            <term>Align data on a 128-byte boundary. This is valid only for object files.</term>
            </item>
            <item>
            <term>IMAGE_SCN_ALIGN_256BYTES 0x00900000</term>
            <term>Align data on a 256-byte boundary. This is valid only for object files.</term>
            </item>
            <item>
            <term>IMAGE_SCN_ALIGN_512BYTES 0x00A00000</term>
            <term>Align data on a 512-byte boundary. This is valid only for object files.</term>
            </item>
            <item>
            <term>IMAGE_SCN_ALIGN_1024BYTES 0x00B00000</term>
            <term>Align data on a 1024-byte boundary. This is valid only for object files.</term>
            </item>
            <item>
            <term>IMAGE_SCN_ALIGN_2048BYTES 0x00C00000</term>
            <term>Align data on a 2048-byte boundary. This is valid only for object files.</term>
            </item>
            <item>
            <term>IMAGE_SCN_ALIGN_4096BYTES 0x00D00000</term>
            <term>Align data on a 4096-byte boundary. This is valid only for object files.</term>
            </item>
            <item>
            <term>IMAGE_SCN_ALIGN_8192BYTES 0x00E00000</term>
            <term>Align data on a 8192-byte boundary. This is valid only for object files.</term>
            </item>
            <item>
            <term>IMAGE_SCN_LNK_NRELOC_OVFL 0x01000000</term>
            <term>
            The section contains extended relocations. The count of relocations for the section exceeds the 16 bits that is reserved for
            it in the section header. If the NumberOfRelocations field in the section header is 0xffff, the actual relocation count is
            stored in the VirtualAddress field of the first relocation. It is an error if IMAGE_SCN_LNK_NRELOC_OVFL is set and there are
            fewer than 0xffff relocations in the section.
            </term>
            </item>
            <item>
            <term>IMAGE_SCN_MEM_DISCARDABLE 0x02000000</term>
            <term>The section can be discarded as needed.</term>
            </item>
            <item>
            <term>IMAGE_SCN_MEM_NOT_CACHED 0x04000000</term>
            <term>The section cannot be cached.</term>
            </item>
            <item>
            <term>IMAGE_SCN_MEM_NOT_PAGED 0x08000000</term>
            <term>The section cannot be paged.</term>
            </item>
            <item>
            <term>IMAGE_SCN_MEM_SHARED 0x10000000</term>
            <term>The section can be shared in memory.</term>
            </item>
            <item>
            <term>IMAGE_SCN_MEM_EXECUTE 0x20000000</term>
            <term>The section can be executed as code.</term>
            </item>
            <item>
            <term>IMAGE_SCN_MEM_READ 0x40000000</term>
            <term>The section can be read.</term>
            </item>
            <item>
            <term>IMAGE_SCN_MEM_WRITE 0x80000000</term>
            <term>The section can be written to.</term>
            </item>
            </list>
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.DbgHelp.IMAGE_SECTION_HEADER.MISC">
            <summary/>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGE_SECTION_HEADER.MISC.PhysicalAddress">
            <summary>The file address.</summary>
        </member>
        <member name="F:Vanara.PInvoke.DbgHelp.IMAGE_SECTION_HEADER.MISC.VirtualSize">
            <summary>
            The total size of the section when loaded into memory, in bytes. If this value is greater than the <c>SizeOfRawData</c>
            member, the section is filled with zeroes. This field is valid only for executable images and should be set to 0 for
            object files.
            </summary>
        </member>
        <member name="T:Vanara.PInvoke.ImageHlp">
            <summary>Items from the ImageHlp.dll</summary>
        </member>
        <member name="T:Vanara.PInvoke.ImageHlp.DIGEST_FUNCTION">
            <summary>
            <para>An application-defined callback function used by the ImageGetDigestStream function to process data.</para>
            <para>
            The <c>DIGEST_FUNCTION</c> type defines a pointer to this callback function. <c>DigestFunction</c> is a placeholder for the
            application-defined function name.
            </para>
            </summary>
            <param name="refdata">
            A user-supplied handle to the digest. This value is passed as a parameter to the ImageGetDigestStream function.
            </param>
            <param name="pData">The data stream.</param>
            <param name="dwLength">The size of the data stream, in bytes.</param>
            <returns>
            If the function succeeds, the return value should be <c>TRUE</c>. If the function fails, the return value should be <c>FALSE</c>.
            </returns>
            <remarks>
            All ImageHlp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will
            likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more
            than one thread to this function.
            </remarks>
        </member>
        <member name="T:Vanara.PInvoke.ImageHlp.PIMAGEHLP_STATUS_ROUTINE">
            <summary>
            <para>
            An application-defined callback function used with the BindImageEx function. The status routine is called during the process of
            the image binding.
            </para>
            <para>
            The <c>PIMAGEHLP_STATUS_ROUTINE</c> type defines a pointer to this callback function. <c>StatusRoutine</c> is a placeholder for
            the application-defined function name.
            </para>
            </summary>
            <param name="Reason">
            <para>The current status of the bind operation. This parameter can be one of the following values.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>BindOutOfMemory 0</term>
            <term>Out of memory. The Parameter value is the number of bytes in the allocation attempt.</term>
            </item>
            <item>
            <term>BindRvaToVaFailed 1</term>
            <term>The relative virtual address is invalid for the image. The Parameter value is not used.</term>
            </item>
            <item>
            <term>BindNoRoomInImage 2</term>
            <term>No room in the image for new format import table. The Parameter value is not used.</term>
            </item>
            <item>
            <term>BindImportModuleFailed 3</term>
            <term>Module import failed. The Parameter value is not used.</term>
            </item>
            <item>
            <term>BindImportProcedureFailed 4</term>
            <term>Procedure import failed. The Parameter value is the name of the function.</term>
            </item>
            <item>
            <term>BindImportModule 5</term>
            <term>Module import is starting. The Parameter value is not used.</term>
            </item>
            <item>
            <term>BindImportProcedure 6</term>
            <term>Procedure import is starting. The Parameter value is the name of the function.</term>
            </item>
            <item>
            <term>BindForwarder 7</term>
            <term>The Parameter value is the name of the function forwarded.</term>
            </item>
            <item>
            <term>BindForwarderNOT 8</term>
            <term>The Parameter value is the name of the function not forwarded.</term>
            </item>
            <item>
            <term>BindImageModified 9</term>
            <term>Image modified. The Parameter value is not used.</term>
            </item>
            <item>
            <term>BindExpandFileHeaders 10</term>
            <term>File headers expanded. The Parameter value is the number of bytes</term>
            </item>
            <item>
            <term>BindImageComplete 11</term>
            <term>Binding is complete. For more information on the Parameter value, see the following Remarks section.</term>
            </item>
            <item>
            <term>BindMismatchedSymbols 12</term>
            <term>Checksum did not match. The Parameter value is the name of the symbol file.</term>
            </item>
            <item>
            <term>BindSymbolsNotUpdated 13</term>
            <term>Symbol file was not updated. The Parameter value is the name of the symbol file not updated.</term>
            </item>
            </list>
            </param>
            <param name="ImageName">The name of the file to be bound. This value can be a file name, a partial path, or a full path.</param>
            <param name="DllName">The name of the DLL.</param>
            <param name="Va">The computed virtual address.</param>
            <param name="Parameter">
            Any additional status information. This value depends on the value of the Reason parameter. For more information, see the code
            fragment in the following Remarks section.
            </param>
            <returns>
            <para>If the function succeeds, the return value is <c>TRUE</c>.</para>
            <para>If the function fails, the return value is <c>FALSE</c>. To retrieve extended error information, call GetLastError.</para>
            </returns>
            <remarks>
            <para>
            All ImageHlp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will
            likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more
            than one thread to this function.
            </para>
            <para>The following code fragment describes how to use the Va value when the status is BindImageComplete.</para>
            <para>
            <code>case BindImageComplete: if (fVerbose) { fprintf(stderr, "BIND: Details of binding %s\n", ImageName ); NewImports = (PIMAGE_BOUND_IMPORT_DESCRIPTOR)Va; NewImport = NewImports; while (NewImport-&gt;OffsetModuleName) { fprintf( stderr, " Import from %s [%x]", (LPSTR)NewImports + NewImport-&gt;OffsetModuleName, NewImport-&gt;TimeDateStamp ); if (NewImport-&gt;NumberOfModuleForwarderRefs != 0) { fprintf( stderr, " with %u forwarders", NewImport-&gt; NumberOfModuleForwarderRefs ); } fprintf( stderr, "\n" ); NewForwarder = (PIMAGE_BOUND_FORWARDER_REF)(NewImport+1); for (i=0; i&lt;NewImport-&gt;NumberOfModuleForwarderRefs; i++) { fprintf( stderr, " Forward to %s [%x]\n", (LPSTR)NewImports + NewForwarder-&gt;OffsetModuleName, NewForwarder-&gt;TimeDateStamp); NewForwarder += 1; } NewImport = (PIMAGE_BOUND_IMPORT_DESCRIPTOR)NewForwarder; } } break;</code>
            </para>
            </remarks>
        </member>
        <member name="T:Vanara.PInvoke.ImageHlp.BINDOPTS">
            <summary>The bind options for <see cref="M:Vanara.PInvoke.ImageHlp.BindImageEx(Vanara.PInvoke.ImageHlp.BINDOPTS,System.String,System.String,System.String,Vanara.PInvoke.ImageHlp.PIMAGEHLP_STATUS_ROUTINE)"/>.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ImageHlp.BINDOPTS.BIND_ALL_IMAGES">
            <term>Bind all images in the call tree for this file.</term>
        </member>
        <member name="F:Vanara.PInvoke.ImageHlp.BINDOPTS.BIND_CACHE_IMPORT_DLLS">
            <term>
            Do not discard DLL information in the cache between calls. This improves performance when binding a large number of images.
            </term>
        </member>
        <member name="F:Vanara.PInvoke.ImageHlp.BINDOPTS.BIND_NO_BOUND_IMPORTS">
            <term>Do not generate a new import address table.</term>
        </member>
        <member name="F:Vanara.PInvoke.ImageHlp.BINDOPTS.BIND_NO_UPDATE">
            <term>Do not make changes to the file.</term>
        </member>
        <member name="F:Vanara.PInvoke.ImageHlp.BINDOPTS.BIND_REPORT_64BIT_VA">
            <summary/>
        </member>
        <member name="T:Vanara.PInvoke.ImageHlp.CHECKSUM">
            <summary>Return code from <see cref="M:Vanara.PInvoke.ImageHlp.MapFileAndCheckSum(System.String,System.UInt32@,System.UInt32@)"/>.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ImageHlp.CHECKSUM.CHECKSUM_MAPVIEW_FAILURE">
            <summary>Could not map a view of the file.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ImageHlp.CHECKSUM.CHECKSUM_MAP_FAILURE">
            <summary>Could not map the file.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ImageHlp.CHECKSUM.CHECKSUM_OPEN_FAILURE">
            <summary>Could not open the file.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ImageHlp.CHECKSUM.CHECKSUM_SUCCESS">
            <summary>The function succeeded.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ImageHlp.CHECKSUM.CHECKSUM_UNICODE_FAILURE">
            <summary>CHECKSUM_UNICODE_FAILURE 4</summary>
        </member>
        <member name="T:Vanara.PInvoke.ImageHlp.IMAGEHLP_STATUS_REASON">
            <summary>The current status of the bind operation.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ImageHlp.IMAGEHLP_STATUS_REASON.BindOutOfMemory">
            <summary>Out of memory. The Parameter value is the number of bytes in the allocation attempt.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ImageHlp.IMAGEHLP_STATUS_REASON.BindRvaToVaFailed">
            <summary>The relative virtual address is invalid for the image. The Parameter value is not used.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ImageHlp.IMAGEHLP_STATUS_REASON.BindNoRoomInImage">
            <summary>No room in the image for new format import table. The Parameter value is not used.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ImageHlp.IMAGEHLP_STATUS_REASON.BindImportModuleFailed">
            <summary>Module import failed. The Parameter value is not used.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ImageHlp.IMAGEHLP_STATUS_REASON.BindImportProcedureFailed">
            <summary>Procedure import failed. The Parameter value is the name of the function.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ImageHlp.IMAGEHLP_STATUS_REASON.BindImportModule">
            <summary>Module import is starting. The Parameter value is not used.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ImageHlp.IMAGEHLP_STATUS_REASON.BindImportProcedure">
            <summary>Procedure import is starting. The Parameter value is the name of the function.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ImageHlp.IMAGEHLP_STATUS_REASON.BindForwarder">
            <summary>The Parameter value is the name of the function forwarded.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ImageHlp.IMAGEHLP_STATUS_REASON.BindForwarderNOT">
            <summary>The Parameter value is the name of the function not forwarded.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ImageHlp.IMAGEHLP_STATUS_REASON.BindImageModified">
            <summary>Image modified. The Parameter value is not used.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ImageHlp.IMAGEHLP_STATUS_REASON.BindExpandFileHeaders">
            <summary>File headers expanded. The Parameter value is the number of bytes</summary>
        </member>
        <member name="F:Vanara.PInvoke.ImageHlp.IMAGEHLP_STATUS_REASON.BindImageComplete">
            <summary>Binding is complete. For more information on the Parameter value, see the following Remarks section.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ImageHlp.IMAGEHLP_STATUS_REASON.BindMismatchedSymbols">
            <summary>Checksum did not match. The Parameter value is the name of the symbol file.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ImageHlp.IMAGEHLP_STATUS_REASON.BindSymbolsNotUpdated">
            <summary>Symbol file was not updated. The Parameter value is the name of the symbol file not updated.</summary>
        </member>
        <member name="T:Vanara.PInvoke.ImageHlp.SPLITSYM">
            <summary>The information to be split from the image.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ImageHlp.SPLITSYM.SPLITSYM_EXTRACT_ALL">
            <summary>
            Usually, an image with the symbols split off will still contain a MISC debug directory with the name of the symbol file.
            Therefore, the debugger can still find the symbols. Using this flag removes this link. The end result is similar to using
            the -debug:none switch on the Microsoft linker.
            </summary>
        </member>
        <member name="F:Vanara.PInvoke.ImageHlp.SPLITSYM.SPLITSYM_REMOVE_PRIVATE">
            <summary>This strips off the private CodeView symbolic information when generating the symbol file.</summary>
        </member>
        <member name="F:Vanara.PInvoke.ImageHlp.SPLITSYM.SPLITSYM_SYMBOLPATH_IS_SRC">
            <summary>The symbol file path contains an alternate path to locate the .pdb file.</summary>
        </member>
        <member name="M:Vanara.PInvoke.ImageHlp.BindImageEx(Vanara.PInvoke.ImageHlp.BINDOPTS,System.String,System.String,System.String,Vanara.PInvoke.ImageHlp.PIMAGEHLP_STATUS_ROUTINE)">
            <summary>Computes the virtual address of each function that is imported.</summary>
            <param name="Flags">
            <para>The bind options. This parameter can be a combination of the following values.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>BIND_ALL_IMAGES 0x00000004</term>
            <term>Bind all images in the call tree for this file.</term>
            </item>
            <item>
            <term>BIND_CACHE_IMPORT_DLLS 0x00000008</term>
            <term>Do not discard DLL information in the cache between calls. This improves performance when binding a large number of images.</term>
            </item>
            <item>
            <term>BIND_NO_BOUND_IMPORTS 0x00000001</term>
            <term>Do not generate a new import address table.</term>
            </item>
            <item>
            <term>BIND_NO_UPDATE 0x00000002</term>
            <term>Do not make changes to the file.</term>
            </item>
            </list>
            </param>
            <param name="ImageName">The name of the file to be bound. This value can be a file name, a partial path, or a full path.</param>
            <param name="DllPath">The root of the search path to use if the file specified by the ImageName parameter cannot be opened.</param>
            <param name="SymbolPath">The root of the path to search for the file's corresponding symbol file.</param>
            <param name="StatusRoutine">
            A pointer to a status routine. The status routine is called during the progress of the image binding. For more information, see StatusRoutine.
            </param>
            <returns>
            <para>If the function succeeds, the return value is <c>TRUE</c>.</para>
            <para>If the function fails, the return value is <c>FALSE</c>. To retrieve extended error information, call GetLastError.</para>
            </returns>
            <remarks>
            <para>
            The process of binding an image consists of computing the virtual address of each imported function. The computed virtual
            address is then saved in the importing image's Import Address Table (IAT). As a result, the image is loaded much faster,
            particularly if it uses many DLLs, because the system loader does not have to compute the address of each imported function.
            </para>
            <para>If a corresponding symbol file can be located, its time stamp and checksum are updated.</para>
            <para>
            All ImageHlp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will
            likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more
            than one thread to this function.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.ImageHlp.CheckSumMappedFile(System.IntPtr,System.UInt32,System.UInt32@,System.UInt32@)">
            <summary>Computes the checksum of the specified image file.</summary>
            <param name="BaseAddress">The base address of the mapped file. This value is obtained by calling the MapViewOfFile function.</param>
            <param name="FileLength">The size of the file, in bytes.</param>
            <param name="HeaderSum">
            A pointer to a variable that receives the original checksum from the image file, or zero if there is an error.
            </param>
            <param name="CheckSum">A pointer to the variable that receives the computed checksum.</param>
            <returns>
            <para>If the function succeeds, the return value is a pointer to the IMAGE_NT_HEADERS structure contained in the mapped image.</para>
            <para>If the function fails, the return value is <c>NULL</c>. To retrieve extended error information, call GetLastError.</para>
            </returns>
            <remarks>
            <para>
            The <c>CheckSumMappedFile</c> function computes a new checksum for the file and returns it in the CheckSum parameter. This
            function is used by any application that creates or modifies an executable image. Checksums are required for kernel-mode drivers
            and some system DLLs. The linker computes the original checksum at link time, if you use the appropriate linker switch. For more
            details, see your linker documentation.
            </para>
            <para>
            It is recommended that all images have valid checksums. It is the caller's responsibility to place the newly computed checksum
            into the mapped image and update the on-disk image of the file.
            </para>
            <para>
            All ImageHlp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will
            likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more
            than one thread to this function.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.ImageHlp.GetImageConfigInformation(System.IntPtr,Vanara.PInvoke.DbgHelp.IMAGE_LOAD_CONFIG_DIRECTORY32@)">
            <summary>Locates and returns the load configuration data of an image.</summary>
            <param name="LoadedImage">A pointer to a LOADED_IMAGE structure that is returned from a call to MapAndLoad or ImageLoad.</param>
            <param name="ImageConfigInformation">
            A pointer to an IMAGE_LOAD_CONFIG_DIRECTORY64 structure that receives the configuration information.
            </param>
            <returns>
            <para>If the function succeeds, the return value is <c>TRUE</c>.</para>
            <para>If the function fails, the return value is <c>FALSE</c>. To retrieve extended error information, call GetLastError.</para>
            </returns>
            <remarks>
            <para>The SetImageConfigInformation function locates and changes the load configuration data of an image.</para>
            <para>
            All ImageHlp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will
            likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more
            than one thread to this function.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.ImageHlp.GetImageConfigInformation(System.IntPtr,Vanara.PInvoke.DbgHelp.IMAGE_LOAD_CONFIG_DIRECTORY64@)">
            <summary>Locates and returns the load configuration data of an image.</summary>
            <param name="LoadedImage">A pointer to a LOADED_IMAGE structure that is returned from a call to MapAndLoad or ImageLoad.</param>
            <param name="ImageConfigInformation">
            A pointer to an IMAGE_LOAD_CONFIG_DIRECTORY64 structure that receives the configuration information.
            </param>
            <returns>
            <para>If the function succeeds, the return value is <c>TRUE</c>.</para>
            <para>If the function fails, the return value is <c>FALSE</c>. To retrieve extended error information, call GetLastError.</para>
            </returns>
            <remarks>
            <para>The SetImageConfigInformation function locates and changes the load configuration data of an image.</para>
            <para>
            All ImageHlp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will
            likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more
            than one thread to this function.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.ImageHlp.GetImageUnusedHeaderBytes(Vanara.PInvoke.DbgHelp.LOADED_IMAGE@,System.UInt32@)">
            <summary>Retrieves the offset and size of the part of the PE header that is currently unused.</summary>
            <param name="LoadedImage">A pointer to a LOADED_IMAGE structure that is returned from a call to MapAndLoad or ImageLoad.</param>
            <param name="SizeUnusedHeaderBytes">
            A pointer to a variable to receive the size, in bytes, of the part of the image's header which is unused.
            </param>
            <returns>
            <para>If the function succeeds, the return value is the offset from the base address of the first unused header byte.</para>
            <para>If the function fails, the return value is zero. To retrieve extended error information, call GetLastError.</para>
            </returns>
            <remarks>
            All ImageHlp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will
            likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more
            than one thread to this function.
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.ImageHlp.ImageAddCertificate(Vanara.PInvoke.HFILE,System.IntPtr,System.UInt32@)">
            <summary>Adds a certificate to the specified file.</summary>
            <param name="FileHandle">
            A handle to the image file to be modified. This handle must be opened for FILE_READ_DATA and FILE_WRITE_DATA access.
            </param>
            <param name="Certificate">
            A pointer to a <c>WIN_CERTIFICATE</c> header and all associated sections. The <c>Length</c> member in the certificate header
            will be used to determine the length of this buffer.
            </param>
            <param name="Index">A pointer to a variable that receives the index of the newly added certificate.</param>
            <returns>
            <para>If the function succeeds, the return value is <c>TRUE</c>.</para>
            <para>If the function fails, the return value is <c>FALSE</c>. To retrieve extended error information, call GetLastError.</para>
            </returns>
            <remarks>
            <para>The certificate is added at the end of the existing list of certificates and is assigned an index.</para>
            <para>
            All ImageHlp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will
            likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more
            than one thread to this function.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.ImageHlp.ImageEnumerateCertificates(Vanara.PInvoke.HFILE,System.UInt16,System.UInt32@,System.UInt32[],System.UInt32)">
            <summary>Retrieves information about the certificates currently contained in an image file.</summary>
            <param name="FileHandle">A handle to the image file to be examined. This handle must be opened for FILE_READ_DATA access.</param>
            <param name="TypeFilter">
            The certificate section type to be used as a filter when returning certificate information. CERT_SECTION_TYPE_ANY should be
            passed for information on all section types present in the image.
            </param>
            <param name="CertificateCount">
            A pointer to a variable that receives the number of certificates in the image containing sections of the type specified by the
            TypeFilter parameter. If none are found, this parameter is zero.
            </param>
            <param name="Indices">
            Optionally provides a buffer to use to return an array of indices to the certificates containing sections of the specified type.
            No ordering should be assumed for the index values, nor are they guaranteed to be contiguous when CERT_SECTION_TYPE_ANY is queried.
            </param>
            <param name="IndexCount">
            The size of the Indices buffer, in <c>DWORDs</c>. This parameter will be examined whenever Indices is present. If
            CertificateCount is greater than IndexCount, Indices will be filled in with the first IndexCount sections found in the image;
            any others will not be returned.
            </param>
            <returns>
            <para>If the function succeeds, the return value is <c>TRUE</c>.</para>
            <para>If the function fails, the return value is <c>FALSE</c>. To retrieve extended error information, call GetLastError.</para>
            </returns>
            <remarks>
            <para>
            The <c>ImageEnumerateCertificates</c> function returns information about the certificates currently contained in an image file.
            It has filtering capabilities which allow certificates containing sections of any single type (or of any type) to be returned.
            </para>
            <para>
            After the indices of interesting certificates are discovered, they can be passed to the ImageGetCertificateData function to
            obtain the actual bodies of the certificates.
            </para>
            <para>
            All ImageHlp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will
            likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more
            than one thread to this function.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.ImageHlp.ImageGetCertificateData(Vanara.PInvoke.HFILE,System.UInt32,System.IntPtr,System.UInt32@)">
            <summary>Retrieves a complete certificate from a file.</summary>
            <param name="FileHandle">A handle to the image file. This handle must be opened for <c>FILE_READ_DATA</c> access.</param>
            <param name="CertificateIndex">The index of the certificate to be returned.</param>
            <param name="Certificate">
            A pointer to a <c>WIN_CERTIFICATE</c> structure that receives the certificate data. If the buffer is not large enough to contain
            the structure, the function fails and the last error code is set to <c>ERROR_INSUFFICIENT_BUFFER</c>.
            </param>
            <param name="RequiredLength">
            On input, this parameter specifies the length of the Certificate buffer in bytes. On success, it receives the length of the certificate.
            </param>
            <returns>
            <para>If the function succeeds, the return value is <c>TRUE</c>.</para>
            <para>If the function fails, the return value is <c>FALSE</c>. To retrieve extended error information, call GetLastError.</para>
            </returns>
            <remarks>
            <para>The <c>WIN_CERTIFICATE</c> structure is defined as follows:</para>
            <para>
            <code>typedef struct _WIN_CERTIFICATE { DWORD dwLength; WORD wRevision; WORD wCertificateType; // WIN_CERT_TYPE_xxx BYTE bCertificate[ANYSIZE_ARRAY]; } WIN_CERTIFICATE, *LPWIN_CERTIFICATE;</code>
            </para>
            <para>
            All ImageHlp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will
            likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more
            than one thread to this function.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.ImageHlp.ImageGetCertificateHeader(Vanara.PInvoke.HFILE,System.UInt32,System.IntPtr)">
            <summary>Retrieves the header of the specified certificate, up to, but not including, the section offset array.</summary>
            <param name="FileHandle">A handle to the image file. This handle must be opened for FILE_READ_DATA access.</param>
            <param name="CertificateIndex">The index of the certificate whose header is to be returned.</param>
            <param name="Certificateheader">A pointer to the <c>WIN_CERTIFICATE</c> structure that receives the certificate header.</param>
            <returns>
            <para>If the function succeeds, the return value is <c>TRUE</c>.</para>
            <para>If the function fails, the return value is <c>FALSE</c>. To retrieve extended error information, call GetLastError.</para>
            </returns>
            <remarks>
            All ImageHlp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will
            likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more
            than one thread to this function.
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.ImageHlp.ImageGetDigestStream(Vanara.PInvoke.HFILE,System.UInt32,Vanara.PInvoke.ImageHlp.DIGEST_FUNCTION,System.IntPtr)">
            <summary>Retrieves the requested data from the specified image file.</summary>
            <param name="FileHandle">A handle to the image file. This handle must be opened for FILE_READ_DATA access.</param>
            <param name="DigestLevel">
            <para>
            The aspects of the image that are to be included in the returned data stream. This parameter can be one or more of the following values.
            </para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>CERT_PE_IMAGE_DIGEST_ALL_IMPORT_INFO 0x04</term>
            <term>Include all import information.</term>
            </item>
            <item>
            <term>CERT_PE_IMAGE_DIGEST_DEBUG_INFO 0x01</term>
            <term>Include symbolic debugging information.</term>
            </item>
            <item>
            <term>CERT_PE_IMAGE_DIGEST_RESOURCES 0x02</term>
            <term>Include resource information.</term>
            </item>
            </list>
            </param>
            <param name="DigestFunction">A pointer to a callback routine to process the data. For more information, see DigestFunction.</param>
            <param name="DigestHandle">A user-supplied handle to the digest. This parameter is passed to DigestFunction as the first argument.</param>
            <returns>
            <para>If the function succeeds, the return value is <c>TRUE</c>.</para>
            <para>If the function fails, the return value is <c>FALSE</c>. To retrieve extended error information, call GetLastError.</para>
            </returns>
            <remarks>
            <para>
            The <c>ImageGetDigestStream</c> function returns the data to be digested from a specified image file, subject to the passed
            DigestLevel parameter. The order of the bytes will be consistent for different calls, which is required to ensure that the same
            message digest is always produced from the retrieved byte stream.
            </para>
            <para>
            To ensure cross-platform compatibility, all implementations of this function must behave in a consistent manner with respect to
            the order in which the various parts of the image file are returned.
            </para>
            <para>Data should be returned in the following order:</para>
            <list type="number">
            <item>
            <term>Image (executable and static data) information.</term>
            </item>
            <item>
            <term>Resource data.</term>
            </item>
            <item>
            <term>Debugging information.</term>
            </item>
            </list>
            <para>If any of these are not specified, the remaining parts must be returned in the same order.</para>
            <para>
            All ImageHlp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will
            likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more
            than one thread to this function.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.ImageHlp.ImageLoad(System.String,System.String)">
            <summary>Maintains a list of loaded DLLs.</summary>
            <param name="DllName">The name of the image.</param>
            <param name="DllPath">
            The path used to locate the image if the name provided cannot be found. If <c>NULL</c> is used, then the search path rules set
            forth in the SearchPath function apply.
            </param>
            <returns>
            <para>If the function succeeds, the return value is a pointer to a LOADED_IMAGE structure.</para>
            <para>If the function fails, the return value is <c>NULL</c>. To retrieve extended error information, call GetLastError.</para>
            </returns>
            <remarks>
            <para>
            The <c>ImageLoad</c> function is used to maintain a list of loaded DLLs. If the image has already been loaded, the prior
            LOADED_IMAGE is returned. Otherwise, the new image is added to the list.
            </para>
            <para>The LOADED_IMAGE structure must be deallocated by the ImageUnload function.</para>
            <para>
            All ImageHlp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will
            likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more
            than one thread to this function.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.ImageHlp.ImageRemoveCertificate(Vanara.PInvoke.HFILE,System.UInt32)">
            <summary>Removes the specified certificate from the given file.</summary>
            <param name="FileHandle">
            A handle to the image file to be modified. This handle must be opened for FILE_READ_DATA and FILE_WRITE_DATA access.
            </param>
            <param name="Index">The index of the certificate to be removed.</param>
            <returns>
            <para>If the function succeeds, the return value is <c>TRUE</c>.</para>
            <para>If the function fails, the return value is <c>FALSE</c>. To retrieve extended error information, call GetLastError.</para>
            </returns>
            <remarks>
            All ImageHlp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will
            likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more
            than one thread to this function.
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.ImageHlp.ImageUnload(System.IntPtr)">
            <summary>Deallocates resources from a previous call to the ImageLoad function.</summary>
            <param name="LoadedImage">A pointer to a LOADED_IMAGE structure that is returned from a call to the ImageLoad function.</param>
            <returns>
            <para>If the function succeeds, the return value is <c>TRUE</c>.</para>
            <para>If the function fails, the return value is <c>FALSE</c>. To retrieve extended error information, call GetLastError.</para>
            <para>
            ImageLoad and <c>ImageUnload</c> share internal data that can be corrupted if multiple consecutive calls to <c>ImageLoad</c> are
            performed. Therefore, make sure that you have called <c>ImageLoad</c> only once before calling <c>ImageUnload</c>.
            </para>
            </returns>
            <remarks>
            All ImageHlp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will
            likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more
            than one thread to this function.
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.ImageHlp.MapAndLoad(System.String,System.String,System.IntPtr,System.Boolean,System.Boolean)">
            <summary>Maps an image and preloads data from the mapped file.</summary>
            <param name="ImageName">The file name of the image (executable file or DLL) that is loaded.</param>
            <param name="DllPath">
            The path used to locate the image if the name provided cannot be found. If this parameter is <c>NULL</c>, then the search path
            rules set using the SearchPath function apply.
            </param>
            <param name="LoadedImage">A pointer to a LOADED_IMAGE structure that receives information about the image after it is loaded.</param>
            <param name="DotDll">
            The default extension to be used if the image name does not contain a file name extension. If the value is <c>TRUE</c>, a .DLL
            extension is used. If the value is <c>FALSE</c>, then an .EXE extension is used.
            </param>
            <param name="ReadOnly">
            The access mode. If this value is <c>TRUE</c>, the file is mapped for read-access only. If the value is <c>FALSE</c>, the file
            is mapped for read and write access.
            </param>
            <returns>
            <para>If the function succeeds, the return value is <c>TRUE</c>.</para>
            <para>If the function fails, the return value is <c>FALSE</c>. To retrieve extended error information, call GetLastError.</para>
            </returns>
            <remarks>
            <para>
            The <c>MapAndLoad</c> function maps an image and preloads data from the mapped file. The corresponding function, UnMapAndLoad,
            must be used to deallocate all resources that are allocated by the <c>MapAndLoad</c> function.
            </para>
            <para>
            All ImageHlp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will
            likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more
            than one thread to this function.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.ImageHlp.MapAndLoad(System.String,System.String,Vanara.PInvoke.DbgHelp.LOADED_IMAGE_UNSAFE*,System.Boolean,System.Boolean)">
            <summary>Maps an image and preloads data from the mapped file.</summary>
            <param name="ImageName">The file name of the image (executable file or DLL) that is loaded.</param>
            <param name="DllPath">
            The path used to locate the image if the name provided cannot be found. If this parameter is <c>NULL</c>, then the search path rules
            set using the SearchPath function apply.
            </param>
            <param name="LoadedImage">A pointer to a LOADED_IMAGE structure that receives information about the image after it is loaded.</param>
            <param name="DotDll">
            The default extension to be used if the image name does not contain a file name extension. If the value is <c>TRUE</c>, a .DLL
            extension is used. If the value is <c>FALSE</c>, then an .EXE extension is used.
            </param>
            <param name="ReadOnly">
            The access mode. If this value is <c>TRUE</c>, the file is mapped for read-access only. If the value is <c>FALSE</c>, the file is
            mapped for read and write access.
            </param>
            <returns>
            <para>If the function succeeds, the return value is <c>TRUE</c>.</para>
            <para>If the function fails, the return value is <c>FALSE</c>. To retrieve extended error information, call GetLastError.</para>
            </returns>
            <remarks>
            <para>
            The <c>MapAndLoad</c> function maps an image and preloads data from the mapped file. The corresponding function, <see
            cref="M:Vanara.PInvoke.ImageHlp.UnMapAndLoad(Vanara.PInvoke.DbgHelp.LOADED_IMAGE_UNSAFE*)"/>, must be used to deallocate all resources that are allocated by the <c>MapAndLoad</c> function.
            </para>
            <para>
            All ImageHlp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will
            likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more than
            one thread to this function.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.ImageHlp.MapFileAndCheckSum(System.String,System.UInt32@,System.UInt32@)">
            <summary>Computes the checksum of the specified file.</summary>
            <param name="Filename">The file name of the file for which the checksum is to be computed.</param>
            <param name="HeaderSum">
            A pointer to a variable that receives the original checksum from the image file, or zero if there is an error.
            </param>
            <param name="CheckSum">A pointer to a variable that receives the computed checksum.</param>
            <returns>
            <para>If the function succeeds, the return value is CHECKSUM_SUCCESS (0).</para>
            <para>If the function fails, the return value is one of the following.</para>
            <list type="table">
            <listheader>
            <term>Return code/value</term>
            <term>Description</term>
            </listheader>
            <item>
            <term>CHECKSUM_MAP_FAILURE 2</term>
            <term>Could not map the file.</term>
            </item>
            <item>
            <term>CHECKSUM_MAPVIEW_FAILURE 3</term>
            <term>Could not map a view of the file.</term>
            </item>
            <item>
            <term>CHECKSUM_OPEN_FAILURE 1</term>
            <term>Could not open the file.</term>
            </item>
            <item>
            <term>CHECKSUM_UNICODE_FAILURE 4</term>
            <term>Could not convert the file name to Unicode.</term>
            </item>
            </list>
            </returns>
            <remarks>
            <para>
            The <c>MapFileAndCheckSum</c> function computes a new checksum for the file and returns it in the CheckSum parameter. This
            function is used by any application that creates or modifies an executable image. Checksums are required for kernel-mode drivers
            and some system DLLs. The linker computes the original checksum at link time, if you use the appropriate linker switch. For more
            details, see your linker documentation.
            </para>
            <para>
            It is recommended that all images have valid checksums. It is the caller's responsibility to place the newly computed checksum
            into the mapped image and update the on-disk image of the file.
            </para>
            <para>
            Passing a Filename parameter that does not point to a valid executable image will produce unpredictable results. Any user of
            this function is encouraged to make sure that a valid executable image is being passed.
            </para>
            <para>
            All ImageHlp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will
            likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more
            than one thread to this function.
            </para>
            <para>
            <c>Note</c> The Unicode implementation of this function calls the ASCII implementation and as a result, the function can fail if
            the codepage does not support the characters in the path. For example, if you pass a non-English Unicode file path, and the
            default codepage is English, the unrecognized non-English wide chars are converted to "??" and the file cannot be opened (the
            function returns CHECKSUM_OPEN_FAILURE).
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.ImageHlp.ReBaseImage(System.String,System.String,System.Boolean,System.Boolean,System.Boolean,System.UInt32,System.UInt32@,System.IntPtr@,System.UInt32@,System.IntPtr@,System.UInt32)">
            <summary>
            <para>Changes the load address for the specified image, which reduces the required load time for a DLL.</para>
            <para>Alternatively, you can use the Rebase tool. This tool is available in Visual Studio and the Windows SDK.</para>
            <para>Note that this function is implemented as a call to the ReBaseImage64 function.</para>
            </summary>
            <param name="CurrentImageName">
            The name of the file to be rebased. You must specify the full path to the file unless the module is in the current working
            directory of the calling process.
            </param>
            <param name="SymbolPath">
            The path used to find the corresponding symbol file. Specify this path for executable images that have symbolic information
            because when image addresses change, the corresponding symbol database file (PDB) may also need to be changed. Note that even if
            the symbol path is not valid, the function will succeed if it is able to rebases your image.
            </param>
            <param name="fReBase">If this value is <c>TRUE</c>, the image is rebased. Otherwise, the image is not rebased.</param>
            <param name="fRebaseSysfileOk">
            If this value is <c>TRUE</c>, the system image is rebased. Otherwise, the system image is not rebased.
            </param>
            <param name="fGoingDown">If this value is <c>TRUE</c>, the image can be rebased below the given base; otherwise, it cannot.</param>
            <param name="CheckImageSize">The maximum size that the image can grow to, in bytes, or zero if there is no limit.</param>
            <param name="OldImageSize">A pointer to a variable that receives the original image size, in bytes.</param>
            <param name="OldImageBase">A pointer to a variable that receives the original image base.</param>
            <param name="NewImageSize">A pointer to a variable that receives the new image size after the rebase operation, in bytes.</param>
            <param name="NewImageBase">
            The base address to use for rebasing the image. If the address is not available and the fGoingDown parameter is set to
            <c>TRUE</c>, the function finds a new base address and sets this parameter to the new base address. If fGoingDown is
            <c>FALSE</c>, the function finds a new base address but does not set this parameter to the new base address.
            </param>
            <param name="TimeStamp">
            <para>
            The new time date stamp for the image file header. The value must be represented in the number of seconds elapsed since midnight
            (00:00:00), January 1, 1970, Universal Coordinated Time, according to the system clock.
            </para>
            <para>If this parameter is 0, the current file header time date stamp is incremented by 1 second.</para>
            </param>
            <returns>
            <para>If the function succeeds, the return value is <c>TRUE</c>.</para>
            <para>If the function fails, the return value is <c>FALSE</c>. To retrieve extended error information, call GetLastError.</para>
            </returns>
            <remarks>
            <para>
            The <c>ReBaseImage</c> function changes the desired load address for the specified image. This operation involves reading the
            entire image and updating all fixups, debugging information, and checksum. You can rebase an image to reduce the required load
            time for its DLLs. If an application can rely on a DLL being loaded at the desired load address, then the system loader does not
            have to relocate the image. The image is simply loaded into the application's virtual address space and the DllMain function is
            called, if one is present.
            </para>
            <para>
            All ImageHlp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will
            likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more
            than one thread to this function.
            </para>
            <para>You cannot rebase DLLs that link with /DYNAMICBASE or that reside in protected directories, such as the System32 folder.</para>
            <para>As an alternative to using this function, see the /BASE linker option.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.ImageHlp.ReBaseImage64(System.String,System.String,System.Boolean,System.Boolean,System.Boolean,System.UInt32,System.UInt32@,System.UInt64@,System.UInt32@,System.UInt64@,System.UInt32)">
            <summary>
            <para>Changes the load address for the specified image, which reduces the required load time for a DLL.</para>
            <para>Alternatively, you can use the Rebase tool. This tool is available in Visual Studio and the Windows SDK.</para>
            </summary>
            <param name="CurrentImageName">
            The name of the file to be rebased. You must specify the full path to the file unless the module is in the current working
            directory of the calling process.
            </param>
            <param name="SymbolPath">
            The path used to find the corresponding symbol file. Specify this path for executable images that have symbolic information
            because when image addresses change, the corresponding symbol database file (PDB) may also need to be changed. Note that even if
            the symbol path is not valid, the function will succeed if it is able to rebases your image.
            </param>
            <param name="fReBase">If this value is <c>TRUE</c>, the image is rebased. Otherwise, the image is not rebased.</param>
            <param name="fRebaseSysfileOk">
            If this value is <c>TRUE</c>, the system image is rebased. Otherwise, the system image is not rebased.
            </param>
            <param name="fGoingDown">If this value is <c>TRUE</c>, the image can be rebased below the given base; otherwise, it cannot.</param>
            <param name="CheckImageSize">The maximum size that the image can grow to, in bytes, or zero if there is no limit.</param>
            <param name="OldImageSize">A pointer to a variable that receives the original image size, in bytes.</param>
            <param name="OldImageBase">A pointer to a variable that receives the original image base.</param>
            <param name="NewImageSize">A pointer to a variable that receives the new image size after the rebase operation, in bytes.</param>
            <param name="NewImageBase">
            The base address to use for rebasing the image. If the address is not available and the fGoingDown parameter is set to
            <c>TRUE</c>, the function finds a new base address and sets this parameter to the new base address. If fGoingDown is
            <c>FALSE</c>, the function finds a new base address but does not set this parameter to the new base address.
            </param>
            <param name="TimeStamp">
            <para>
            The new time date stamp for the image file header. The value must be represented in the number of seconds elapsed since midnight
            (00:00:00), January 1, 1970, Universal Coordinated Time, according to the system clock.
            </para>
            <para>If this parameter is 0, the current file header time date stamp is incremented by 1 second.</para>
            </param>
            <returns>
            <para>If the function succeeds, the return value is <c>TRUE</c>.</para>
            <para>If the function fails, the return value is <c>FALSE</c>. To retrieve extended error information, call GetLastError.</para>
            </returns>
            <remarks>
            <para>
            The <c>ReBaseImage64</c> function changes the desired load address for the specified image. This operation involves reading the
            entire image and updating all fixups, debugging information, and checksum. You can rebase an image to reduce the required load
            time for its DLLs. If an application can rely on a DLL being loaded at the desired load address, then the system loader does not
            have to relocate the image. The image is simply loaded into the application's virtual address space and the DllMain function is
            called, if one is present.
            </para>
            <para>
            All ImageHlp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will
            likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more
            than one thread to this function.
            </para>
            <para>You cannot rebase DLLs that link with /DYNAMICBASE or that reside in protected directories, such as the System32 folder.</para>
            <para>As an alternative to using this function, see the /BASE linker option.</para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.ImageHlp.SetImageConfigInformation(Vanara.PInvoke.DbgHelp.LOADED_IMAGE@,Vanara.PInvoke.DbgHelp.IMAGE_LOAD_CONFIG_DIRECTORY32@)">
            <summary>Locates and changes the load configuration data of an image.</summary>
            <param name="LoadedImage">A pointer to a LOADED_IMAGE structure that is returned from a call to MapAndLoad or <c>LoadImage</c>.</param>
            <param name="ImageConfigInformation">A pointer to an IMAGE_LOAD_CONFIG_DIRECTORY64 structure.</param>
            <returns>
            <para>If the function succeeds, the return value is <c>TRUE</c>.</para>
            <para>If the function fails, the return value is <c>FALSE</c>. To retrieve extended error information, call GetLastError.</para>
            </returns>
            <remarks>
            <para>The <c>SetImageConfigInformation</c> function locates and returns the load configuration data of an image.</para>
            <para>
            All ImageHlp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will
            likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more
            than one thread to this function.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.ImageHlp.SetImageConfigInformation(Vanara.PInvoke.DbgHelp.LOADED_IMAGE@,Vanara.PInvoke.DbgHelp.IMAGE_LOAD_CONFIG_DIRECTORY64@)">
            <summary>Locates and changes the load configuration data of an image.</summary>
            <param name="LoadedImage">A pointer to a LOADED_IMAGE structure that is returned from a call to MapAndLoad or <c>LoadImage</c>.</param>
            <param name="ImageConfigInformation">A pointer to an IMAGE_LOAD_CONFIG_DIRECTORY64 structure.</param>
            <returns>
            <para>If the function succeeds, the return value is <c>TRUE</c>.</para>
            <para>If the function fails, the return value is <c>FALSE</c>. To retrieve extended error information, call GetLastError.</para>
            </returns>
            <remarks>
            <para>The <c>SetImageConfigInformation</c> function locates and returns the load configuration data of an image.</para>
            <para>
            All ImageHlp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will
            likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more
            than one thread to this function.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.ImageHlp.SplitSymbols(System.Text.StringBuilder,System.String,System.Text.StringBuilder,Vanara.PInvoke.ImageHlp.SPLITSYM)">
            <summary>Strips symbols from the specified image.</summary>
            <param name="ImageName">The name of the image from which to split symbols.</param>
            <param name="SymbolsPath">The subdirectory for storing symbols. This parameter is optional.</param>
            <param name="SymbolFilePath">The name of the generated symbol file. This file typically has a .dbg extension.</param>
            <param name="Flags">
            <para>The information to be split from the image. This parameter can be zero or a combination of the following values.</para>
            <list type="table">
            <listheader>
            <term>Value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>SPLITSYM_EXTRACT_ALL 0x00000002</term>
            <term>
            Usually, an image with the symbols split off will still contain a MISC debug directory with the name of the symbol file.
            Therefore, the debugger can still find the symbols. Using this flag removes this link. The end result is similar to using the
            -debug:none switch on the Microsoft linker.
            </term>
            </item>
            <item>
            <term>SPLITSYM_REMOVE_PRIVATE 0x00000001</term>
            <term>This strips off the private CodeView symbolic information when generating the symbol file.</term>
            </item>
            <item>
            <term>SPLITSYM_SYMBOLPATH_IS_SRC 0x00000004</term>
            <term>The symbol file path contains an alternate path to locate the .pdb file.</term>
            </item>
            </list>
            </param>
            <returns>
            <para>If the function succeeds, the return value is <c>TRUE</c>.</para>
            <para>If the function fails, the return value is <c>FALSE</c>. To retrieve extended error information, call GetLastError.</para>
            </returns>
            <remarks>
            <para>
            The <c>SplitSymbols</c> function should be used when stripping symbols from an image. It will create a symbol file that all
            compatible debuggers understand. The format is defined in WinNT.h and consists of an image header, followed by the array of
            section headers, the FPO information, and all debugging symbolic information from the image.
            </para>
            <para>
            If the SymbolsPath parameter is <c>NULL</c>, the symbol file is stored in the directory where the image exists. Otherwise, it is
            stored in the subdirectory below SymbolsPath that matches the extension of the image. Using this method reduces the chances of
            symbol file collision. For example, the symbols for myapp.exe will be in the SymbolsPath\exe directory and the symbols for
            myapp.dll will be in the SymbolsPath\dll directory.
            </para>
            <para>
            All ImageHlp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will
            likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more
            than one thread to this function.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.ImageHlp.TouchFileTimes(Vanara.PInvoke.HFILE,Vanara.PInvoke.SYSTEMTIME@)">
            <summary>Updates the date and time at which the specified file was last modified.</summary>
            <param name="FileHandle">A handle to the file of interest.</param>
            <param name="pSystemTime">
            A pointer to a SYSTEMTIME structure. If this parameter is <c>NULL</c>, the current system date and time is used.
            </param>
            <returns>
            <para>If the function succeeds, the return value is <c>TRUE</c>.</para>
            <para>If the function fails, the return value is <c>FALSE</c>. To retrieve extended error information, call GetLastError.</para>
            </returns>
            <remarks>
            All ImageHlp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will
            likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more
            than one thread to this function.
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.ImageHlp.TouchFileTimes(Vanara.PInvoke.HFILE,System.IntPtr)">
            <summary>Updates the date and time at which the specified file was last modified.</summary>
            <param name="FileHandle">A handle to the file of interest.</param>
            <param name="pSystemTime">
            A pointer to a SYSTEMTIME structure. If this parameter is <c>NULL</c>, the current system date and time is used.
            </param>
            <returns>
            <para>If the function succeeds, the return value is <c>TRUE</c>.</para>
            <para>If the function fails, the return value is <c>FALSE</c>. To retrieve extended error information, call GetLastError.</para>
            </returns>
            <remarks>
            All ImageHlp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will
            likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more
            than one thread to this function.
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.ImageHlp.UnMapAndLoad(System.IntPtr)">
            <summary>Deallocate all resources that are allocated by a previous call to the MapAndLoad function.</summary>
            <param name="LoadedImage">
            A pointer to a LOADED_IMAGE structure. This structure is obtained through a call to the MapAndLoad function.
            </param>
            <returns>
            <para>If the function succeeds, the return value is <c>TRUE</c>.</para>
            <para>If the function fails, the return value is <c>FALSE</c>. To retrieve extended error information, call GetLastError.</para>
            </returns>
            <remarks>
            <para>
            The <c>UnMapAndLoad</c> function must be used to deallocate all resources that are allocated by a previous call to MapAndLoad.
            This function also writes a new checksum value into the image before the file is closed. This ensures that if a file is changed,
            it can be successfully loaded by the system loader.
            </para>
            <para>
            All ImageHlp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will
            likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more
            than one thread to this function.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.ImageHlp.UnMapAndLoad(Vanara.PInvoke.DbgHelp.LOADED_IMAGE_UNSAFE*)">
            <summary>Deallocate all resources that are allocated by a previous call to the MapAndLoad function.</summary>
            <param name="LoadedImage">
            A pointer to a LOADED_IMAGE structure. This structure is obtained through a call to the MapAndLoad function.
            </param>
            <returns>
            <para>If the function succeeds, the return value is <c>TRUE</c>.</para>
            <para>If the function fails, the return value is <c>FALSE</c>. To retrieve extended error information, call GetLastError.</para>
            </returns>
            <remarks>
            <para>
            The <c>UnMapAndLoad</c> function must be used to deallocate all resources that are allocated by a previous call to MapAndLoad.
            This function also writes a new checksum value into the image before the file is closed. This ensures that if a file is changed,
            it can be successfully loaded by the system loader.
            </para>
            <para>
            All ImageHlp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will
            likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more
            than one thread to this function.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.ImageHlp.UpdateDebugInfoFile(System.String,System.String,System.Text.StringBuilder,Vanara.PInvoke.DbgHelp.IMAGE_NT_HEADERS@)">
            <summary>
            <para>Uses the specified information to update the corresponding fields in the symbol file.</para>
            <para><c>Note</c> This function works with .dbg files, not .pdb files.</para>
            <para>
            This function has been superseded by the UpdateDebugInfoFileEx function. Use <c>UpdateDebugInfoFileEx</c> to verify the checksum value.
            </para>
            </summary>
            <param name="ImageFileName">The name of the image that is now out of date with respect to its symbol file.</param>
            <param name="SymbolPath">The path in which to look for the symbol file.</param>
            <param name="DebugFilePath">A pointer to a buffer that receives the name of the symbol file that was updated.</param>
            <param name="NtHeaders">A pointer to an IMAGE_NT_HEADERS structure that specifies the new header information.</param>
            <returns>
            <para>If the function succeeds, the return value is <c>TRUE</c>.</para>
            <para>If the function fails, the return value is <c>FALSE</c>. To retrieve extended error information, call GetLastError.</para>
            </returns>
            <remarks>
            <para>
            The <c>UpdateDebugInfoFile</c> function takes the information stored in the IMAGE_NT_HEADERS structure and updates the
            corresponding fields in the symbol file. Any time an image file is modified, this function should be called to keep the numbers
            in sync. Specifically, whenever an image checksum changes, the symbol file should be updated to match.
            </para>
            <para>
            All ImageHlp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will
            likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more
            than one thread to this function.
            </para>
            </remarks>
        </member>
        <member name="M:Vanara.PInvoke.ImageHlp.UpdateDebugInfoFileEx(System.String,System.String,System.Text.StringBuilder,Vanara.PInvoke.DbgHelp.IMAGE_NT_HEADERS@,System.UInt32)">
            <summary>
            <para>Uses the specified extended information to update the corresponding fields in the symbol file.</para>
            <para><c>Note</c> This function works with .dbg files, not .pdb files.</para>
            </summary>
            <param name="ImageFileName">The name of the image that is now out of date with respect to its symbol file.</param>
            <param name="SymbolPath">The path in which to look for the symbol file.</param>
            <param name="DebugFilePath">A pointer to a buffer that receives the name of the symbol file that was updated.</param>
            <param name="NtHeaders">A pointer to an IMAGE_NT_HEADERS structure that specifies the new header information.</param>
            <param name="OldCheckSum">
            The original checksum value. If this value does not match the checksum that is present in the mapped image, the flags in the
            symbol file contain IMAGE_SEPARATE_DEBUG_MISMATCH and the last error value is set to ERROR_INVALID_DATA.
            </param>
            <returns>
            <para>If the function succeeds, the return value is <c>TRUE</c>.</para>
            <para>If the function fails, the return value is <c>FALSE</c>.</para>
            </returns>
            <remarks>
            <para>
            The <c>UpdateDebugInfoFileEx</c> function takes the information stored in the IMAGE_NT_HEADERS structure and updates the
            corresponding fields in the symbol file. Any time an image file is modified, this function should be called to keep the numbers
            in sync. Specifically, whenever an image checksum changes, the symbol file should be updated to match.
            </para>
            <para>
            All ImageHlp functions, such as this one, are single threaded. Therefore, calls from more than one thread to this function will
            likely result in unexpected behavior or memory corruption. To avoid this, you must synchronize all concurrent calls from more
            than one thread to this function.
            </para>
            </remarks>
        </member>
    </members>
</doc>
